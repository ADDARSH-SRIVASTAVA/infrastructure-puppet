# This is the config file for the bloodhound project.

from buildbot.process.properties import Property

import os
import re
import tempfile

BloodhoundExcludes = masterExcludes # + [""]
BloodhoundExcludes = map(re.compile, BloodhoundExcludes)
isBloodhoundImportant = wasCodeTouched(BloodhoundExcludes)

# Use REPO (or REPO_HTTPS) where bb requires baseurl
REPO="http://svn.apache.org/repos/asf/"
REPO_HTTPS="https://svn.apache.org/repos/asf/"
TRUNKBRANCH = "bloodhound/trunk"
CURRENTBRANCH = "bloodhound/tags/0.8"

# schedulers

c['schedulers'].append(AnyBranchScheduler(name="on-bloodhound-rat-commit",
                         branches=[TRUNKBRANCH],
                         treeStableTimer=2*60,
                         builderNames=["bloodhound-trunk-rat-report"],
                         fileIsImportant=isBloodhoundImportant))

#c['schedulers'].append(Nightly(name='bh-demo1Nightly',
#              builderNames=['bh-demo1'],
#              branch=TRUNKBRANCH,
#              hour=3,
#              minute=0))

c['schedulers'].append(Nightly(name='bh-demo2Current',
              builderNames=['bh-demo2'],
              branch=CURRENTBRANCH,
              hour=3,
              minute=0))

c['schedulers'].append(AnyBranchScheduler(name="on-bloodhound-commit-unit-tests",
              branches=[TRUNKBRANCH],
              treeStableTimer=2*60,
              builderNames=["bh-unit-tests"],
              fileIsImportant=isBloodhoundImportant))

#builders

f_bh_1 = factory.BuildFactory()

f_bh_1.addStep(SVN(repourl=Interpolate("https://svn.apache.org/repos/asf/%(src::branch:~bloodhound/trunk)s")))

# If checkout of source didn't work, then no point continuing.

f_bh_1.addStep(ShellCommand(
             command=['bash', '-c', 'ant -f /home/buildslave3/slave3/rat-buildfiles/bloodhound.xml -lib /home/buildslave3/'],
))


# Above performs RAT tests on entire bloodhound build directories, output to txt file.
# Now we will publish that report to ci.apache.org/projects/bloodhound/rat-output.txt
# assuming that the report step itself was successful.

f_bh_1.addStep(FileUpload(slavesrc="../rat-output.xml",
                       masterdest="/tmp/bloodhound/rat-output.xml",
                       haltOnFailure=True,
))

# If we get this far, then the RAT report went fine and it was uploaded to master tmp
# dir without error. So now we can delete any previous report and move from tmp to
# published.

f_bh_1.addStep(MasterShellCommand(command="""
            rm -f /x1/buildmaster/master1/public_html/projects/bloodhound/rat-output.xml;
            cp /tmp/bloodhound/rat-output.xml /x1/buildmaster/master1/public_html/projects/bloodhound/rat-output.xml"""))

# Cleanup tmp

f_bh_1.addStep(MasterShellCommand(command="""
            rm -rf /tmp/bloodhound""",
            alwaysRun=True,
))

# Always run the tmp cleanup step, in case of failures part way through uploading etc..


b_bh_1 = {'name': "bloodhound-trunk-rat-report",
      'slavename': "bb-vm_ubuntu",
      'builddir': "bloodhound-trunk-rat-report",
      'factory': f_bh_1,
      'category': "bloodhound-trunk-rat-report",
      }

c['builders'].append(b_bh_1)

# demo1 builder

from functools import partial
def hasBuildProperty(prop, step):
    return (step.build.getProperties().has_key(prop) and 
            step.build.getProperty(prop))

isBHDemoNightly = partial(hasBuildProperty, 'bh-demo-nightly')
isBHDemoCurrent = partial(hasBuildProperty, 'bh-demo-current')
isBHBuildTest = partial(hasBuildProperty, 'bh-build-test')
isSearchDemo = partial(hasBuildProperty, 'searchdemo')
useCustomJS = partial(hasBuildProperty, 'use-custom-js')

def isBHDemo(step):
    return isBHDemoNightly(step) or isBHDemoCurrent(step)

WORKDIR = 'build/installer'
TRACWORKDIR = 'build/trac'
VENVDIR = 'bloodhound'
VBINDIR = 'bloodhound/bin'
VLIBDIR = 'bloodhound/lib/python2.7'
DEVREQSFILE = 'requirements-dev.txt'
REQSFILE = 'requirements.txt'
reqsfile = DEVREQSFILE
ENV = {'PATH': VBINDIR + ':${PATH}', 'PYTHONPATH': VLIBDIR}

f_bh_2 = factory.BuildFactory()
f_bh_2.addStep(SVN(repourl="https://svn.apache.org/repos/asf/bloodhound/trunk",
                   doStepIf=isBHDemoNightly))
f_bh_2.addStep(SVN(repourl="https://svn.apache.org/repos/asf/bloodhound/tags/0.8",
                   doStepIf=isBHDemoCurrent))

# add a step here to clean out old virtualenv
f_bh_2.addStep(ShellCommand(
    command=['rm', '-r', 'bloodhound'],
    flunkOnFailure=False,
    workdir=WORKDIR, name='cleanup'))

# basic installation steps
f_bh_2.addStep(ShellCommand(
    command=['virtualenv', '--no-site-packages', VENVDIR],
    workdir=WORKDIR, name='install virtualenv'))

# no need to activate the environment as we are specifying full paths

f_bh_2.addStep(ShellCommand(
    command=['pip', 'install', '-q', '-r', reqsfile],
    workdir=WORKDIR, env=ENV, name='install packages'))
f_bh_2.addStep(ShellCommand(
    command=['pip', 'install', 'Babel==0.9.6'],
    workdir=WORKDIR, env=ENV, name='install known working Babel version'))

f_bh_2.addStep(ShellCommand(
    command="BHPASSWD=`cat ../../pwfile`; python bloodhound_setup.py -d sqlite --admin-user=admin --admin-password=$BHPASSWD --project=main --environments_directory=bloodhound/environments",
    workdir=WORKDIR, env=ENV, name='setup'))

f_bh_2.addStep(ShellCommand(
    command=['cp', '../../bh_demo_db.sqlite', 'bloodhound/environments/main/db/bloodhound.db'],
    doStepIf=isBHDemo,
    workdir=WORKDIR, env=ENV, name='load fixture'))

f_bh_2.addStep(ShellCommand(
    command=['trac-admin', 'bloodhound/environments/main', 'upgrade'],
    doStepIf=isBHDemo,
    workdir=WORKDIR, env=ENV, name='upgrade'))

# Setup logging - sending to syslog for now
f_bh_2.addStep(ShellCommand(
    command=['trac-admin', 'bloodhound/environments/main/',
             'config', 'set', 'logging', 'log_format', 
             'BH[$(project)s:$(module)s] $(levelname)s: $(message)s'],
    doStepIf=isBHDemo,
    workdir=WORKDIR, env=ENV, name='set logging format'))
f_bh_2.addStep(ShellCommand(
    command=['trac-admin', 'bloodhound/environments/main/',
             'config', 'set', 'logging', 'log_level', 'INFO'],
    doStepIf=isBHDemo,
    workdir=WORKDIR, env=ENV, name='set logging level'))
f_bh_2.addStep(ShellCommand(
    command=['trac-admin', 'bloodhound/environments/main/',
             'config', 'set', 'logging', 'log_type', 'syslog'],
    doStepIf=isBHDemo,
    workdir=WORKDIR, env=ENV, name='start logging'))

f_bh_2.addStep(ShellCommand(
    command=['trac-admin', 'bloodhound/environments/main/',
             'wiki', 'load', Property('demo-pages')],
    doStepIf=isBHDemo,
    workdir=WORKDIR, env=ENV, name='load demo pages'))

f_bh_2.addStep(ShellCommand(
    command=['trac-admin', 'bloodhound/environments/main/',
             'config', 'set', 'project', 'name', Property('demo-name')],
    doStepIf=isBHDemo,
    workdir=WORKDIR, env=ENV, name='set demo name'))

f_bh_2.addStep(ShellCommand(
    command=['trac-admin', 'bloodhound/environments/main/',
             'config', 'set', 'components',
             'acct_mgr.register.registrationmodule', 'enabled'],
    doStepIf=isBHDemo,
    workdir=WORKDIR, env=ENV, name='enable self registration'))

f_bh_2.addStep(ShellCommand(
    command=['trac-admin', 'bloodhound/environments/main/',
             'product', 'admin', '@', 'permission', 'remove', '*', '*'],
    doStepIf=isBHDemo,
    workdir=WORKDIR, env=ENV, name='remove default product permissions'))

f_bh_2.addStep(ShellCommand(
    command=['trac-admin', 'bloodhound/environments/main/',
             'permission', 'import', '/home/buildslave30/bh_additional/permissions/perms.csv'],
    doStepIf=isBHDemo,
    workdir=WORKDIR, env=ENV, name='update anonymous permissions'))

f_bh_2.addStep(ShellCommand(
    command=['trac-admin', 'bloodhound/environments/main/',
             'product', 'admin', '@', 'permission', 'import', '/home/buildslave30/bh_additional/permissions/perms.csv'],
    doStepIf=isBHDemo,
    workdir=WORKDIR, env=ENV, name='update anonymous permissions for default product'))

f_bh_2.addStep(ShellCommand(
    command=['cp', Property('demo-logo'), 'bloodhound/environments/main/htdocs/logo.png'],
    doStepIf=isBHDemo,
    workdir=WORKDIR, env=ENV, name='set logo part 1'))

f_bh_2.addStep(ShellCommand(
    command=['trac-admin', 'bloodhound/environments/main/',
             'config', 'set', 'header_logo', 'src', 'site/logo.png'],
    doStepIf=isBHDemo,
    workdir=WORKDIR, env=ENV, name='set logo part 2'))

# optional enabling of search in the demo
f_bh_2.addStep(ShellCommand(
    command="""echo "
[components]
bhsearch.* = enabled
" >> bloodhound/environments/main/conf/base.ini""",
    doStepIf=isSearchDemo,
    workdir=WORKDIR, env=ENV, name='load search config'))

f_bh_2.addStep(ShellCommand(
    command=['trac-admin', 'bloodhound/environments/main', 'upgrade'],
    doStepIf=isBHDemo,
    workdir=WORKDIR, env=ENV, name='reupgrade'))

# initial indexing for search
f_bh_2.addStep(ShellCommand(
    command=['trac-admin', 'bloodhound/environments/main', 'bhsearch', 'rebuild'],
    doStepIf=isSearchDemo,
    workdir=WORKDIR, env=ENV, name='index search'))

# site deployment for apache
f_bh_2.addStep(ShellCommand(
    command=['trac-admin', 'bloodhound/environments/main/',
             'deploy', 'bloodhound/site'],
    doStepIf=isBHDemo,
    workdir=WORKDIR, env=ENV, name='site setup'))

# use any custom js hack?
f_bh_2.addStep(ShellCommand(
    command=['cp', '../../theme.js', 'bloodhound/environments/main/htdocs/'],
    doStepIf=useCustomJS,
    workdir=WORKDIR, env=ENV, name='theme.js hack part1'))
f_bh_2.addStep(ShellCommand(
    command=['cp', '../../site.html', 'bloodhound/environments/main/templates/'],
    doStepIf=useCustomJS,
    workdir=WORKDIR, env=ENV, name='theme.js hack part2'))

# note the following will only work with a sudoers entry like:
#   buildslave ALL=(ALL) NOPASSWD:/usr/sbin/apache2ctl
f_bh_2.addStep(ShellCommand(
    command=['sudo', '/usr/sbin/apache2ctl', '-k graceful'],
    doStepIf=isBHDemo, name='trigger apache restart'))

# f_bh_2.addStep(ShellCommand(command=['bash' , '-c' , '../build-env.sh']))
# f_bh_2.addStep(ShellCommand(command=['bash' , '-ci' , '../run-demo.sh']))

# add some tests here!

b_bh_2 = {'name': "bh-demo1",
      'properties': {'bh-demo-nightly':True, 'branch':TRUNKBRANCH, 'searchdemo':True,
                     'demo-name': 'Bloodhound Nightly Demo',
                     'demo-pages': '/home/buildslave30/bh_additional/bh_nightly_pages/',
                     'demo-logo': '/home/buildslave30/bh_additional/logos/bh_logo_nightly.png'},
      'slavename': "bb-bhvm2-demos",
      'builddir': "bh-demo1",
      'factory': f_bh_2,
      'category': "bh-demo1",
      'env': {'DBSTRING': '[sqlite:db/trac.db]'}
      }
b_bh_3 = {'name': "bh-demo2",
      'properties': {'bh-demo-current':True, 'branch':CURRENTBRANCH,
                     'demo-name': 'Bloodhound Current Demo',
                     'demo-pages': '/home/buildslave30/bh_additional/bh_current_pages/',
                     'demo-logo': '/home/buildslave30/bh_additional/logos/bh_logo_current.png',
                     'use-custom-js': True},
      'slavename': "bb-bhvm2-demos",
      'builddir': "bh-demo2",
      'factory': f_bh_2,
      'category': "bh-demo2",
      'env': {'DBSTRING': '[sqlite:db/trac.db]'}
      }

#c['builders'].append(b_bh_2)
c['builders'].append(b_bh_3)

# unit tests builder
WORKDIR = 'build'
INSTALLERWORKDIR = WORKDIR + '/installer'
TRACWORKDIR = WORKDIR + '/trac'
VENVDIR = 'bh'
VBINDIR = VENVDIR + '/bin'
VLIBDIR = VENVDIR + '/lib/python2.7'
DEVREQSFILE = 'requirements-dev.txt'
REQSFILE = 'requirements.txt'
reqsfile = DEVREQSFILE
ENV = {'PATH': [VBINDIR, '${PATH}'], 'PYTHONPATH': VLIBDIR}
INSTALLERENV = {'PATH': ['../' + VBINDIR, '${PATH}'], 'PYTHONPATH': '../' + VLIBDIR}

PLUGIN_TEST_MAP = {"multiproduct": "tests",
                   "dashboard test_report": "bhdashboard.tests.test_report",
                   "dashboard test_webui": "bhdashboard.tests.test_webui",
                   "search": "bhsearch.tests",
                   "relations": "bhrelations.tests",
                  }

f_bh_4 = factory.BuildFactory()

f_bh_4.addStep(SVN(repourl=Interpolate("https://svn.apache.org/repos/asf/%(src::branch:~bloodhound/trunk)s")))

# basic setup
f_bh_4.addStep(ShellCommand(
               command=['virtualenv', VENVDIR],
               workdir=WORKDIR, name='install virtualenv'))
f_bh_4.addStep(ShellCommand(
               command=['../bh/bin/pip', 'install', '-r', reqsfile],
               workdir=INSTALLERWORKDIR, env=INSTALLERENV, name='install packages'))
# current extra test requirements
f_bh_4.addStep(ShellCommand(
               command=['pip', 'install', 'dutest', 'twill', 
                        'svn+http://trac-hacks.org/svn/xmlrpcplugin/trunk'],
               workdir=WORKDIR, env=ENV, name='install test packages'))

# Cleanup /tmp so the following step will not fail prematurely
f_bh_4.addStep(ShellCommand(
               command=['rm', '-rf',
                        os.path.join(tempfile.gettempdir(), 'trac-svnrepos')],
               workdir=WORKDIR, env=ENV, name='trac tests prep',
               warnOnFailure=True, flunkOnFailure=False))

# trac tests run for comparison for the moment
f_bh_4.addStep(ShellCommand(command=['make', 'unit-test'],
               workdir=TRACWORKDIR, env=INSTALLERENV, name='trac unit-tests',
               warnOnFailure=True, flunkOnFailure=False))

# bloodhound tests themselves
for plugin in PLUGIN_TEST_MAP.keys():
    f_bh_4.addStep(ShellCommand(
        command=['../bh/bin/python', 'setup.py', 'test',
                 '-m', PLUGIN_TEST_MAP[plugin]],
        workdir='build/bloodhound_%s' % plugin.split()[0],
        name='run %s tests' % plugin))

b_bh_4 = {'name': 'bh-unit-tests',
          'slavename': 'bb-fedora',
          'builddir': 'bh-unit-tests',
          'factory': f_bh_4,
          'category': "bloodhound-unit-tests",
         }
c['builders'].append(b_bh_4)

#mail status

c['status'].append(mail.MailNotifier(fromaddr="buildbot@apache.org",
                                     extraRecipients=["gavin@16degrees.com.au"],
                                     sendToInterestedUsers=False,
                                     mode="change",
                                     categories=["bloodhound-trunk-rat-report"]))
c['status'].append(mail.MailNotifier(fromaddr="buildbot@apache.org",
                                     extraRecipients=["gjm@apache.org"],
                                     sendToInterestedUsers=False,
                                     mode="change",
                                     categories=["bloodhound-unit-tests",
                                                 "bh-demo1", "bh-demo2"]))

c['status'].append(words.IRC(host="chat.freenode.net", nick="bloodhound-bot",
                              allowForce=True,
                              channels=["#bloodhound"],
                              notify_events={'successToFailure': 1,
                                             'failureToSuccess': 1,
                                             },
                              # useSSL=True,
                              categories=["bloodhound-trunk-rat-report",
                                          "bloodhound-unit-tests",
                                          "bh-demo1", "bh-demo2"])
)
