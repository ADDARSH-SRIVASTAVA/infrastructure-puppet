  # This is the config file for the TomEE / OpenEJB project.

tomee_mail_notifications = []
tomee_irc_notifications = []


def tomee_builder_name():
    import sys

    return sys._getframe(1).f_code.co_name.replace("_", "-")

#builders


def tomee_site_staging():
    f = factory.BuildFactory()
    f.addStep(Compile(command=["perl",
                               "/usr/local/cms/build/build_svn.pl",
                               "--source-base=/home/cmsslave/slave15/tomee-site-staging/build/trunk/",
                               "--target-base=/usr/local/websites/tomee/trunk/"]))
    f.addStep(ShellCommand(command=["svn", "ci", "--username=buildbot", "/usr/local/websites/tomee/trunk", "-m", "Staging update by buildbot for tomee"]))

    name = tomee_builder_name()

    # Scheduler
    c['schedulers'].append(AnyBranchScheduler(name="on-" + name + "-commit",
        branches=["tomee/site", "tomee/tomee/trunk/examples"],
        treeStableTimer=2,
        builderNames=[name]))

    # Builder
    return {'name': name,
            'slavename': "bb-cms-slave",
            'builddir': name,
            'factory': f,
            'category': name,
            }

c['builders'].append(tomee_site_staging())


def tomee_site_production():
    scm_path = "tomee/site"
    name = tomee_builder_name()

    f = factory.BuildFactory()
    #f.addStep(SVN(repourl="https://svn.apache.org/repos/asf/" + scm_path))
    f.addStep(SVN(mode='full', method='clobber', repourl="https://svn.apache.org/repos/asf/" + scm_path))
    f.addStep(Compile(command=["perl",
                               "/usr/local/cms/build/build_file.pl",
                               "--source-base=/home/cmsslave/slave15/tomee-site-production/build/trunk",
                               "--target-base=/usr/local/websites/production/tomee",
                               "--source=content/index.html"]))
    f.addStep(ShellCommand(command=["svnmucc", "-m", "Dynamic update by buildbot for tomee",
                                    "-U", "https://svn.apache.org/repos/infra/websites",
                                    "put", "/usr/local/websites/production/tomee/content/index.html", "staging/tomee/trunk/content/index.html",
                                    "put", "/usr/local/websites/production/tomee/content/index.html", "production/tomee/content/index.html",
                                    ]))

    # Scheduler
    c['schedulers'].append(Nightly(name=name,
        branch=scm_path,
        builderNames=[name],
        minute=26))

    # Builder
    return {'name': name,
            'slavename': "bb-cms-slave",
            'builddir': name,
            'factory': f,
            'category': name,
            }

c['builders'].append(tomee_site_production())


def tomee_site_refresh_page(pages):
    scm_path = 'tomee/site'
    name = tomee_builder_name()

    compile = ["perl",
               "/usr/local/cms/build/build_file.pl",
               "--source-base=/home/cmsslave/slave15/tomee-site-production/build/trunk",
               "--target-base=/usr/local/websites/production/tomee"]

    svnmucc = ["svnmucc",
               "-m", "Dynamic update by buildbot for tomee",
               "-U", "https://svn.apache.org/repos/infra/websites"]

    for page in pages:
        source = page[0]
        target = page[1]

        compile.append("content/" + source)

        svnmucc.extend(["put", "/usr/local/websites/production/tomee/content/" + target, "staging/tomee/trunk/content/" + target])
        svnmucc.extend(["put", "/usr/local/websites/production/tomee/content/" + target, "production/tomee/content/" + target])

    f = factory.BuildFactory()
    f.addStep(SVN(repourl="https://svn.apache.org/repos/asf/" + scm_path))
    f.addStep(Compile(command=compile))
    f.addStep(ShellCommand(command=svnmucc))

    tomee_irc_notifications.append(name)

    # Scheduler
    c['schedulers'].append(Nightly(name=name,
        branch=scm_path,
        builderNames=[name],
        hour=[4],
        minute=48))

    # Builder
    return {'name': name,
            'slavename': "bb-cms-slave",
            'builddir': name,
            'factory': f,
            'category': name,
            }


def tomee_jira_reports():
    scm_path = 'tomee/site'
    name = tomee_builder_name()

    f = factory.BuildFactory()
    f.addStep(SVN(repourl="https://svn.apache.org/repos/asf/" + scm_path))
    f.addStep(Compile(command=["perl",
                               "/usr/local/cms/build/build_file.pl",
                               "--source-base=/home/cmsslave/slave15/tomee-site-production/build/trunk",
                               "--target-base=/usr/local/websites/production/tomee",
                               "content/dev/jira/index.html",
                               "content/dev/jira/todo.swjira",
                               "content/dev/jira/patches.swjira",
                               ]))
    f.addStep(ShellCommand(command=["svnmucc", "-m", "Dynamic update by buildbot for tomee",
                                    "-U", "https://svn.apache.org/repos/infra/websites",
                                    "put", "/usr/local/websites/production/tomee/content/dev/jira/index.html", "staging/tomee/trunk/content/dev/jira/index.html",
                                    "put", "/usr/local/websites/production/tomee/content/dev/jira/todo.html", "staging/tomee/trunk/content/dev/jira/todo.html",
                                    "put", "/usr/local/websites/production/openejb/content/dev/jira/patches.html",
                                    "staging/tomee/trunk/content/dev/jira/patches.html",
                                    ]))

    # Scheduler
    c['schedulers'].append(Nightly(name=name,
        branch=scm_path,
        builderNames=[name],
        hour=[6],
        minute=48))

    # Builder
    return {'name': name,
            'slavename': "bb-cms-slave",
            'builddir': name,
            'factory': f,
            'category': name,
            }

c['builders'].append(tomee_jira_reports())


def tomee_trunk_empty_repo():
    scm_path = 'tomee/tomee/trunk'
    name = tomee_builder_name()

    f = factory.BuildFactory()
    #f.addStep(SVN(repourl="https://svn.apache.org/repos/asf/" + scm_path))
    f.addStep(Git(repourl="https://git-wip-us.apache.org/repos/asf/tomee.git", mode='full', method='clobber', submodules=True, branch='master'))
    f.addStep(ShellCommand(command=["rm", "-rf", "/tmp/openejb-empty-repo"]))
    f.addStep(ShellCommand(command=["mkdir", "-p", "/tmp/openejb-empty-repo"]))
    f.addStep(Compile(
        command=[
            "mvn3",
            "-U",
            "-Dmaven.repo.local=/tmp/openejb-empty-repo",
            "--show-version",
            "clean",
            "install",
            "-DfailIfNoTests=false",
            "-DskipTests",
            "-Djava.io.tmpdir=/tmp/openejb-empty-repo"
        ],
        env={'MAVEN_OPTS': '-Xmx1024m -XX:PermSize=64m -XX:MaxPermSize=256m'},
        warningPattern="(^WARN) | (^WARNING) | (^warning) | (.*warning[:].*)",
        warnOnWarnings=False,
        name="compile"
    ))
    f.addStep(Compile(
        command=[
            "mvn3",
            "-U",
            "-Dmaven.repo.local=/tmp/openejb-empty-repo",
            "clean",
            "install",
            "-Djava.io.tmpdir=/tmp/openejb-empty-repo"
        ],
        env={'MAVEN_OPTS': '-Xmx1280m -XX:PermSize=96m -XX:MaxPermSize=320m'},
        warningPattern="(^WARN) | (^WARNING) | (^warning) | (.*warning[:].*)",
        warnOnWarnings=False,
        name="test"
    ))
    f.addStep(ShellCommand(
        command=["bash", "-c", "find . -name 'org.*.txt' | xargs cat"],
        alwaysRun=True,
        name="test-results"

    ))
    f.addStep(ShellCommand(command=["rm", "-rf", "/tmp/openejb-empty-repo"], alwaysRun=True))

    # Scheduler
    c['schedulers'].append(Nightly(name=name,
        branch=scm_path,
        builderNames=[name],
        dayOfWeek=1,
        hour=[8],
        minute=17))

    # Notifications
    tomee_irc_notifications.append(name)
    tomee_mail_notifications.append(name)

    # Builder
    return {'name': name,
            'slavename': "hemera_ubuntu",
            'builddir': name,
            'factory': f,
            'category': name,
            'env': {'JAVA_HOME': '/home/buildslave18/slave18/tools/java/latest1.7'}
    }

c['builders'].append(tomee_trunk_empty_repo())


def tomee_hemera_builder(name, scm_path, vm, mopts):

    tmpdir = "/tmp/" + name

    f = factory.BuildFactory()
    #f.addStep(SVN(mode='full', method='clobber', repourl="https://svn.apache.org/repos/asf/" + scm_path))
    f.addStep(Git(repourl="https://git-wip-us.apache.org/repos/asf/tomee.git", mode='full', method='clobber', submodules=True, branch="" + scm_path))

    f.addStep(ShellCommand(
        command=[
            "mvn3",
            "-U",
            "checkstyle:check",
            "-Pstyle"
        ],
        name="check-formatting"
    ))

    f.addStep(ShellCommand(
        command=[
            "mvn3",
            "pmd:check",
            "-Pstyle"
        ],
        name="check-pmd"
    ))

    f.addStep(ShellCommand(command=["rm", "-rf", tmpdir], name="remove-tmpdir"))

    f.addStep(ShellCommand(command=["mkdir", "-p", tmpdir], name="create-tmpdir"))

    f.addStep(Compile(
        command=[
            "mvn3",
            "-e",
            "--show-version",
            "--update-snapshots",
            "--fail-at-end",
            "-Djava.io.tmpdir=" + tmpdir,
            "clean",
            "install",
            "-DfailIfNoTests=false",
            "-DskipTests",
            ],
        env={'MAVEN_OPTS': mopts},
        warningPattern="(^WARN) | (^WARNING) | (^warning) | (.*warning[:].*)",
        warnOnWarnings=False,
        timeout=2400,
        name="compile"
    ))

    f.addStep(ShellCommand(command=["rm", "-rf", tmpdir], name="remove-tmpdir"))

    f.addStep(ShellCommand(command=["mkdir", "-p", tmpdir], name="create-tmpdir"))

    f.addStep(Compile(
        command=[
            "mvn3",
            "-U",
            "--show-version",
            "--fail-at-end",
            "-Djava.io.tmpdir=" + tmpdir,
            "clean",
            "install",
            "-Pall-adapters",
            "-Dsurefire.useFile=false",
            "-DdisableXmlReport=true",
            "-Dopenejb.arquillian.debug=true",
            "-DTOMEE_LOCK_FILE=/tmp/tomee.port.lock",
            ],
        env={'MAVEN_OPTS': mopts},
        warningPattern="(^WARN) | (^WARNING) | (^warning) | (.*warning[:].*)",
        warnOnWarnings=False,
        timeout=18000,
        name="test"
    ))

    f.addStep(ShellCommand(
        command=["bash", "-c", "find . -name 'org.*.txt' | xargs cat"],
        alwaysRun=True,
        name="test-results"
    ))

    f.addStep(ShellCommand(command=["rm", "-rf", tmpdir], name="clean-directory"))

    # Scheduler
    c['schedulers'].append(SingleBranchScheduler(name="on-" + name + "-commit",
                     change_filter=filter.ChangeFilter(branch=scm_path, project="tomee"),
                     treeStableTimer=2,
                     builderNames=[name]))

    # Notifications
    tomee_irc_notifications.append(name)
    tomee_mail_notifications.append(name)

    # Builder
    return {'name': name,
            'slavename': "hemera_ubuntu",
            'builddir': name,
            'factory': f,
            'category': name,
            'env': {'JAVA_HOME': "/home/buildslave18/slave18/tools/java/" + vm}
    }


def tomee_trunk_itests():
    scm_path = 'tomee/tomee/trunk'
    name = tomee_builder_name()

    f = factory.BuildFactory()
    #f.addStep(SVN(repourl="https://svn.apache.org/repos/asf/" + scm_path))
    f.addStep(Git(repourl="https://git-wip-us.apache.org/repos/asf/tomee.git", mode='full', method='clobber', submodules=True, branch='master'))
    f.addStep(ShellCommand(command=["rm", "-Rf", "/tmp/openejb-itests"]))
    f.addStep(ShellCommand(command=["mkdir", "-p", "/tmp/openejb-itests"]))
    f.addStep(Compile(
        command=[
            "mvn3",
            "--show-version",
            "-U",
            "clean",
            "install",
            "-Pwebapp-deployer",
            "-Djava.io.tmpdir=/tmp/openejb-itests"
        ],
        env={'MAVEN_OPTS': '-Xmx1024m -XX:PermSize=64m -XX:MaxPermSize=256m'},
        warningPattern="(^WARN) | (^WARNING) | (^warning) | (.*warning[:].*)",
        warnOnWarnings=False,
        alwaysRun=True,
        workdir="build/tck/cdi-tomee",
        name="cdi-tomee-webapp-deployer"
    ))
    f.addStep(ShellCommand(command=["rm", "-Rf", "/tmp/openejb-itests"]))

    # Scheduler
# Commenting since it is no more relevant and config is broken
# This logic is now the default and is tested in the default build
#    c['schedulers'].append(Nightly(name=name,
#        branch=scm_path,
#        builderNames=[name],
#        hour=[4],
#        minute=45))

    # Notifications
#    tomee_irc_notifications.append(name)
#    tomee_mail_notifications.append(name)

    # Builder
    return {'name': name,
            'slavename': "hemera_ubuntu",
            'builddir': name,
            'factory': f,
            'category': name,
            'env': {'JAVA_HOME': '/home/buildslave18/slave18/tools/java/latest1.6'}
    }

#c['builders'].append(tomee_trunk_itests())


def tomee_deploy_builder(name, scm_path, vm):

    tmpdir = "/tmp/" + name

    f = factory.BuildFactory()
    #f.addStep(SVN(repourl="https://svn.apache.org/repos/asf/" + scm_path))
    f.addStep(Git(repourl="https://git-wip-us.apache.org/repos/asf/tomee.git", mode='full', method='clobber', submodules=True, branch="" + scm_path))
    f.addStep(ShellCommand(command=["rm", "-rf", tmpdir]))
    f.addStep(ShellCommand(command=["mkdir", "-p", tmpdir]))
    f.addStep(Compile(
        command=[
            "mvn3",
            "--show-version",
            "-U",
            "clean",
            "source:jar",
            "deploy",
            "-DskipTests",
            "-fn",
            "-DfailIfNoTests=false",
            "-Djava.io.tmpdir=" + tmpdir
        ],
        env={'MAVEN_OPTS': '-Xmx1024m -XX:PermSize=64m -XX:MaxPermSize=256m'},
        warningPattern="(^WARN) | (^WARNING) | (^warning) | (.*warning[:].*)",
        warnOnWarnings=False,
        name="deploy"
    ))
    # Scheduler
    c['schedulers'].append(Nightly(name=name,
        branch=scm_path,
        builderNames=[name],
        hour=[4],
        minute=5))
    # Notifications
    tomee_irc_notifications.append(name)
    tomee_mail_notifications.append(name)
    # Builder
    return {'name': name,
            'slavename': "hemera_ubuntu",
            'builddir': name,
            'factory': f,
            'category': name,
            'env': {'JAVA_HOME': "/home/buildslave18/slave18/tools/java/" + vm}
    }


def openejb_branch32():
    scm_path = "tomee/openejb/branches/openejb-3.2.x"
    name = tomee_builder_name()

    f = factory.BuildFactory()
    f.addStep(SVN(repourl="https://svn.apache.org/repos/asf/" + scm_path))
    f.addStep(ShellCommand(command=["mkdir", "-p", "tmp"]))
    f.addStep(Compile(
        command=[
            "mvn3",
            "--show-version",
            "-U",
            "-Dassemble",
            "clean",
            "install",
            "-DskipTests",
            "-DfailIfNoTests=false",
            "-Djava.io.tmpdir=./tmp"
        ],
        env={'MAVEN_OPTS': '-Xmx1024m -XX:PermSize=64m -XX:MaxPermSize=256m'},
        warningPattern="(^WARN) | (^WARNING) | (^warning) | (.*warning[:].*)",
        warnOnWarnings=False,
        haltOnFailure=True,
        name="compile"
    ))
    f.addStep(Compile(
        command=[
            "mvn3",
            "--show-version",
            "-U",
            "-Dassemble",
            "clean",
            "install",
            "-Djava.io.tmpdir=./tmp"
        ],
        env={'MAVEN_OPTS': '-Xmx1024m -XX:PermSize=64m -XX:MaxPermSize=256m'},
        warningPattern="(^WARN) | (^WARNING) | (^warning) | (.*warning[:].*)",
        warnOnWarnings=False,
        haltOnFailure=True,
        name="test"
    ))
    f.addStep(Compile(
        command=[
            "mvn3",
            "--show-version",
            "-U",
            "deploy",
            "-DskipTests",
            "-DfailIfNoTests=false",
            "-Djava.io.tmpdir=./tmp"
        ],
        env={'MAVEN_OPTS': '-Xmx1024m -XX:PermSize=64m -XX:MaxPermSize=256m'},
        warningPattern="(^WARN) | (^WARNING) | (^warning) | (.*warning[:].*)",
        warnOnWarnings=False,
        name="deploy"
    ))

    # Scheduler
    c['schedulers'].append(AnyBranchScheduler(name="on-" + name + "-commit",
        branches=[scm_path],
        treeStableTimer=2,
        builderNames=[name]))

    # Notifications
    tomee_irc_notifications.append(name)
    tomee_mail_notifications.append(name)

    # Builder
    return {'name': name,
            'slavename': "hemera_ubuntu",
            'builddir': name,
            'factory': f,
            'category': name
    }

c['builders'].append(openejb_branch32())


def openejb_branch31():
    scm_path = "tomee/openejb/branches/openejb-3.1.x"
    name = tomee_builder_name()

    f = factory.BuildFactory()
    f.addStep(SVN(repourl="https://svn.apache.org/repos/asf/" + scm_path))
    f.addStep(Compile(
        command=[
            "mvn3",
            "--show-version",
            "-U",
            "-Dassemble",
            "clean",
            "install",
            "-DskipTests",
            "-DfailIfNoTests=false",
            "-Djava.io.tmpdir=./tmp"
        ],
        env={'MAVEN_OPTS': '-Xmx1024m -XX:PermSize=64m -XX:MaxPermSize=256m'},
        warningPattern="(^WARN) | (^WARNING) | (^warning) | (.*warning[:].*)",
        warnOnWarnings=False,
        haltOnFailure=True,
        name="compile"
    ))
    f.addStep(ShellCommand(command=["mkdir", "-p", "tmp"]))
    f.addStep(Compile(
        command=[
            "mvn3",
            "--show-version",
            "-U",
            "-Dassemble",
            "clean",
            "install",
            "-Djava.io.tmpdir=./tmp"
        ],
        env={'MAVEN_OPTS': '-Xmx1024m -XX:PermSize=64m -XX:MaxPermSize=256m'},
        warningPattern="(^WARN) | (^WARNING) | (^warning) | (.*warning[:].*)",
        warnOnWarnings=False,
        haltOnFailure=True,
        name="test"
    ))
    f.addStep(Compile(
        command=[
            "mvn3",
            "--show-version",
            "-U",
            "deploy",
            "-DskipTests",
            "-DfailIfNoTests=false",
            "-Djava.io.tmpdir=./tmp"
        ],
        env={'MAVEN_OPTS': '-Xmx1024m -XX:PermSize=64m -XX:MaxPermSize=256m'},
        warningPattern="(^WARN) | (^WARNING) | (^warning) | (.*warning[:].*)",
        warnOnWarnings=False,
        name="deploy"
    ))

    # Scheduler
    c['schedulers'].append(AnyBranchScheduler(name="on-" + name + "-commit",
        branches=[scm_path],
        treeStableTimer=2,
        builderNames=[name]))

    # Notifications
    tomee_irc_notifications.append(name)
    tomee_mail_notifications.append(name)

    # Builder
    return {'name': name,
            'slavename': "hemera_ubuntu",
            'builddir': name,
            'factory': f,
            'category': name
    }

c['builders'].append(openejb_branch31())


def tomee_trunk_win_sunsdk6():
    scm_path = "tomee/tomee/trunk"
    name = tomee_builder_name()

    f = factory.BuildFactory()
    #f.addStep(SVN(repourl="https://svn.apache.org/repos/asf/" + scm_path))
    f.addStep(Git(repourl="https://git-wip-us.apache.org/repos/asf/tomee.git", mode='full', method='clobber', submodules=True, branch='master'))
    
    f.addStep(ShellCommand(command=["if", "not", "exist", "tmp", "mkdir", "tmp"]))
    f.addStep(Compile(
        command=[
            "mvn3",
            "--fail-never",
            "--errors",
            "--show-version",
            "-U",
            "clean",
            "install",
            "-DskipTests",
            "-DfailIfNoTests=false",
            "-Djava.io.tmpdir=tmp",
            "-Dsurefire.useFile=false",
            "-DdisableXmlReport=true"
        ],
        env={
            'MAVEN_OPTS': '-Xmx1024m -Xss2048k -XX:ReservedCodeCacheSize=64m -XX:PermSize=64m -XX:MaxPermSize=256m -XX:+HeapDumpOnOutOfMemoryError'},
        warningPattern="(^WARN) | (^WARNING) | (^warning) | (.*warning[:].*)",
        warnOnWarnings=False,
        name="compile"
    ))
    f.addStep(Compile(
        command=[
            "mvn3",
            "--fail-never",
            "--errors",
            "--show-version",
            "-U",
            "clean",
            "install",
            "-Djava.io.tmpdir=tmp",
            "-Dsurefire.useFile=false",
            "-DdisableXmlReport=true",
            "-Dopenejb.client.connection.socket.timeout=30000"
        ],
        env={
            'MAVEN_OPTS': '-Xmx1024m -Xss2048k -XX:ReservedCodeCacheSize=64m -XX:PermSize=64m -XX:MaxPermSize=256m -XX:+HeapDumpOnOutOfMemoryError'},
        warningPattern="(^WARN) | (^WARNING) | (^warning) | (.*warning[:].*)",
        warnOnWarnings=False,
        name="test"
    ))
    f.addStep(ShellCommand(
        command=["ant", "-q", "-e", "-f", "test-output.xml"],
        alwaysRun=True,
        name="test-results"

    ))

    # Scheduler
    c['schedulers'].append(AnyBranchScheduler(name="on-" + name + "-commit",
        branches=[scm_path],
        treeStableTimer=2,
        builderNames=[name]))

    # Notifications
    tomee_irc_notifications.append(name)
    tomee_mail_notifications.append(name)

    # Builder
    return {'name': name,
            'slavename': "bb-win7",
            'builddir': name,
            'factory': f,
            'category': name
    }


def tomee_windows_ibmjdk6_builder(name, scm_path):
    f = factory.BuildFactory()
    f.addStep(SVN(repourl="https://svn.apache.org/repos/asf/" + scm_path))
    f.addStep(ShellCommand(command=["mkdir", "-p", "tmp"]))
    base_dir = 'C:\slave4\\' + name
    f.addStep(Compile(
        command=[
            "mvn3",
            "--fail-fast",
            "--errors",
            "--show-version",
            "-U",
            "clean",
            "install",
            "-DskipTests",
            "-DfailIfNoTests=false",
            "-Djava.io.tmpdir=./tmp",
            "-Dsurefire.useFile=false",
            "-DdisableXmlReport=true",
            "-Dopenejb.client.connection.socket.timeout=5000"
        ],
        env={
            'MAVEN_OPTS': '-Xmx768m -Xdump:heap:events=systhrow,filter=java/lang/OutOfMemoryError,label=' + base_dir + '\dumps\heapdump.%Y%m%d.%H%M%S.%pid.%seq.ph -Xdump:java:events=gpf+user+abort+traceassert,label=' + base_dir + '\dumps\heapdump.%Y%m%d.%H%M%S.%pid.%seq.ph -Xdump:java:events=systhrow,filter=java/lang/OutOfMemoryError,label=' + base_dir + '\javacore.%Y%m%d.%H%M%S.%pid.%seq.txt',
            'JAVA_HOME': 'C:\Program Files (x86)\IBM\Java60',
            'IBM_COREDIR': base_dir + '\dumps'},
        timeout=2400,
        name="compile"
    ))
    f.addStep(Compile(
        command=[
            "mvn3",
            "--fail-fast",
            "--errors",
            "--show-version",
            "-U",
            "clean",
            "install",
            "-Djava.io.tmpdir=./tmp",
            "-Dsurefire.useFile=false",
            "-DdisableXmlReport=true",
            "-Dopenejb.client.connection.socket.timeout=5000"
        ],
        env={
            'MAVEN_OPTS': '-Xmx768m -Xdump:heap:events=systhrow,filter=java/lang/OutOfMemoryError,label=' + base_dir + '\dumps\heapdump.%Y%m%d.%H%M%S.%pid.%seq.ph -Xdump:java:events=gpf+user+abort+traceassert,label=' + base_dir + '\dumps\heapdump.%Y%m%d.%H%M%S.%pid.%seq.ph -Xdump:java:events=systhrow,filter=java/lang/OutOfMemoryError,label=' + base_dir + '\javacore.%Y%m%d.%H%M%S.%pid.%seq.txt',
            'JAVA_HOME': 'C:\Program Files (x86)\IBM\Java60',
            'IBM_COREDIR': base_dir + '\dumps'},
        timeout=2400,
        name="test"
    ))
    f.addStep(ShellCommand(
        command=["ant", "-q", "-e", "-f", "test-output.xml"],
        alwaysRun=True,
        name="test-results"
    ))

    # Scheduler
    c['schedulers'].append(AnyBranchScheduler(name="on-" + name + "-commit",
        branches=[scm_path],
        treeStableTimer=2 * 60,
        builderNames=[name]))
    # Notifications
    tomee_irc_notifications.append(name)
    tomee_mail_notifications.append(name)
    # Builder
    return {'name': name,
            'slavename': "bb-win7",
            'builddir': name,
            'factory': f,
            'category': name
    }


def tomee_update_examples():
    scm_path = 'tomee/tomee/trunk/examples'
    name = tomee_builder_name()

    f = factory.BuildFactory()
    #f.addStep(SVN(repourl="https://svn.apache.org/repos/asf/" + scm_path))
    f.addStep(Git(repourl="https://git-wip-us.apache.org/repos/asf/tomee.git", mode='full', method='clobber', submodules=True, branch='master'))
    f.addStep(ShellCommand(command=["mv", "tomee/examples", "examples"]))
    f.addStep(ShellCommand(command=["rm", "-R", "tomee"]))
    f.addStep(ShellCommand(command=['bash', '-c', 'find . -name .svn | xargs rm -Rf']))
    f.addStep(ShellCommand(command=["rm", "-r", "../examples.zip"]))
    f.addStep(ShellCommand(command=["zip", "-r", "../examples.zip", "."]))
    f.addStep(ShellCommand(command=["mkdir", "-p", "tmp"]))
    f.addStep(SVN(repourl="https://svn.apache.org/repos/asf/tomee/sandbox/tools"))
    f.addStep(ShellCommand(command=['bash', '-c', 'find . -name .svn | xargs rm -Rf']))
    f.addStep(ShellCommand(
        command=[
            "mvn3",
            "--show-version",
            "clean",
            "install",
            "exec:java",
            "-Dexec.mainClass=org.apache.openejb.tools.Daily",
            "-Dmaven.test.skip=true",
            "-Djava.io.tmpdir=./tmp"
        ]
    ))
    f.addStep(DirectoryUpload(slavesrc="target/examples/generated",
        masterdest="/tmp/openejb/site/examples-generated",
    ))
    f.addStep(DirectoryUpload(slavesrc="src/main/resources/generate-index/javascript/",
        masterdest="/tmp/openejb/site/examples-generated/javascript",
    ))
    f.addStep(DirectoryUpload(slavesrc="src/main/resources/generate-index/css/",
        masterdest="/tmp/openejb/site/examples-generated/css",
    ))
    f.addStep(MasterShellCommand(command="""
            rm -rf /x1/buildmaster/master1/public_html/projects/openejb/examples-generated;
            cp -r /tmp/openejb/site/examples-generated/ /x1/buildmaster/master1/public_html/projects/openejb/examples-generated/"""
    ))

    # Scheduler
    c['schedulers'].append(AnyBranchScheduler(name="on-" + name + "-commit",
        branches=[scm_path],
        treeStableTimer=2,
        builderNames=[name]))

    # Notifications
    #tomee_irc_notifications.append(name)
    #tomee_mail_notifications.append(name)

    # Builder
    return {'name': name,
            'slavename': "lares_ubuntu",
            'builddir': name,
            'factory': f,
            'category': name
    }

c['builders'].append(tomee_update_examples())


def tomee_javaee_api():
    scm_path = "tomee/javaee-api/trunk"
    name = tomee_builder_name()

    f = factory.BuildFactory()
    f.addStep(SVN(repourl="https://svn.apache.org/repos/asf/tomee/javaee-api/trunk"))
    f.addStep(Compile(
        command=[
            "mvn3",
            "--show-version",
            "-U",
            "clean",
            "install"
        ],
        env={'MAVEN_OPTS': '-Xmx1024m -XX:PermSize=64m -XX:MaxPermSize=256m'},
        warningPattern="(^WARN) | (^WARNING) | (^warning) | (.*warning[:].*)",
        warnOnWarnings=False,
        haltOnFailure=True,
        name="compile"))
    f.addStep(Compile(
        command=[
            "mvn3",
            "--show-version",
            "-U",
            "clean",
            "deploy",
            "-DskipTests",
            "-DfailIfNoTests=false"
        ],
        env={'MAVEN_OPTS': '-Xmx1024m -XX:PermSize=64m -XX:MaxPermSize=256m'},
        warningPattern="(^WARN) | (^WARNING) | (^warning) | (.*warning[:].*)",
        warnOnWarnings=False,
        name="deploy"))

    # Scheduler
    c['schedulers'].append(AnyBranchScheduler(name="on-" + name + "-commit",
        branches=[scm_path],
        treeStableTimer=2,
        builderNames=[name]))

    # Notifications
    tomee_irc_notifications.append(name)
    tomee_mail_notifications.append(name)

    # Builder
    return {'name': name,
            'slavename': "hemera_ubuntu",
            'builddir': name,
            'factory': f,
            'category': name,
            'env': {'JAVA_HOME': '/home/buildslave18/slave18/tools/java/latest1.6'}
    }

c['builders'].append(tomee_javaee_api())


def tomee_patches():
    scm_path = "tomee/sandbox/patched-libraries"
    name = tomee_builder_name()

    f = factory.BuildFactory()
    f.addStep(SVN(repourl="https://svn.apache.org/repos/asf/" + scm_path))
    f.addStep(Compile(
        command=[
            "mvn3",
            "--show-version",
            "-U",
            "clean",
            "deploy"
        ]))
    # Scheduler
    c['schedulers'].append(AnyBranchScheduler(name="on-" + name + "-commit",
        branches=[scm_path],
        treeStableTimer=2,
        builderNames=[name]))

    # Notifications
    tomee_irc_notifications.append(name)
    tomee_mail_notifications.append(name)

    # Builder
    return {'name': name,
            'slavename': "hemera_ubuntu",
            'builddir': name,
            'factory': f,
            'category': name,
            'env': {'JAVA_HOME': '/home/buildslave18/slave18/tools/java/latest1.6'}
    }

c['builders'].append(tomee_patches())


def tomee_trunk_osx():
    scm_path = "tomee/tomee/trunk"
    name = tomee_builder_name()

    f = factory.BuildFactory()
    #f.addStep(SVN(repourl="https://svn.apache.org/repos/asf/" + scm_path))
    f.addStep(Git(repourl="https://git-wip-us.apache.org/repos/asf/tomee.git", mode='full', method='clobber', submodules=True, branch='master'))
    f.addStep(ShellCommand(command=["mkdir", "-p", "tmp"]))
    f.addStep(Compile(
        command=[
            "mvn3",
            "--show-version",
            "-U",
            "-Dassemble",
            "clean",
            "install",
            "-DskipTests",
            "-DfailIfNoTests=false",
            "-Djava.io.tmpdir=./tmp"
        ],
        env={'MAVEN_OPTS': '-Xmx1024m -XX:PermSize=64m -XX:MaxPermSize=256m'},
        warningPattern="(^WARN) | (^WARNING) | (^warning) | (.*warning[:].*)",
        warnOnWarnings=False,
        haltOnFailure=True,
        name="compile"
    ))
    f.addStep(Compile(
        command=[
            "mvn3",
            "--show-version",
            "-U",
            "-Dassemble",
            "clean",
            "install",
            "-Dsurefire.useFile=false",
            "-DdisableXmlReport=true",
            "-Djava.io.tmpdir=./tmp"
        ],
        env={'MAVEN_OPTS': '-Xmx1024m -XX:PermSize=64m -XX:MaxPermSize=256m'},
        warningPattern="(^WARN) | (^WARNING) | (^warning) | (.*warning[:].*)",
        warnOnWarnings=False,
        haltOnFailure=True,
        name="test"
    ))
    f.addStep(Compile(
        command=[
            "mvn3",
            "--show-version",
            "-U",
            "deploy",
            "-DskipTests",
            "-DfailIfNoTests=false",
            "-Djava.io.tmpdir=./tmp"
        ],
        env={'MAVEN_OPTS': '-Xmx1024m -XX:PermSize=64m -XX:MaxPermSize=256m'},
        warningPattern="(^WARN) | (^WARNING) | (^warning) | (.*warning[:].*)",
        warnOnWarnings=False,
        name="deploy"
    ))

    # Scheduler
    c['schedulers'].append(AnyBranchScheduler(name="on-" + name + "-commit",
        branches=[scm_path],
        treeStableTimer=2,
        builderNames=[name]))

    # Notifications
    tomee_irc_notifications.append(name)
    tomee_mail_notifications.append(name)

    # Builder
    return {'name': name,
            'slavename': "bb-osx-slave",
            'builddir': name,
            'factory': f,
            'category': name
    }

c['builders'].append(tomee_site_refresh_page([
    #["download/tomee-1.5.3-snapshot.mdtext", "download/tomee-1.5.3-snapshot.html"],
    ["download/tomee-2.0.0-snapshot.mdtext", "download/tomee-2.0.0-snapshot.html"],
]))

c['builders'].append(tomee_trunk_win_sunsdk6())
c['builders'].append(tomee_trunk_osx())

c['builders'].append(tomee_hemera_builder("tomee-trunk-ubuntu", "master", "latest1.7", "-Xmx1536m -XX:PermSize=64m -XX:MaxPermSize=384m"))
c['builders'].append(tomee_hemera_builder("tomee-trunk-ubuntu-jvm8", "master", "latest1.8", "-Xmx1536m -XX:MaxPermSize=384m"))
#c['builders'].append(tomee_hemera_builder("tomee-trunk-ubuntu-jvm9", "master", "latest1.9-ea", "-Xmx1536m"))
c['builders'].append(tomee_hemera_builder("tomee-1.7.x-ubuntu", "tomee-1.7.x", "latest1.6", "-Xmx1024m -XX:PermSize=96m -XX:MaxPermSize=384m -XX:ReservedCodeCacheSize=96m -Xss1024k"))
#c['builders'].append(tomee_hemera_builder("tomee-1.7.x-ubuntu-jvm7", "tomee/tomee/branches/tomee-1.7.x", "latest1.7", "-Xmx1536m -XX:PermSize=64m -XX:MaxPermSize=384m"))

c['builders'].append(tomee_deploy_builder("tomee-trunk-deploy", "master", "latest1.7"))
c['builders'].append(tomee_deploy_builder("tomee-1.7.x-deploy", "tomee-1.7.x", "latest1.6"))

#mail status

c['status'].append(mail.MailNotifier(
    fromaddr="buildbot@apache.org",
    extraRecipients=["commits@tomee.apache.org"],
    sendToInterestedUsers=False,
    mode="change",
    categories=["tomee-site-staging"]
))

c['status'].append(mail.MailNotifier(
    fromaddr="buildbot@apache.org",
    extraRecipients=["commits@tomee.apache.org"],
    sendToInterestedUsers=False,
    mode="change",
    categories=tomee_mail_notifications
))

c['status'].append(words.IRC(
    host="irc.freenode.net",
    nick="tomee-bot",
    allowForce=True,
    channels=["#openejb", "#tomee"],
    notify_events={
        'started': 1,
        'finished': 1,
        },
    categories=tomee_irc_notifications
))
