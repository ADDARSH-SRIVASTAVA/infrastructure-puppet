# This is the config file for the tomcat project.

# Exclude non important files.
import re
from buildbot.schedulers.timed import Periodic
tomcatExcludes = masterExcludes + ["STATUS.txt" , "BUILDING.txt" , "PROPOSALS.txt" , "RUNNING.txt"]
tomcatExcludes = map(re.compile, tomcatExcludes)
isTomcatImportant = wasCodeTouched(tomcatExcludes)

# schedulers

c['schedulers'].append(AnyBranchScheduler(name="on-tomcat-commit",
                         branches=["tomcat/trunk"],
                         treeStableTimer=5*60,
                         builderNames=["tomcat-trunk"],
                         fileIsImportant=isTomcatImportant))

c['schedulers'].append(AnyBranchScheduler(name="on-tomcat-8-commit",
                         branches=["tomcat/tc8.0.x/trunk"],
                         treeStableTimer=5*60,
                         builderNames=["tomcat-8-trunk"],
                         fileIsImportant=isTomcatImportant))

c['schedulers'].append(AnyBranchScheduler(name="on-tomcat-7-commit",
                         branches=["tomcat/tc7.0.x/trunk"],
                         treeStableTimer=5*60,
                         builderNames=["tomcat-7-trunk"],
                         fileIsImportant=isTomcatImportant))

c['schedulers'].append(AnyBranchScheduler(name="on-tomcat-6-commit",
                         branches=["tomcat/tc6.0.x/trunk"],
                         treeStableTimer=5*60,
                         builderNames=["tomcat-6-trunk"],
                         fileIsImportant=isTomcatImportant))

c['schedulers'].append(Periodic(name="tomcat-periodic",
                         builderNames=["tomcat-trunk-periodic"],
                         periodicBuildTimer=24*60*60))

#builders

f_tom_1 = factory.BuildFactory()
f_tom_1.addStep(SVN(mode='full', method='export', repourl="https://svn.apache.org/repos/asf/tomcat/trunk"))

f_tom_1.addStep(ShellCommand(
            command=['bash' , '-c' , 'echo base.path=/home/buildslave32/slave32/tomcat-trunk/basepath > build.properties'],
            description=["Override Base Path"],
            descriptionDone=["Base Path Overridden"],
            haltOnFailure=True,
))

f_tom_1.addStep(ShellCommand(
            command=['bash' , '-c' , 'echo test.threads=16 >> build.properties'],
            description=["Enable Parallel tests"],
            descriptionDone=["Parallel tests enabled with 16 threads"],
            haltOnFailure=True,
))

f_tom_1.addStep(ShellCommand(
            command=['bash' , '-c' , 'echo test.relaxTiming=true >> build.properties'],
            description=["Relax Timing"],
            descriptionDone=["Timing relaxed"],
            haltOnFailure=True,
))

f_tom_1.addStep(ShellCommand(
            command=['bash' , '-c' , 'echo test.excludePerformance=true >> build.properties'],
            description=["Exclude Performance Tests"],
            descriptionDone=["Performance tests excluded"],
            haltOnFailure=True,
))

f_tom_1.addStep(Compile(command=["ant" , "release"]))

f_tom_1.addStep(DirectoryUpload(slavesrc="output/build/webapps/docs",
                             masterdest="/tmp/tomcat9/docs/"))

f_tom_1.addStep(ShellCommand(
            command=['bash', '-c', 'ant -f /home/buildslave32/slave32/rat-buildfiles/tomcat-trunk.xml -lib /home/buildslave32/'],
            description=["RAT Testing"],
            descriptionDone=["RAT Report Complete"],
            haltOnFailure=True,
))

f_tom_1.addStep(FileUpload(slavesrc="../rat-output.xml",
                       masterdest="/tmp/tomcat9/rat-output.xml",
		       haltOnFailure=True,
))

# If we get this far, then the RAT report went fine and it was uploaded to master tmp
# dir without error. So now we can delete any previous report and move from tmp to
# published.

f_tom_1.addStep(MasterShellCommand(command="""
            rm -f /x1/buildmaster/master1/public_html/projects/tomcat/tomcat9/rat-output.xml;
            cp /tmp/tomcat9/rat-output.xml /x1/buildmaster/master1/public_html/projects/tomcat/tomcat9/rat-output.xml;
            rm -rf /x1/buildmaster/master1/public_html/projects/tomcat/tomcat9/docs/;
            cp -r /tmp/tomcat9/docs/ /x1/buildmaster/master1/public_html/projects/tomcat/tomcat9/docs/"""))

f_tom_1.addStep(Compile(command=["ant" , "test"],
		       haltOnFailure=False,
))

f_tom_1.addStep(DirectoryUpload(slavesrc="output/build/logs",
                             masterdest=WithProperties("/tmp/tomcat9/logs/%s/" , "got_revision"),
                             alwaysRun=True,
))

f_tom_1.addStep(MasterShellCommand(command="""
            cp -r /tmp/tomcat9/logs/ /x1/buildmaster/master1/public_html/projects/tomcat/tomcat9/logs/""",
            alwaysRun=True,
))

# Cleanup tmp

f_tom_1.addStep(MasterShellCommand(command="""
            rm -rf /tmp/tomcat9""",
            alwaysRun=True,
))

# Always run the tmp cleanup step, in case of failures part way through uploading etc..

b_tom_1 = {'name': "tomcat-trunk",
      'slavename': "silvanus_ubuntu",
      'builddir': "tomcat-trunk",
      'factory': f_tom_1,
      'category': "tomcat-trunk",
      'env':{'ANT_OPTS': '-Xms128m -Xmx512m',
             'ANT_HOME': "${HOME}/tools/ant/current",
             'JAVA_HOME': "${HOME}/tools/java/latest1.8",
             'PATH': "${HOME}/tools/ant/current/bin:${PATH}"}
      }

c['builders'].append(b_tom_1)

f_tom_2 = factory.BuildFactory()
f_tom_2.addStep(SVN(mode='full', method='export', repourl="https://svn.apache.org/repos/asf/tomcat/tc8.0.x/trunk"))

f_tom_2.addStep(ShellCommand(
            command=['bash' , '-c' , 'echo base.path=/home/buildslave32/slave32/tomcat-8-trunk/basepath > build.properties'],
            description=["Override Base Path"],
            descriptionDone=["Base Path Overridden"],
            haltOnFailure=True,
))

f_tom_2.addStep(ShellCommand(
            command=['bash' , '-c' , 'echo test.cobertura=true >> build.properties'],
            description=["Enable Cobertura"],
            descriptionDone=["Cobertura enabled"],
            haltOnFailure=True,
))

f_tom_2.addStep(ShellCommand(
            command=['bash' , '-c' , 'echo test.relaxTiming=true >> build.properties'],
            description=["Relax Timing"],
            descriptionDone=["Timing relaxed"],
            haltOnFailure=True,
))

f_tom_2.addStep(ShellCommand(
            command=['bash' , '-c' , 'echo test.excludePerformance=true >> build.properties'],
            description=["Exclude Performance Tests"],
            descriptionDone=["Performance tests excluded"],
            haltOnFailure=True,
))

f_tom_2.addStep(Compile(command=["ant" , "release"]))

f_tom_2.addStep(DirectoryUpload(slavesrc="output/build/webapps/docs",
                             masterdest="/tmp/tomcat8/docs/"))

f_tom_2.addStep(ShellCommand(
            command=['bash', '-c', 'ant -f /home/buildslave32/slave32/rat-buildfiles/tomcat-8-trunk.xml -lib /home/buildslave32/'],
            description=["RAT Testing"],
            descriptionDone=["RAT Report Complete"],
            haltOnFailure=True,
))

f_tom_2.addStep(FileUpload(slavesrc="../rat-output.xml",
                       masterdest="/tmp/tomcat8/rat-output.xml",
		       haltOnFailure=True,
))

# If we get this far, then the RAT report went fine and it was uploaded to master tmp
# dir without error. So now we can delete any previous report and move from tmp to
# published.

f_tom_2.addStep(MasterShellCommand(command="""
            rm -f /x1/buildmaster/master1/public_html/projects/tomcat/tomcat8/rat-output.xml;
            cp /tmp/tomcat8/rat-output.xml /x1/buildmaster/master1/public_html/projects/tomcat/tomcat8/rat-output.xml;
            rm -rf /x1/buildmaster/master1/public_html/projects/tomcat/tomcat8/docs/;
            cp -r /tmp/tomcat8/docs/ /x1/buildmaster/master1/public_html/projects/tomcat/tomcat8/docs/"""))

f_tom_2.addStep(Compile(command=["ant" , "test"],
		       haltOnFailure=False,
))

f_tom_2.addStep(DirectoryUpload(slavesrc="output/build/logs",
                             masterdest=WithProperties("/tmp/tomcat8/logs/%s/" , "got_revision"),
                             alwaysRun=True,
))

f_tom_2.addStep(DirectoryUpload(slavesrc="output/coverage",
                             masterdest="/tmp/tomcat8/coverage/"))

f_tom_2.addStep(MasterShellCommand(command="""
            cp -r /tmp/tomcat8/logs/ /x1/buildmaster/master1/public_html/projects/tomcat/tomcat8/logs/""",
            alwaysRun=True,
))

f_tom_2.addStep(MasterShellCommand(command="""
            cp -r /tmp/tomcat8/coverage/ /x1/buildmaster/master1/public_html/projects/tomcat/tomcat8/coverage/""",
            alwaysRun=True,
))

# Cleanup tmp

f_tom_2.addStep(MasterShellCommand(command="""
            rm -rf /tmp/tomcat8""",
            alwaysRun=True,
))

# Always run the tmp cleanup step, in case of failures part way through uploading etc..

b_tom_2 = {'name': "tomcat-8-trunk",
      'slavename': "silvanus_ubuntu",
      'builddir': "tomcat-8-trunk",
      'factory': f_tom_2,
      'category': "tomcat-8-trunk",
      'env':{'ANT_OPTS': '-Xms128m -Xmx512m -XX:MaxPermSize=128m',
             'ANT_HOME': "${HOME}/tools/ant/current",
	     'JAVA_HOME': "${HOME}/tools/java/latest1.7",
	     'PATH': "${HOME}/tools/ant/current/bin:${PATH}"}
      }

c['builders'].append(b_tom_2)


f_tom_3 = factory.BuildFactory()
f_tom_3.addStep(SVN(mode='full', method='clobber', repourl="https://svn.apache.org/repos/asf/tomcat/tc7.0.x/trunk"))

f_tom_3.addStep(ShellCommand(
            command=['bash' , '-c' , 'echo base.path=/home/buildslave32/slave32/tomcat-7-trunk/basepath > build.properties'],
            description=["Override Base Path"],
            descriptionDone=["Base Path Overridden"],
            haltOnFailure=True,
))

f_tom_3.addStep(ShellCommand(
            command=['bash' , '-c' , 'echo java.7.home=/usr/lib/jvm/java-7-openjdk-amd64 >> build.properties'],
            description=["Configure Java 7 location"],
            descriptionDone=["Java 7 location configured"],
            haltOnFailure=True,
))

f_tom_3.addStep(Compile(command=["ant" , "release"]))

f_tom_3.addStep(DirectoryUpload(slavesrc="output/build/webapps/docs",
                             masterdest="/tmp/tomcat7/docs/"))

f_tom_3.addStep(ShellCommand(
            command=['bash', '-c', 'ant -f ../../rat-buildfiles/tomcat-7-trunk.xml -lib ~'],
            description=["RAT Testing"],
            descriptionDone=["RAT Report Complete"],
            haltOnFailure=True,
))
f_tom_3.addStep(FileUpload(slavesrc="../rat-output.xml",
                       masterdest="/tmp/tomcat7/rat-output.xml",
		       haltOnFailure=True,
))

# If we get this far, then the RAT report went fine and it was uploaded to master tmp
# dir without error. So now we can delete any previous report and move from tmp to
# published.

f_tom_3.addStep(MasterShellCommand(command="""
            rm -f /x1/buildmaster/master1/public_html/projects/tomcat/tomcat7/rat-output.xml;
            cp /tmp/tomcat7/rat-output.xml /x1/buildmaster/master1/public_html/projects/tomcat/tomcat7/rat-output.xml;
            rm -rf /x1/buildmaster/master1/public_html/projects/tomcat/tomcat7/docs/;
            cp -r /tmp/tomcat7/docs/ /x1/buildmaster/master1/public_html/projects/tomcat/tomcat7/docs/"""))


f_tom_3.addStep(Compile(command=["ant" , "test"],
		       haltOnFailure=False,
))

f_tom_3.addStep(DirectoryUpload(slavesrc="output/build/logs",
                             masterdest=WithProperties("/tmp/tomcat7/logs/%s/" , "got_revision"),
                             alwaysRun=True,
))

f_tom_3.addStep(MasterShellCommand(command="""
            cp -r /tmp/tomcat7/logs/ /x1/buildmaster/master1/public_html/projects/tomcat/tomcat7/logs/""",
            alwaysRun=True,
))

# Cleanup tmp

f_tom_3.addStep(MasterShellCommand(command="""
            rm -rf /tmp/tomcat7""",
            alwaysRun=True,
))

# Always run the tmp cleanup step, in case of failures part way through uploading etc..
b_tom_3 = {'name': "tomcat-7-trunk",
      'slavename': "silvanus_ubuntu",
      'builddir': "tomcat-7-trunk",
      'factory': f_tom_3,
      'category': "tomcat-7-trunk",
      'env':{'ANT_OPTS': '-Xms128m -Xmx512m -XX:MaxPermSize=128m',
             'ANT_HOME': "${HOME}/tools/ant/current",
	     'JAVA_HOME': "${HOME}/tools/java/latest1.6",
	     'PATH': "${HOME}/tools/ant/current/bin:${PATH}"}
      }

c['builders'].append(b_tom_3)

f_tom_4 = factory.BuildFactory()
f_tom_4.addStep(SVN(mode='full', method='clobber', repourl="https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk"))

f_tom_4.addStep(ShellCommand(
            command=['bash' , '-c' , 'echo base.path=/home/buildslave32/slave32/tomcat-6-trunk/basepath > build.properties'],
            description=["Override Base Path"],
            descriptionDone=["Base Path Overridden"],
            haltOnFailure=True,
))
f_tom_4.addStep(Compile(command=["ant", "clean" ,"download"]))

f_tom_4.addStep(Compile(command=["ant"],
                    env={'ANT_OPTS': '-Xms128m -Xmx512m -XX:MaxPermSize=128m'}))

f_tom_4.addStep(DirectoryUpload(slavesrc="output/build/webapps/docs",
                             masterdest="/tmp/tomcat6/docs/"))

f_tom_4.addStep(MasterShellCommand(command="""
            rm -rf /x1/buildmaster/master1/public_html/projects/tomcat/tomcat6/docs/;
            cp -r /tmp/tomcat6/docs/ /x1/buildmaster/master1/public_html/projects/tomcat/tomcat6/docs/"""))

# Cleanup tmp

f_tom_4.addStep(MasterShellCommand(command="""
            rm -rf /tmp/tomcat6""",
            alwaysRun=True,
))

# Always run the tmp cleanup step, in case of failures part way through uploading etc..

b_tom_4 = {'name': "tomcat-6-trunk",
      'slavename': "silvanus_ubuntu",
      'builddir': "tomcat-6-trunk",
      'factory': f_tom_4,
      'category': "tomcat-6-trunk",
      'env':{'ANT_OPTS': '-Xms128m -Xmx512m -XX:MaxPermSize=128m',
             'ANT_HOME': "${HOME}/tools/ant/current",
	     'JAVA_HOME': "${HOME}/tools/java/latest1.5",
	     'PATH': "${HOME}/tools/ant/current/bin:${PATH}"}
      }

c['builders'].append(b_tom_4)


f_tom_5 = factory.BuildFactory()
f_tom_5.addStep(SVN(mode='full', method='export', repourl="https://svn.apache.org/repos/asf/tomcat/trunk"))

f_tom_5.addStep(ShellCommand(
            command=['bash' , '-c' , 'echo base.path=/home/buildslave32/slave32/tomcat-trunk-periodic/basepath > build.properties'],
            description=["Override Base Path"],
            descriptionDone=["Base Path Overridden"],
            haltOnFailure=True,
))

f_tom_5.addStep(ShellCommand(
            command=['bash' , '-c' , 'echo test.cobertura=true >> build.properties'],
            description=["Enable Cobertura"],
            descriptionDone=["Cobertura enabled"],
            haltOnFailure=True,
))

f_tom_5.addStep(ShellCommand(
            command=['bash' , '-c' , 'echo test.relaxTiming=true >> build.properties'],
            description=["Relax Timing"],
            descriptionDone=["Timing relaxed"],
            haltOnFailure=True,
))

f_tom_5.addStep(ShellCommand(
            command=['bash' , '-c' , 'echo test.excludePerformance=true >> build.properties'],
            description=["Exclude Performance Tests"],
            descriptionDone=["Performance tests excluded"],
            haltOnFailure=True,
))

f_tom_5.addStep(Compile(command=["ant" , "test"],
		       haltOnFailure=False,
))

f_tom_5.addStep(DirectoryUpload(slavesrc="output/coverage",
                             masterdest="/tmp/tomcat9-coverage/"))

f_tom_5.addStep(MasterShellCommand(command="""
            cp -r /tmp/tomcat9-coverage/ /x1/buildmaster/master1/public_html/projects/tomcat/tomcat9/coverage/""",
            alwaysRun=True,
))

# Cleanup tmp

f_tom_5.addStep(MasterShellCommand(command="""
            rm -rf /tmp/tomcat9-coverage""",
            alwaysRun=True,
))

# Always run the tmp cleanup step, in case of failures part way through uploading etc..

b_tom_5 = {'name': "tomcat-trunk-periodic",
      'slavename': "silvanus_ubuntu",
      'builddir': "tomcat-trunk-periodic",
      'factory': f_tom_5,
      'category': "tomcat-trunk-periodic",
      'env':{'ANT_OPTS': '-Xms128m -Xmx512m',
             'ANT_HOME': "${HOME}/tools/ant/current",
             'JAVA_HOME': "${HOME}/tools/java/latest1.8",
             'PATH': "${HOME}/tools/ant/current/bin:${PATH}"}
      }

c['builders'].append(b_tom_5)


#mail status

c['status'].append(mail.MailNotifier(fromaddr="buildbot@apache.org",
                                     extraRecipients=["dev@tomcat.apache.org"],
                                     sendToInterestedUsers=False,
                                     mode="change",
                                     categories=["tomcat-trunk" , "tomcat-8-trunk" , "tomcat-7-trunk" , "tomcat-6-trunk"]))

#c['status'].append(words.IRC(host="irc.freenode.net", nick="tomcat-bot",
#                             allowForce=True,
#                             channels=["#asftest"],
#			      notify_events={
#				'successToFailure': 1,
#				'failureToSuccess': 1,
#				},
#                             categories=["tomcat-trunk" , "tomcat-7-trunk" , "tomcat-6-trunk"]))

