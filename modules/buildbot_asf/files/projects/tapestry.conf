# This is the config file for the tapestry project.

# schedulers

c['schedulers'].append(AnyBranchScheduler(name="on-tapestry-commit",
                         branches=["tapestry/tapestry5/trunk"],
                         treeStableTimer=2,
                         builderNames=["tapestry-trunk"]))

c['schedulers'].append(Nightly(name='tapestry-site-production',
              builderNames=['tapestry-site-production'],
              branch='tapestry/tapestry-site',
              minute=19))

# Builders
f90 = factory.BuildFactory()
f90.addStep(Compile(command=["perl" , "/usr/local/cms/build/build_external.pl", "--type=shell", "--nonukes", "--noprops", "--source-base=/home/cmsslave/slave15/tapestry-site-production/build" , "--target-base=/usr/local/websites/production/tapestry/content"]))
f90.addStep(ShellCommand(command=["svn", "ci", "--username=buildbot", "/usr/local/websites/production/tapestry", "-m", "Production update by buildbot for tapestry"]))

b90 = {'name': "tapestry-site-production",
      'slavename': "bb-cms-slave",
      'builddir': "tapestry-site-production",
      'factory': f90,
      'category': "tapestry-site-production",
      }

c['builders'].append(b90)

f_tap_1 = factory.BuildFactory()
f_tap_1.addStep(SVN(repourl=Interpolate("https://svn.apache.org/repos/asf/%(src::branch:~tapestry/tapestry5/trunk)s")))

#f_tap_1.addStep(Compile(command=["gradle" , "aggregateJavadoc"]))

# Some details for Gradle:
# buildslave2@isis:~$ gradle -v
#
# ------------------------------------------------------------
# Gradle 1.0-milestone-5
# ------------------------------------------------------------
#
# Gradle build time: Tuesday, October 25, 2011 3:56:08 AM UTC
# Groovy: 1.7.10
# Ant: Apache Ant(TM) version 1.8.2 compiled on December 20 2010
# Ivy: 2.2.0
# JVM: 1.6.0_22 (Sun Microsystems Inc. 17.1-b03)
# OS: Linux 2.6.32-27-server amd64
#
# buildslave2@isis:~$ which gradle
# /usr/local/gradle-1.0-milestone-5/bin/gradle
# 

f_tap_1.addStep(ShellCommand(command=["bash", "gradlew" , "-b", "build.gradle", "aggregateJavadoc"]))

f_tap_1.addStep(DirectoryUpload(slavesrc="build/documentation/javadocs",
                            masterdest="/tmp/tapestry/trunk/apidocs",
                            haltOnFailure=True,
))

f_tap_1.addStep(MasterShellCommand(command="""
            rm -rf /x1/buildmaster/master1/public_html/projects/tapestry/trunk/apidocs/;
            cp -r /tmp/tapestry/trunk/apidocs /x1/buildmaster/master1/public_html/projects/tapestry/trunk/apidocs"""))

f_tap_1.addStep(MasterShellCommand(command="""
            rm -rf /tmp/tapestry""",
            alwaysRun=True,
))

# Always run the tmp cleanup step, in case of failures part way through uploading etc..

b_tap_1 = {'name': "tapestry-trunk",
      'slavename': "lares_ubuntu",
      'builddir': "tapestry-trunk",
      'factory': f_tap_1,
      'category': "tapestry-trunk",
     }

c['builders'].append(b_tap_1)

# mail status
c['status'].append(mail.MailNotifier(fromaddr="buildbot@apache.org",
                                     extraRecipients=["dev@tapestry.apache.org"],
                                     sendToInterestedUsers=False,
                                     mode="change",
                                     categories=["tapestry-site-production"]))

c['status'].append(mail.MailNotifier(fromaddr="buildbot@apache.org",
                                      extraRecipients=["dev@tapestry.apache.org"],
                                      sendToInterestedUsers=False,
                                      categories=["tapestry-trunk"]))

# IRC Status

c['status'].append(words.IRC(host="irc.freenode.net", nick="tapestry-bot",
                              allowForce=True,
                              channels=["#tapestry"],
                              notify_events={
				'successToFailure': 1,
				'failureToSuccess': 1,
				},
                              categories=["tapestry-trunk"]))


