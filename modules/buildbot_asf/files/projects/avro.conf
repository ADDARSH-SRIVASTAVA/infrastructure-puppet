# This is the config file for the avro project.

# schedulers

def isAvroCChange(change):
    for filename in change.files:
        if filename.startswith("lang/c") or filename.startswith("share"):
            return True
    return False

def isAvroPyChange(change):
    for filename in change.files:
        if filename.startswith("lang/py") or filename.startswith("share"):
            return True
    return False

def isAvroRubyChange(change):
    for filename in change.files:
        if filename.startswith("lang/ruby") or filename.startswith("share"):
            return True
    return False

def isAvroJavaChange(change):
    for filename in change.files:
        if filename.startswith("lang/java") or filename.startswith("share"):
            return True
    return False

c['schedulers'].append(AnyBranchScheduler(name="AvroC",
			     branches=["avro/trunk"],
                             treeStableTimer=2*60,
                             fileIsImportant=isAvroCChange,
                             builderNames=["avro-c-ubuntu" , "avro-c-solaris-x86" , "avro-c-fbsd"]))

c['schedulers'].append(AnyBranchScheduler(name="AvroPy", 
		             branches=["avro/trunk"],
                             treeStableTimer=2*60,
                             fileIsImportant=isAvroPyChange,
                             builderNames=["avro-py-ubuntu"]))

c['schedulers'].append(AnyBranchScheduler(name="AvroRuby", 
		             branches=["avro/trunk"],
                             treeStableTimer=2*60,
                             fileIsImportant=isAvroRubyChange,
                             builderNames=["avro-ruby-ubuntu"]))

c['schedulers'].append(AnyBranchScheduler(name="AvroJava", 
		             branches=["avro/trunk"],
                             treeStableTimer=2*60,
                             fileIsImportant=isAvroJavaChange,
                             builderNames=["avro-java6-ubuntu"]))

c['schedulers'].append(AnyBranchScheduler(name="AvroTrunk", 
		             branches=["avro/trunk"],
                             treeStableTimer=3*60,
                             builderNames=["avro-trunk-rat-report"]))

#builders

f40 = factory.BuildFactory()
f40.addStep(SVN(mode='full', method='clobber', repourl="https://svn.apache.org/repos/asf/avro/trunk"))

f40.addStep(Configure(command=["cmake", "."], workdir="build/lang/c"))
f40.addStep(Compile(command=["make"], workdir="build/lang/c"))
f40.addStep(Test(workdir="build/lang/c"))

b40 = {'name': "avro-c-ubuntu",
      'slavename': "bb-vm_ubuntu",
      'builddir': "avro-c-ubuntu",
      'factory': f40,
      'category': "avro-c-ubuntu",
      }

c['builders'].append(b40)

f41 = factory.BuildFactory()
f41.addStep(SVN(mode='full', method='clobber', repourl="https://svn.apache.org/repos/asf/avro/trunk"))

f41.addStep(Test(command=["ant", "test"], workdir="build/lang/py"))


b41 = {'name': "avro-py-ubuntu",
      'slavename': "bb-vm_ubuntu",
      'builddir': "avro-py-ubuntu",
      'factory': f41,
      'category': "avro-py-ubuntu",
      }

c['builders'].append(b41)

f43 = factory.BuildFactory()
f43.addStep(SVN(mode='full', method='clobber', repourl="https://svn.apache.org/repos/asf/avro/trunk"))

f43.addStep(Configure(command=["cmake", "."], workdir="build/lang/c",
                     env={ 'PATH': '/opt/csw/bin:/opt/csw/gnu:/usr/xpg4/bin:/usr/ccs/bin:/usr/bin',
					       'CC': 'gcc',
						   'CXX': 'g++',
					     }))
f43.addStep(Compile(command=["make"], workdir="build/lang/c",
                     env={ 'PATH': '/opt/csw/bin:/opt/csw/gnu:/usr/xpg4/bin:/usr/ccs/bin:/usr/bin',
					       'CC': 'gcc',
						   'CXX': 'g++',
					     }))
f43.addStep(Test(workdir="build/lang/c",
                     env={ 'PATH': '/opt/csw/bin:/opt/csw/gnu:/usr/xpg4/bin:/usr/ccs/bin:/usr/bin',
					       'CC': 'gcc',
						   'CXX': 'g++',
					     }))

b43 = {'name': "avro-c-solaris-x86",
      'slavename': "bb-solaris_zone",
      'builddir': "avro-c-solaris-x86",
      'factory': f43,
      'category': "avro-c-solaris-x86",
      }

c['builders'].append(b43)

f44 = factory.BuildFactory()
f44.addStep(SVN(mode='full', method='clobber', repourl="https://svn.apache.org/repos/asf/avro/trunk"))

f44.addStep(Configure(command=["cmake", "."], workdir="build/lang/c"))
f44.addStep(Compile(command=["make"], workdir="build/lang/c"))
f44.addStep(Test(workdir="build/lang/c"))

b44 = {'name': "avro-c-fbsd",
      'slavename': "bb-fbsd2_64bit",
      'builddir': "avro-c-fbsd",
      'factory': f44,
      'category': "avro-c-fbsd",
      }

c['builders'].append(b44)

f54 = factory.BuildFactory()
f54.addStep(SVN(mode='full', method='clobber', repourl="https://svn.apache.org/repos/asf/avro/trunk"))

# If checkout of source didn't work, then no point continuing.

f54.addStep(ShellCommand(
             command=['bash', '-c', 'ant -f /home/buildslave3/slave3/rat-buildfiles/avro.xml -lib /home/buildslave3/'],
))


# Above performs RAT tests on entire avro build directories, output to txt file.
# Now we will publish that report to ci.apache.org/projects/avro/rat-output.xml
# assuming that the report step itself was successful.

f54.addStep(FileUpload(slavesrc="../rat-output.xml",
                       masterdest="/tmp/avro/rat-output.xml",
		       haltOnFailure=True,
))

# If we get this far, then the RAT report went fine and it was uploaded to master tmp
# dir without error. So now we can delete any previous report and move from tmp to
# published.

f54.addStep(MasterShellCommand(command="""
            rm -f /x1/buildmaster/master1/public_html/projects/avro/rat-output.xml;
            cp /tmp/avro/rat-output.xml /x1/buildmaster/master1/public_html/projects/avro/rat-output.xml"""))

# Cleanup tmp

f54.addStep(MasterShellCommand(command="""
            rm -rf /tmp/avro""",
            alwaysRun=True,
))

# Always run the tmp cleanup step, in case of failures part way through uploading etc..


b54 = {'name': "avro-trunk-rat-report",
      'slavename': "bb-vm_ubuntu",
      'builddir': "avro-trunk-rat-report",
      'factory': f54,
      'category': "avro-trunk-rat-report",
      }

c['builders'].append(b54)

f58 = factory.BuildFactory()
f58.addStep(SVN(mode='full', method='clobber', repourl="https://svn.apache.org/repos/asf/avro/trunk"))

f58.addStep(Test(command=["./build.sh", "test"], workdir="build/lang/ruby"))


b58 = {'name': "avro-ruby-ubuntu",
      'slavename': "bb-vm_ubuntu",
      'builddir': "avro-ruby-ubuntu",
      'factory': f58,
      'category': "avro-ruby-ubuntu",
      }

c['builders'].append(b58)

f59 = factory.BuildFactory()
f59.addStep(SVN(mode='full', method='clobber', repourl="https://svn.apache.org/repos/asf/avro/trunk"))

f59.addStep(Test(command=["mvn", "test"], workdir="build/lang/java"))


b59 = {'name': "avro-java6-ubuntu",
      'slavename': "bb-vm_ubuntu",
      'builddir': "avro-java6-ubuntu",
      'factory': f59,
      'category': "avro-java6-ubuntu",
      }

c['builders'].append(b59)

#mail status

c['status'].append(mail.MailNotifier(fromaddr="buildbot@apache.org",
                                     extraRecipients=["dev@avro.apache.org"],
                                     sendToInterestedUsers=False,
                                     mode="change",
                                     categories=["avro-c-ubuntu" , "avro-py-ubuntu" , "avro-c-solaris-x86", "avro-c-fbsd" , "avro-ruby-ubuntu" , "avro-java6-ubuntu" , "avro-trunk-rat-report"]))

c['status'].append(words.IRC(host="irc.freenode.net", nick="avro-bot",
                             allowForce=True,
                             channels=["#avro"],
			      notify_events={
				'successToFailure': 1,
				'failureToSuccess': 1,
				},
                             categories=["avro-c-ubuntu" , "avro-py-ubuntu" , "avro-c-solaris-x86" , "avro-c-fbsd" , "avro-ruby-ubuntu" , "avro-java6-ubuntu" , "avro-trunk-rat-report"]))

