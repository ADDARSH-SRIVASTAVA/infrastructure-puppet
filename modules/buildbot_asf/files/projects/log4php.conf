# This is the config file for the log4php project.

# schedulers

c['schedulers'].append(AnyBranchScheduler(name="on-log4php-commit",
                         branches=["logging/log4php/trunk"],
                         treeStableTimer=2,
                         builderNames=["log4php-trunk"]))
                         
#builders

f18 = factory.BuildFactory()
f18.addStep(SVN(repourl=Interpolate("https://svn.apache.org/repos/asf/%(src::branch:~logging/log4php/trunk)s")))
f18.addStep(Compile(command=["mvn" , "site"]
))

# Don't bother uploading docs if the install step didn't work.

f18.addStep(DirectoryUpload(slavesrc="target/site",
                            masterdest="/tmp/log4php/",
                            haltOnFailure=True,
))

# If we got this far, then uploading docs to tmp location on master was successful, 
# so now we can delete the previous published docs and move from tmp to published.

f18.addStep(MasterShellCommand(command="""
            rm -rf /x1/buildmaster/master1/public_html/projects/log4php/;
            cp -r /tmp/log4php/ /x1/buildmaster/master1/public_html/projects/log4php/"""))

f18.addStep(ShellCommand(
            command=['bash', '-c', 'java -jar /home/buildslave1/apache-rat-0.7-SNAPSHOT.jar -x -e target .buildbot-sourcedata -d /home/buildslave1/slave1/log4php-trunk/build/ > ../rat-output.xml'],
            description=["RAT Testing"],
            descriptionDone=["RAT Report Complete"],
            haltOnFailure=True,
))

# Above performs RAT tests on entire log4php build directories, output to txt file.
# Now we will publish that report to ci.apache.org/projects/log4php/rat-output.html
# assuming that the report step itself was successful.

f18.addStep(FileUpload(slavesrc="../rat-output.xml",
                       masterdest="/tmp/log4php/rat-output.xml",
		       haltOnFailure=True,
))

# If we get this far, then the RAT report went fine and it was uploaded to master tmp
# dir without error. So now we can delete any previous report and move from tmp to
# published.

f18.addStep(MasterShellCommand(command="""
            rm -f /x1/buildmaster/master1/public_html/projects/log4php/rat-output.xml;
            cp /tmp/log4php/rat-output.xml /x1/buildmaster/master1/public_html/projects/log4php/rat-output.xml"""))

# Cleanup tmp

f18.addStep(MasterShellCommand(command="""
            rm -rf /tmp/log4php""",
            alwaysRun=True,
))

# Always run the tmp cleanup step, in case of failures part way through uploading etc..

b18 = {'name': "log4php-trunk",
      'slavename': "orcus_ubuntu",
      'builddir': "log4php-trunk",
      'factory': f18,
      'category': "log4php-trunk",
      'env': {'M2_HOME': '/usr/local/maven/apache-maven-3.0.3',
              'M2': '/usr/local/maven/apache-maven-3.0.3/bin',
              'PATH': '/usr/local/maven/apache-maven-3.0.3/bin:${PATH}'}
     }

c['builders'].append(b18)

#mail status

c['status'].append(mail.MailNotifier(fromaddr="buildbot@apache.org",
                                      extraRecipients=["log4php-dev@logging.apache.org"],
                                      sendToInterestedUsers=False,
                                      mode="change",
                                      categories=["log4php-trunk"]))

#c['status'].append(words.IRC(host="irc.freenode.net", nick="log4php-bot",
#                              allowForce=True,
#                              channels=["#asftest"],
#			      notify_events={
#				'successToFailure': 1,
#				'failureToSuccess': 1,
#				},
#                              categories=["log4php-trunk"]))

