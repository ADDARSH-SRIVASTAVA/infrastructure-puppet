# This is the config file for the JMeter project.

# schedulers

c['schedulers'].append(AnyBranchScheduler(name="on-jmeter-commit",
                         branches=["jmeter/trunk"],
                         treeStableTimer=5,
                         builderNames=["jmeter-trunk"]))

c['schedulers'].append(Nightly(name='jmeterNightly',
              builderNames=['jmeter-nightly'],
              branch='jmeter/trunk',
              hour=2,
              minute=10))

#builders

f_jme_1 = factory.BuildFactory()
f_jme_1.addStep(SVN(repourl=Interpolate("https://svn.apache.org/repos/asf/%(src::branch:~jmeter/trunk)s")))
f_jme_1.addStep(ShellCommand(command=["ant" , "clean"],
                 description=["running ant clean"],
                 descriptionDone=["ant clean done"]))

f_jme_1.addStep(ShellCommand(command=["ant" , "download_jars"],
                 description=["running ant download jars"],
                 descriptionDone=["ant download jars done"]))

f_jme_1.addStep(ShellCommand(command=["ant" , "package"],
                 description=["running ant package"],
                 descriptionDone=["ant package done"]))

f_jme_1.addStep(ShellCommand(command=["ant" , "test", WithProperties("-Djava.awt.headless=true")],
                 description=["running ant test"],
                 descriptionDone=["ant test done"]))

b_jme_1 = {'name': "jmeter-trunk",
      'slavename': "hemera_ubuntu",
      'builddir': "jmeter-trunk",
      'factory': f_jme_1,
      'category': "jmeter-trunk",
      'env':{'ANT_OPTS': '-Xms128m -Xmx512m -XX:MaxPermSize=128m',
             'ANT_HOME': '/home/buildslave18/slave18/tools/ant/current'}
      }

c['builders'].append(b_jme_1)

f_jme_2 = factory.BuildFactory()
f_jme_2.addStep(SVN(repourl=Interpolate("https://svn.apache.org/repos/asf/%(src::branch:~jmeter/trunk)s")))
f_jme_2.addStep(ShellCommand(command=["ant" , "_gump_properties"],
                 description=["running ant gump properties"],
                 descriptionDone=["ant gump properties done"]))

f_jme_2.addStep(ShellCommand(command=["ant" , "clean-dist"],
                 description=["running ant clean-dist"],
                 descriptionDone=["ant clean-dist done"]))

f_jme_2.addStep(ShellCommand(command=["ant" , "clean"],
                 description=["running ant clean"],
                 descriptionDone=["ant clean done"]))

f_jme_2.addStep(ShellCommand(command=["ant" , "download_jars"],
                 description=["running ant download_jars"],
                 descriptionDone=["ant download_jars done"]))

f_jme_2.addStep(ShellCommand(command=["ant" , "init-svnVersion"],
                 description=["running ant init-svnVersion"],
                 descriptionDone=["ant init-svnVersion done"]))

f_jme_2.addStep(ShellCommand(command=["ant" , "nightly" , WithProperties("-Dsvn.revision=%s" , "got_revision")],
                 description=["running ant nightly"],
                 descriptionDone=["ant nightly done"]))

f_jme_2.addStep(ShellCommand(command=["cp" , "-r" , "dist" , WithProperties("../r%s" , "got_revision")],
                 description=["adding revs to dist dir"],
                 descriptionDone=["revs added to dist dir"]))

f_jme_2.addStep(DirectoryUpload(slavesrc=WithProperties("../r%s" , "got_revision"),
                       masterdest=WithProperties("/tmp/jmeter/nightlies/r%s/", "got_revision"),
		       haltOnFailure=True,
))

# Create Maven jars (under dist/maven, so do it after dist has been copied)
f_jme_2.addStep(ShellCommand(command=["ant" , "_dist_maven"],
                 description=["running ant _dist_maven"],
                 descriptionDone=["ant _dist_maven done"]))

# Deploy the Maven jars
f_jme_2.addStep(ShellCommand(command=["ant", "maven_upload", "-DrepoType=snapshots", "-Dmaven.home=/usr/local/apache-maven/current" ], 
                 description=["running ant maven_upload"],
                 descriptionDone=["ant maven_upload done"]))

# remove directory just uploaded

f_jme_2.addStep(ShellCommand(command=["rm" , "-rf" , WithProperties("../r%s" , "got_revision")],
                 description=["remove dist dir"],
                 descriptionDone=["dist dir removed"]))

f_jme_2.addStep(MasterShellCommand(command="""
            cp -r /tmp/jmeter/nightlies/* /x1/buildmaster/master1/public_html/projects/jmeter/nightlies/"""))

f_jme_2.addStep(MasterShellCommand(command="""
            rm -rf /tmp/jmeter/nightlies""",
            alwaysRun=True,
))

# Always run the tmp cleanup step, in case of failures part way through uploading etc..

# apidocs

f_jme_2.addStep(ShellCommand(command=["ant" , "docs-api"],
                 description=["running ant docs-api"],
                 descriptionDone=["ant docs-api done"]))

# Don't bother uploading docs if the install step didn't work.

f_jme_2.addStep(DirectoryUpload(slavesrc="docs/api",
                            masterdest="/tmp/jmeter/apidocs",
                            haltOnFailure=True,
))

# If we got this far, then uploading docs to tmp location on master was successful, 
# so now we can delete the previous published docs and move from tmp to published.

f_jme_2.addStep(MasterShellCommand(command="""
            rm -rf /x1/buildmaster/master1/public_html/projects/jmeter/apidocs/;
            cp -r /tmp/jmeter/apidocs /x1/buildmaster/master1/public_html/projects/jmeter/apidocs"""))

# end of apidocs

f_jme_2.addStep(ShellCommand(
            command=['bash', '-c', 'ant -f /home/buildslave18/slave18/rat-buildfiles/jmeter-trunk.xml -lib /home/buildslave18/'],
            description=["RAT Testing"],
            descriptionDone=["RAT Report Complete"],
            haltOnFailure=True,
))

f_jme_2.addStep(FileUpload(slavesrc="../rat-output.xml",
                       masterdest="/tmp/jmeter/rat-output.xml",
		       haltOnFailure=True,
))

# If we get this far, then the RAT report went fine and it was uploaded to master tmp
# dir without error. So now we can delete any previous report and move from tmp to
# published.

f_jme_2.addStep(MasterShellCommand(command="""
            rm -f /x1/buildmaster/master1/public_html/projects/jmeter/rat-output.xml;
            cp /tmp/jmeter/rat-output.xml /x1/buildmaster/master1/public_html/projects/jmeter/rat-output.xml"""))

# Cleanup tmp

f_jme_2.addStep(MasterShellCommand(command="""
            rm -rf /tmp/jmeter""",
            alwaysRun=True,
))

# Always run the tmp cleanup step, in case of failures part way through uploading etc..
b_jme_2 = {'name': "jmeter-nightly",
      'slavename': "hemera_ubuntu",
      'builddir': "jmeter-nightly",
      'factory': f_jme_2,
      'category': "jmeter-nightly",
      'env':{'ANT_OPTS': '-Xms128m -Xmx512m -XX:MaxPermSize=128m',
             'JAVA_HOME': "${HOME}/tools/java/latest1.7",
             'ANT_HOME': "${HOME}/tools/ant/current"}
      }

c['builders'].append(b_jme_2)

#mail status

c['status'].append(mail.MailNotifier(fromaddr="buildbot@apache.org",
                                     extraRecipients=["dev@jmeter.apache.org"],
                                     sendToInterestedUsers=False,
                                     mode="change",
                                     categories=["jmeter-trunk" , "jmeter-nightly"]))

#c['status'].append(words.IRC(host="irc.freenode.net", nick="jmeter-bot",
#                             allowForce=True,
#                             channels=["#asftest"],
#			      notify_events={
#				'successToFailure': 1,
#				'failureToSuccess': 1,
#				},
#                             categories=["jmeter-trunk" , "jmeter-nightly"]))

