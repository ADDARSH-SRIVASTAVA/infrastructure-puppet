# This is the config file for the openjpa project.

import os
import subprocess

# schedulers

ojpa_branches = ['trunk' , '2.3.x' , '2.2.1.x' , '2.2.x' , '2.1.x' , '2.0.x' , '1.3.x' , '1.2.x' , '1.0.x']

#for ojpa_b in ojpa_branches:
#        c['schedulers'].append(AnyBranchScheduler(name="on-openjpa-%s-docs-commit" % (ojpa_b),
#                         branches=["openjpa/" + ('branches/' if ojpa_b != 'trunk' else '') + ojpa_b],
#                         treeStableTimer=2,
#                         builderNames=["openjpa-%s-docs" % (ojpa_b)]))
#

for i, ojpa_b in enumerate(ojpa_branches):
    c['schedulers'].append(Nightly(name='openjpaNightly-%s' % ojpa_b,
                  builderNames=['openjpa-%s-docs' % (ojpa_b)],
                  branch="openjpa/" + ('branches/' if ojpa_b != 'trunk' else '') + ojpa_b,
                  hour=8,
                  minute=int(60.0*i/len(ojpa_branches))))

# Locks (jic a backport triggers them all, only build one at a time)

ojpalock_1 = locks.SlaveLock("ojpa_builds_mvn") # lock the mvn build.
ojpalock_2 = locks.SlaveLock("ojpa_builds_upload") # lock the upload step.

#builders

def ojpa_getversion(branchname):
    from xml.etree import ElementTree as ET
    url = 'http://svn.apache.org/repos/asf/openjpa/%s/%s/pom.xml%s' % (
          ['', 'branches'][branchname != 'trunk'], branchname,
           #WithProperties('?p=%ld', 'got_revision'),
           '',
           )
    pom = subprocess.check_output(['curl', '-s', url])
    vsn = ET.fromstring(pom).findall('./{http://maven.apache.org/POM/4.0.0}version')
    assert len(vsn) == 1
    return vsn[0].text

def mkojpabuilder(branchname):
    ojpa_b = branchname
    OjpaBranch="openjpa/" + ('branches/' if ojpa_b != 'trunk' else '') + branchname
    f_ojpa = factory.BuildFactory()
    f_ojpa.addStep(SVN(repourl=Interpolate("https://svn.apache.org/repos/asf/%(src::branch:~" + OjpaBranch + ")s")))
    f_ojpa.addStep(Compile(command=["mvn" , "-U" , "install" , "-DskipTests" , "-Pjavadoc-profile,docbook-profile"], locks=[ojpalock_1.access("exclusive")]))
    # upload manual
    ojpaPath = ('' if ojpa_b != '1.0.x' else '../')
    f_ojpa.addStep(FileUpload(
	slavesrc="openjpa-project/" + ojpaPath + "target/site/downloads/apache-openjpa-%s-binary.zip" % (ojpa_b),
        masterdest="/tmp/openjpa-%s/apache-openjpa-%s-binary.zip" % (ojpa_b, ojpa_b),
        haltOnFailure=True, locks=[ojpalock_2.access("exclusive")])) 
    f_ojpa.addStep(MasterShellCommand(command="""
        cd /tmp/openjpa-%s/ && \
        unzip apache-openjpa-%s-binary.zip""" % (ojpa_b , ojpa_b)))
    # Move extendable-orm.xsd to extendable/extendable-orm.xsd
    f_ojpa.addStep(MasterShellCommand(command="""
        mkdir /tmp/openjpa-%s/apache-openjpa-%s/docs/schema/extendable && \
        mv /tmp/openjpa-%s/apache-openjpa-%s/docs/schema/extendable-orm.xsd /tmp/openjpa-%s/apache-openjpa-%s/docs/schema/extendable""" % (ojpa_b, ojpa_b, ojpa_b, ojpa_b, ojpa_b, ojpa_b),
        haltOnFailure=False, flunkOnFailure=False))     
    # If we got this far, then uploading docs to tmp location on master was successful, 
    # so now we can delete the previous published docs and move from tmp to published.
    f_ojpa.addStep(MasterShellCommand(command="""
        rm -rf /x1/buildmaster/master1/public_html/projects/openjpa/%s/*/;
        cp -r /tmp/openjpa-%s/apache-openjpa-%s/docs/* /x1/buildmaster/master1/public_html/projects/openjpa/%s""" % (ojpa_b, ojpa_b, ojpa_b , ojpa_b)))
    # end of manual
    # Be nice, clean up the /tmp/ojpa* files
    f_ojpa.addStep(MasterShellCommand(command="""
                rm -rf /tmp/openjpa-%s""" % ojpa_b,
                alwaysRun=True,
    ))
    return f_ojpa

for b_ojpa_b in ojpa_branches:
    ojpa_builder = {'name': "openjpa-%s-docs" % (b_ojpa_b),
        'slavename': "lares_ubuntu",
        'builddir': "openjpa-%s-docs" % (b_ojpa_b),
        'factory': mkojpabuilder("%s" % (b_ojpa_b)),
        'category': "openjpa-%s-docs" % (b_ojpa_b),
        }
    if b_ojpa_b.startswith('1.'):
        ojpa_builder['env'] = {'JAVA_HOME': '/home/buildslave2/slave2/tools/java/latest1.5/'}
    if b_ojpa_b.startswith('trunk'):
        ojpa_builder['env'] = {'JAVA_HOME': '/home/buildslave2/slave2/tools/java/latest1.7/'}
    c['builders'].append(ojpa_builder)

#mail status

c['status'].append(mail.MailNotifier(fromaddr="buildbot@apache.org",
                                     extraRecipients=["dev@openjpa.apache.org"],
                                     sendToInterestedUsers=False,
                                     mode="change",
                                     categories=["openjpa-trunk-docs"]))

# irc status

c['status'].append(words.IRC(host="irc.freenode.net", nick="openjpa-bot",
                              allowForce=True,
                              channels=["#asftest"],
			      notify_events={
				'successToFailure': 1,
				'failureToSuccess': 1,
				},
                              categories=[
                                        "openjpa-%s-docs" % (cat)
                                            for cat in ojpa_branches
                                  ]))

