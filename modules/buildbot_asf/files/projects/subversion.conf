# This is the config file for the subversion project.
# vim:fdm=marker

# globals {{{1
from buildbot.status.results import SUCCESS, WARNINGS, FAILURE, worst_status
from buildbot import interfaces

import re
# Skip building revisions if all paths they modify are in the following list of patterns:
SubversionExcludes = masterExcludes + [
    "COMMITTERS", "STATUS", "CHANGES", "README", "BRANCH-README" "INSTALL",
    "COPYING", "HACKING", "TRANSLATING", "LICENSE", "NOTICE" "BUGS",
     "www", "notes", "subversion/LICENSE", "subversion/po", "doc", "contrib",
    "tools/buildbot", "tools/dist/backport.pl", # used by one bot, which uses a cron trigger
    "dist.sh"]
SubversionExcludes = map(re.compile, SubversionExcludes)
isSubversionImportant = wasCodeTouched(SubversionExcludes)

# Use REPO (or REPO_HTTPS) where bb requires baseurl
REPO="http://svn-master.apache.org/repos/asf/"
REPO_HTTPS="https://svn-master.apache.org/repos/asf/"

BUILDERNAMES=["svn-windows-local" , "svn-windows-ra" , "svn-x64-ubuntu-gcc", "svn-x64-centos-gcc"]
BUILDERNAMES_1_8_plus=["svn-warnings", "svn-sparc-solaris", "svn-x64-macosx-local"]
BUILDERNAMES_1_9_plus=[]

BUILDERNAMES_LAZY_TRUNK=["bb-openbsd", "svn-x64-macosx-full"]
BUILDERNAMES_LAZY_BRANCHES=[]
BUILDERNAMES_LAZY_1_8_plus=["svn-x64-macosx-full"]
BUILDERNAMES_LAZY_1_9_plus=[]

BUILDERNAMES_NIGHTLY_TRUNK=["svn-x64-macosx-apr1.3-nothread", "svn-x64-macosx-apr1.5", "svn-x64-macosx-apr2.0-dev",
                            "svn-x64-macosx-fsfs-v6", "svn-x64-macosx-fsfs-v4", "svn-x64-macosx-fsx", "svn-x64-macosx-bdb"]
BUILDERNAMES_NIGHTLY_BRANCHES=[]
BUILDERNAMES_NIGHTLY_1_8_plus=["svn-x64-macosx-apr1.3-nothread", "svn-x64-macosx-apr1.5", "svn-x64-macosx-bdb"]
BUILDERNAMES_NIGHTLY_1_9_plus=["svn-x64-macosx-apr2.0-dev",
                               "svn-x64-macosx-fsfs-v6", "svn-x64-macosx-fsfs-v4", "svn-x64-macosx-fsx"]

MINOR_LINES=[7, 8, 9]
HideIfSuccessful = lambda results, buildstep: results == SUCCESS

class ShellCommandWithStderrWarning(ShellCommand):
    def evaluateCommand(self, cmd):
        decodeRC = getattr(cmd, 'decodeRC', {0:SUCCESS})
        rc = SUCCESS
        if getattr(cmd, 'stderr', "".join(cmd.logs['stdio'].getChunks([interfaces.LOG_CHANNEL_STDERR], onlyText=True))):
            rc = WARNINGS
        rc = worst_status(rc, decodeRC.get(cmd.rc, FAILURE))
        return rc

# schedulers {{{1
    
c['schedulers'].append(AnyBranchScheduler(name="on-subversion-trunk-commit",
                         branches=["subversion/trunk"],
                         treeStableTimer=15,
                         builderNames=BUILDERNAMES + BUILDERNAMES_1_8_plus,
                         fileIsImportant=isSubversionImportant))

for i in MINOR_LINES:
  c['schedulers'].append(AnyBranchScheduler(name="on-subversion-1.%d.x-commit" % i,
                         branches=["subversion/branches/1.%d.x" % i],
                         treeStableTimer=2*60,
                         builderNames=(BUILDERNAMES
                                       + (BUILDERNAMES_1_8_plus if i >= 8 else [])
                                       + (BUILDERNAMES_1_9_plus if i >= 9 else [])),
                         fileIsImportant=isSubversionImportant))

c['schedulers'].append(AnyBranchScheduler(name="on-lazy-subversion-trunk-commit",
                       branches=["subversion/trunk"],
                       treeStableTimer=3*60,
                       builderNames=BUILDERNAMES_LAZY_TRUNK,
                       fileIsImportant=isSubversionImportant))

for i in MINOR_LINES:
  c['schedulers'].append(AnyBranchScheduler(name="on-lazy-subversion-1.%d.x-commit" % i,
                         branches=["subversion/branches/1.%d.x" % i],
                         treeStableTimer=6*60,
                         builderNames=(BUILDERNAMES_LAZY_BRANCHES
                                       + (BUILDERNAMES_LAZY_1_8_plus if i >= 8 else [])
                                       + (BUILDERNAMES_LAZY_1_9_plus if i >= 9 else [])),
                         fileIsImportant=isSubversionImportant))

#c['schedulers'].append(AnyBranchScheduler(name="on-subversion-rat-commit",
#                       branches=["subversion/trunk"],
#                       treeStableTimer=2*60,
#                       builderNames=["svn-trunk-rat-report"],
#				       fileIsImportant=isSubversionImportant))

c['schedulers'].append(
    Nightly(name="subversion-trunk-nightly",
            branch="subversion/trunk",
            builderNames=BUILDERNAMES_NIGHTLY_TRUNK,
            hour=3, minute=31))

for i in MINOR_LINES:
  c['schedulers'].append(
    Nightly(name="subversion-1.%d.x-nightly" % i,
            branch="subversion/branches/1.%d.x" % i,
            builderNames=(BUILDERNAMES_NIGHTLY_BRANCHES
                          + (BUILDERNAMES_NIGHTLY_1_8_plus if i >= 8 else [])
                          + (BUILDERNAMES_NIGHTLY_1_9_plus if i >= 9 else [])),
            # Note that svn-role runs nightly at 4am via cron; trigger
            # these builds later so they have a chance to pick up backports.
            hour=4, minute=31))

c['schedulers'].append(
  Nightly(name='subversion-trunk-dist-nightly',
          builderNames=['svn-trunk-nightly'],
          branch='subversion/trunk/tools/dist',
          hour=4, minute=0))

for i in MINOR_LINES:
  c['schedulers'].append(
      Nightly(name='subversion-1.%d.x-backport-conflicts' % i,
              builderNames=['svn-backport-conflicts-1.%d.x' % i],
              branch='subversion/branches/1.%d.x' % i,
              # Run hourly.  Note that svn-role runs nightly at 4am via cron.
              minute=51))
del i

#builder svn-windows-local {{{1

f45 = factory.BuildFactory()
f45.addStep(ShellCommand(name="Cleanup",
            command=["..\svntest-cleanup.cmd"],
            timeout=3600,
            haltOnFailure=True))

f45.addStep(SVN(mode='incremental',
            repourl=Interpolate(REPO + "%(src::branch:~subversion/trunk)s"),
            haltOnFailure=True))
f45.addStep(ShellCommand(name="Build",
            command=["..\svntest-build.cmd"],
            timeout=3600,
            haltOnFailure=True))

f45.addStep(ShellCommand(name="Test fsfs+local",
            command=["..\svntest-test.cmd", "-p", "fsfs", "local"],
            logfiles={"testlog": "E:\\svn-local\\tests\\tests.log",
                      "faillog": "E:\\svn-local\\tests\\fails.log"},
            lazylogfiles=True,
            timeout=3600,
            flunkOnFailure=True))

f45.addStep(ShellCommand(name="Test JavaHL",
           command=["..\svntest-javahl.cmd"],
           timeout=3600,
           flunkOnFailure=True))

b45 = {'name': "svn-windows-local",
      'slavename': "svn-w2k3-local",
      'builddir': "svn-local",
      'factory': f45,
      'category': "svn-prod",
      }

c['builders'].append(b45)

#builder svn-windows-ra {{{1
#
f46 = factory.BuildFactory()
f46.addStep(ShellCommand(name="Cleanup",
            command=["..\svntest-cleanup.cmd"],
            timeout=3600,
            haltOnFailure=True))

f46.addStep(SVN(mode='incremental',
            repourl=Interpolate(REPO + "%(src::branch:~subversion/trunk)s"),
            haltOnFailure=True))
f46.addStep(ShellCommand(name="Build",
            command=["..\svntest-build.cmd"],
            timeout=3600,
            haltOnFailure=True))

f46.addStep(ShellCommand(name="Test fsfs+svn",
            command=["..\svntest-test.cmd","fsfs", "svn"],
            logfiles={"testlog": "E:\\svn-ra\\tests\\svn-tests.log",
                      "faillog": "E:\\svn-ra\\tests\\svn-fails.log"},
            lazylogfiles=True,
            timeout=3600,
            flunkOnFailure=True))

f46.addStep(ShellCommand(name="Test fsfs+serf",
            command=["..\svntest-test.cmd","fsfs", "serf"],
            logfiles={"testlog": "E:\\svn-ra\\tests\\dav-tests.log",
                      "faillog": "E:\\svn-ra\\tests\\dav-fails.log"},
            lazylogfiles=True,
            timeout=3600,
            flunkOnFailure=True))

f46.addStep(ShellCommand(name="Build Bindings",
            command=["..\svntest-build-bindings.cmd"],
            timeout=3600,
            flunkOnFailure=True))

f46.addStep(ShellCommand(name="Test Bindings",
           command=["..\svntest-bindings.cmd"],
           timeout=3600,
           flunkOnFailure=True))


b46 = {'name': "svn-windows-ra",
      'slavename': "svn-w2k3-ra",
      'builddir': "svn-ra",
      'factory': f46,
      'category': "svn-prod",
      }

c['builders'].append(b46)

#builder svn-x64-centos-gcc {{{1

# define set of steps for x64-ubuntu (hyrum), clean step comes first.
s50 = [ShellCommand(name="Cleanup", command=["../svnclean.sh"], workdir='', timeout=3600),
       SVN(repourl=Interpolate(REPO + "%(src::branch:~subversion/trunk)s"), timeout=3600),
       ShellCommand(name="Build", command=["../svnbuild.sh"], logfiles={"configlog": "config.log"}, timeout=3600, haltOnFailure=True),
       ShellCommand(name="Test fsfs+ra_local", command=["../svncheck.sh","fsfs","ra_local"], logfiles={"testlog": "tests.log", "faillog": "fails.log"}, lazylogfiles=True, timeout=3600,flunkOnFailure=True),
       ShellCommand(name="Test bindings", command=["../svncheck-bindings.sh","fsfs","ra_local"], logfiles={"testlog": "tests.log", "faillog": "fails.log"}, lazylogfiles=True, timeout=3600,flunkOnFailure=True),
      ]
f50 = factory.BuildFactory(s50)
b50 = {'name': "svn-x64-ubuntu-gcc",
      'slavename': "svn-x64-ubuntu",
      'builddir': "svn-x64-ubuntu",
      'factory': f50,
      'category': "svn-prod",
      }
c['builders'].append(b50)

# define set of steps for x64-centos (wandisco), clean step comes first.
s51 = [ShellCommand(name="Cleanup", command=["../svnclean.sh"], timeout=3600),
       SVN(repourl=Interpolate(REPO + "%(src::branch:~subversion/trunk)s"), timeout=3600),
       ShellCommand(name="Build", command=["../svnbuild.sh"], logfiles={"configlog": "config.log"}, timeout=3600, haltOnFailure=True),
       ShellCommand(name="Test fsfs+ra_serf", command=["../svncheck.sh", "fsfs", "ra_serf"], logfiles={"testlog": "tests.log", "faillog": "fails.log"}, lazylogfiles=True, timeout=3600, flunkOnFailure=True),
       ShellCommand(name="Test bindings fsfs+ra_serf", command=["../svncheck-bindings.sh","fsfs","ra_serf"], logfiles={"testlog": "tests.log", "faillog": "fails.log"}, lazylogfiles=True, timeout=3600, flunkOnFailure=True),
      ]
f51 = factory.BuildFactory(s51)
b51 = {'name': "svn-x64-centos-gcc",
      'slavename': "svn-x64-centos",
      'builddir': "x64-centos",
      'factory': f51,
      'category': "svn-prod",
      }
c['builders'].append(b51)

#builder 47 - mac, unused {{{1
#
# define mac os x steps (now asf hosted on eve)
s47 = [ShellCommand(name="Cleanup", command=["../svnclean.sh"], timeout=3600),
       SVN(repourl=Interpolate(REPO + "%(src::branch:~subversion/trunk)s"), timeout=3600),
       ShellCommand(name="GetDeps", command=["./get-deps.sh"]),
       ShellCommand(name="Build", command=["../svnbuild.sh"], logfiles={"configlog": "config.log"}, timeout=3600, haltOnFailure=True),
#       ShellCommand(name="Test fsfs+ra_neon", command=["../svncheck.sh", "fsfs", "ra_neon"], logfiles={"testlog": "tests.log", "faillog": "fails.log"}, lazylogfiles=True, timeout=3600, flunkOnFailure=True),
      ]

#builder bb-openbsd {{{1
# define set of steps for bb-openbsd (asf hosted vm on erebus), clean step comes first.
s98 = [ShellCommand(name="Cleanup", command=["../../svnclean.sh"], timeout=3600),
       SVN(repourl=Interpolate(REPO + "%(src::branch:~subversion/trunk)s"), timeout=3600),
       ShellCommand(name="Build", command=["../../svnbuild.sh"], logfiles={"configlog": "config.log"}, timeout=3600, haltOnFailure=True,env={'AUTOCONF_VERSION': '2.64', 'AUTOMAKE_VERSION': '1.9'}),
       ShellCommand(name="Test", command=["../../svncheck.sh"], logfiles={
           "testlog-ra_neon-fsfs": "tests.log.svn-check-neon-fsfs",
           "faillog-ra_neon-fsfs": "fails.log.svn-check-neon-fsfs",
           "testlog-ra_neon-bdb": "tests.log.svn-check-neon-bdb",
           "faillog-ra_neon-bdb": "fails.log.svn-check-neon-bdb",
           "testlog-ra_serf-fsfs": "tests.log.svn-check-serf-fsfs",
           "faillog-ra_serf-fsfs": "fails.log.svn-check-serf-fsfs",
           "testlog-ra_serf-bdb": "tests.log.svn-check-serf-bdb",
           "faillog-ra_serf-bdb": "fails.log.svn-check-serf-bdb",
           "testlog-ra_local-fsfs": "tests.log.svn-check-local-fsfs",
           "faillog-ra_local-fsfs": "fails.log.svn-check-local-fsfs",
           "testlog-ra_local-bdb": "tests.log.svn-check-local-bdb",
           "faillog-ra_local-bdb": "fails.log.svn-check-local-bdb",
           "testlog-ra_svn-fsfs": "tests.log.svn-check-svn-fsfs",
           "faillog-ra_svn-fsfs": "fails.log.svn-check-svn-fsfs",
           "testlog-ra_svn-bdb": "tests.log.svn-check-svn-bdb",
           "faillog-ra_svn-bdb": "fails.log.svn-check-svn-bdb",
       }, lazylogfiles=True, timeout=3600, flunkOnFailure=True),
       ShellCommand(name="Test bindings", command=["../../svncheck-bindings.sh"], logfiles={
            "testlog-swig-pl": "tests.log.bindings.pl",
            "testlog-swig-py": "tests.log.bindings.py",
            "testlog-swig-rb": "tests.log.bindings.rb",
            "testlog-javahl": "tests.log.bindings.javahl",
       }, lazylogfiles=True, timeout=3600, flunkOnFailure=True),
      ]
f98 = factory.BuildFactory(s98)

def bb_openbsd_merge_requests(builder, req1, req2):
    """Merge all requests for the same branch. This way, the bot won't
    try to build every single revision ever committed to a branch
    but will always always build the latest revision of the branch.
    This prevents the bb-openbsd bot from falling behind over time
    in terms of revisions it is building. A single build can take
    up to 24h because this bot is configured to run the Subversion
    test suite repeatedly, in all possible configurations. The rate
    of commits is much higher than 1 in every 24h."""
    return req1.source.branch == req2.source.branch

b98 = {'name': "bb-openbsd",
      'slavename': "bb-openbsd",
      'builddir': "bb-openbsd",
      'factory': f98,
      'category': "svn-prod",
      'mergeRequests': bb_openbsd_merge_requests,
      }
c['builders'].append(b98)


#builder svn-sparc-solaris {{{1
# SPARC Solaris bot hosted by WANdisco
s_svn_sparc_solaris = [
                    ShellCommand(name="Cleanup",
                                 command=["../svncleanup.sh"],
                                 timeout=3600),
                    SVN(repourl=Interpolate(REPO + "%(src::branch:~subversion/trunk)s"),
                        timeout=3600),
                    ShellCommand(name="Build",
                                 command=["../svnbuild.sh"],
                                 logfiles={"configlog": "config.log"},
                                 timeout=3600,
                                 haltOnFailure=True),
                    ShellCommand(name="Test fsfs+ra_local",
                                 command=["../svncheck.sh"],
                                 logfiles={"testlog": "../obj/tests.log",
                                           "faillog": "../obj/fails.log"},
                                 lazylogfiles=True,
                                 timeout=3600,
                                 flunkOnFailure=True),
                    ]
f_svn_sparc_solaris = factory.BuildFactory(s_svn_sparc_solaris)
b_svn_sparc_solaris = {
                    'name': 'svn-sparc-solaris',
                    'slavename' : 'svn-sparc-solaris',
                    'builddir': 'svn-sparc-solaris',
                    'factory': f_svn_sparc_solaris,
                    'category': "svn-prod"
                    }
c['builders'].append(b_svn_sparc_solaris)
# end of SPARC Solaris bot

# bot svn-x64-macosx-dgvrs hosted by Digiverse

#builder svn-x64-macosx-local {{{1
b_svn_osx_1 = {
    'name': "svn-x64-macosx-local",
    'slavename': "svn-x64-macosx-dgvrs",
    'category': "svn-prod",
    'factory': factory.BuildFactory([
        ShellCommand(name="Cleanup (before build)",
                     command=["../../svnclean.sh"],
                     workdir='',
                     timeout=3600,
                     haltOnFailure=True),

        SVN(repourl=Interpolate(REPO + "%(src::branch:~subversion/trunk)s"),
            timeout=3600,
            haltOnFailure=True),

        ShellCommand(name="Build",
                     command=["../../svnbuild.sh"],
                     logfiles={"configlog": ".test-logs/config.log"},
                     timeout=3600,
                     haltOnFailure=True),

        ShellCommand(name="Test ra_local+fsfs",
                      command=["../../svncheck.sh", "local", "fsfs"],
                      logfiles={"testlog": ".test-logs/tests-local-fsfs.log",
                                "faillog": ".test-logs/fails-local-fsfs.log"},
                      lazylogfiles=True,
                      timeout=3600,
                      flunkOnFailure=True),

        ShellCommand(name="Cleanup (after build)",
                     command=["../../svnclean.sh"],
                     workdir='',
                     timeout=3600,
                     haltOnFailure=True),
    ])
}
c['builders'].append(b_svn_osx_1)

# Full builds {{{1
def s_svn_osx_full():
    return [
        ShellCommand(name="Cleanup (before build)",
                     command=["../../svnclean.sh"],
                     workdir='',
                     timeout=3600,
                     haltOnFailure=True),

        SVN(repourl=Interpolate(REPO + "%(src::branch:~subversion/trunk)s"),
            timeout=3600,
            haltOnFailure=True),

        ShellCommand(name="Build",
                     command=["../../svnbuild.sh"],
                     logfiles={"configlog": ".test-logs/config.log"},
                     timeout=3600,
                     haltOnFailure=True),

        ShellCommand(name="Test ra_local+fsfs",
                      command=["../../svncheck.sh", "local", "fsfs"],
                      logfiles={"testlog": ".test-logs/tests-local-fsfs.log",
                                "faillog": ".test-logs/fails-local-fsfs.log"},
                      lazylogfiles=True,
                      timeout=3600,
                      flunkOnFailure=True),

        ShellCommand(name="Test ra_svn+fsfs",
                      command=["../../svncheck.sh", "svn", "fsfs"],
                      logfiles={"testlog": ".test-logs/tests-svn-fsfs.log",
                                "faillog": ".test-logs/fails-svn-fsfs.log"},
                      lazylogfiles=True,
                      timeout=3600,
                      flunkOnFailure=True),

        ShellCommand(name="Test ra_dav+fsfs",
                      command=["../../svncheck.sh", "dav", "fsfs"],
                      logfiles={"testlog": ".test-logs/tests-dav-fsfs.log",
                                "faillog": ".test-logs/fails-dav-fsfs.log"},
                      lazylogfiles=True,
                      timeout=3600,
                      flunkOnFailure=True),

        ShellCommand(name="Build bindings",
                     command=["../../svnbuild-bindings.sh"],
                     timeout=3600,
                     haltOnFailure=True),

        ShellCommand(name="Test swig-py",
                      command=["../../svncheck-bindings.sh", "swig-py"],
                      lazylogfiles=True,
                      timeout=3600,
                      flunkOnFailure=True),

        ShellCommand(name="Test swig-pl",
                      command=["../../svncheck-bindings.sh", "swig-pl"],
                      timeout=3600,
                      flunkOnFailure=True),

        ShellCommand(name="Test swig-rb",
                      command=["../../svncheck-bindings.sh", "swig-rb"],
                      timeout=3600,
                      flunkOnFailure=True),

        ShellCommand(name="Test javahl",
                      command=["../../svncheck-bindings.sh", "javahl"],
                      timeout=3600,
                      flunkOnFailure=True),

        ShellCommand(name="Cleanup (after build)",
                     command=["../../svnclean.sh"],
                     workdir='',
                     timeout=3600,
                     haltOnFailure=True),
    ]

def s_svn_osx_bdb():
    return [
        ShellCommand(name="Cleanup (before build)",
                     command=["../../svnclean.sh"],
                     workdir='',
                     timeout=3600,
                     haltOnFailure=True),

        SVN(repourl=Interpolate(REPO + "%(src::branch:~subversion/trunk)s"),
            timeout=3600,
            haltOnFailure=True),

        ShellCommand(name="Build",
                     command=["../../svnbuild.sh"],
                     logfiles={"configlog": ".test-logs/config.log"},
                     timeout=3600,
                     haltOnFailure=True),

        ShellCommand(name="Test ra_local+bdb",
                      command=["../../svncheck.sh", "local", "bdb"],
                      logfiles={"testlog": ".test-logs/tests-local-bdb.log",
                                "faillog": ".test-logs/fails-local-bdb.log"},
                      lazylogfiles=True,
                      timeout=3600,
                      flunkOnFailure=True),

        ShellCommand(name="Test ra_svn+bdb",
                      command=["../../svncheck.sh", "svn", "bdb"],
                      logfiles={"testlog": ".test-logs/tests-svn-bdb.log",
                                "faillog": ".test-logs/fails-svn-bdb.log"},
                      lazylogfiles=True,
                      timeout=3600,
                      flunkOnFailure=True),

        ShellCommand(name="Test ra_dav+bdb",
                      command=["../../svncheck.sh", "dav", "bdb"],
                      logfiles={"testlog": ".test-logs/tests-dav-bdb.log",
                                "faillog": ".test-logs/fails-dav-bdb.log"},
                      lazylogfiles=True,
                      timeout=3600,
                      flunkOnFailure=True),

        ShellCommand(name="Cleanup (after build)",
                     command=["../../svnclean.sh"],
                     workdir='',
                     timeout=3600,
                     haltOnFailure=True),
    ]

#builder svn-x64-macosx-full {{{1
b_svn_osx_2 = {
    'name': "svn-x64-macosx-full",
    'slavename': "svn-x64-macosx-dgvrs",
    'category': "svn-prod",
    'factory': factory.BuildFactory(s_svn_osx_full())
}
c['builders'].append(b_svn_osx_2)

#builder svn-x64-macosx-bdb {{{1
b_svn_osx_3 = {
    'name': "svn-x64-macosx-bdb",
    'slavename': "svn-x64-macosx-dgvrs",
    'category': "svn-prod",
    'factory': factory.BuildFactory(s_svn_osx_bdb())}
c['builders'].append(b_svn_osx_3)

# APR versions {{{1
def s_svn_osx_aprversions(aprversion):
    return [
        ShellCommand(name="Cleanup (before build)",
                     command=["../../svnclean.sh"],
                     workdir='',
                     timeout=3600,
                     haltOnFailure=True),

        SVN(repourl=Interpolate(REPO + "%(src::branch:~subversion/trunk)s"),
            timeout=3600,
            haltOnFailure=True),

        ShellCommand(name="Build",
                     command=["../../svnbuild.sh", aprversion],
                     logfiles={"configlog": ".test-logs/config.log"},
                     timeout=3600,
                     haltOnFailure=True),

        ShellCommand(name="Test ra_local+fsfs",
                      command=["../../svncheck.sh", "local", "fsfs"],
                      logfiles={"testlog": ".test-logs/tests-local-fsfs.log",
                                "faillog": ".test-logs/fails-local-fsfs.log"},
                      lazylogfiles=True,
                      timeout=3600,
                      flunkOnFailure=True),

        ShellCommand(name="Test ra_svn+fsfs",
                      command=["../../svncheck.sh", "svn", "fsfs"],
                      logfiles={"testlog": ".test-logs/tests-svn-fsfs.log",
                                "faillog": ".test-logs/fails-svn-fsfs.log"},
                      lazylogfiles=True,
                      timeout=3600,
                      flunkOnFailure=True),

        ShellCommand(name="Cleanup (after build)",
                     command=["../../svnclean.sh"],
                     workdir='',
                     timeout=3600,
                     haltOnFailure=True),
    ]

#builder svn-x64-macosx-apr1.3-nothread {{{1
b_svn_osx_4 = {
    'name': "svn-x64-macosx-apr1.3-nothread",
    'slavename': "svn-x64-macosx-dgvrs",
    'category': "svn-compat",
    'factory': factory.BuildFactory(s_svn_osx_aprversions("APR_13_NOTHREAD"))
}
c['builders'].append(b_svn_osx_4)

#builder svn-x64-macosx-apr1.5 {{{1
b_svn_osx_5 = {
    'name': "svn-x64-macosx-apr1.5",
    'slavename': "svn-x64-macosx-dgvrs",
    'category': "svn-compat",
    'factory': factory.BuildFactory(s_svn_osx_aprversions("APR_15"))
}
c['builders'].append(b_svn_osx_5)

#builder svn-x64-macosx-apr2.0-dev {{{1
b_svn_osx_6 = {
    'name': "svn-x64-macosx-apr2.0-dev",
    'slavename': "svn-x64-macosx-dgvrs",
    'category': "svn-compat",
    'factory': factory.BuildFactory(s_svn_osx_aprversions("APR_20_DEV"))
}
c['builders'].append(b_svn_osx_6)

# FS compatibility {{{1
def s_svn_osx_fscompat(fstype):
    return [
        ShellCommand(name="Cleanup (before build)",
                     command=["../../svnclean.sh"],
                     workdir='',
                     timeout=3600,
                     haltOnFailure=True),

        SVN(repourl=Interpolate(REPO + "%(src::branch:~subversion/trunk)s"),
            timeout=3600,
            haltOnFailure=True),

        ShellCommand(name="Build",
                     command=["../../svnbuild.sh"],
                     logfiles={"configlog": ".test-logs/config.log"},
                     timeout=3600,
                     haltOnFailure=True),

        ShellCommand(name="Test ra_local+" + fstype,
                      command=["../../svncheck.sh", "local", fstype],
                      logfiles={"testlog": ".test-logs/tests-local-" + fstype + ".log",
                                "faillog": ".test-logs/fails-local-" + fstype + ".log"},
                      lazylogfiles=True,
                      timeout=3600,
                      flunkOnFailure=True),

        ShellCommand(name="Test ra_svn+" + fstype,
                      command=["../../svncheck.sh", "svn", fstype],
                      logfiles={"testlog": ".test-logs/tests-svn-" + fstype + ".log",
                                "faillog": ".test-logs/fails-svn-" + fstype + ".log"},
                      lazylogfiles=True,
                      timeout=3600,
                      flunkOnFailure=True),

        ShellCommand(name="Cleanup (after build)",
                     command=["../../svnclean.sh"],
                     workdir='',
                     timeout=3600,
                     haltOnFailure=True),
    ]

#builder svn-x64-macosx-fsfs-v6 {{{1
b_svn_osx_7 = {
    'name': "svn-x64-macosx-fsfs-v6",
    'slavename': "svn-x64-macosx-dgvrs",
    'category': "svn-compat",
    'factory': factory.BuildFactory(s_svn_osx_fscompat("fsfs-v6"))
}
c['builders'].append(b_svn_osx_7)

#builder svn-x64-macosx-fsfs-v4 {{{1
b_svn_osx_8 = {
    'name': "svn-x64-macosx-fsfs-v4",
    'slavename': "svn-x64-macosx-dgvrs",
    'category': "svn-compat",
    'factory': factory.BuildFactory(s_svn_osx_fscompat("fsfs-v4"))
}
c['builders'].append(b_svn_osx_8)


#builder svn-x64-macosx-fsx {{{1
b_svn_osx_8 = {
    'name': "svn-x64-macosx-fsx",
    'slavename': "svn-x64-macosx-dgvrs",
    'category': "svn-compat",
    'factory': factory.BuildFactory(s_svn_osx_fscompat("fsx"))
}
c['builders'].append(b_svn_osx_8)

# end of bot svn-x64-macosx-dgvrs


### [JAF 2015-01-07] Commented out the following RAT configuration because
### of spurious failures. In approx. 1 in 10 of the build attempts, the
### slave fails to read the output from a command such as 'svn info --xml'
### or 'git --version'. The absence of response can be seen in the stdio
### logs.

# #builder svn-trunk-rat-report {{{1
# f30 = factory.BuildFactory()
# f30.addStep(SVN(mode='incremental',
#             repourl=Interpolate(REPO + "%(src::branch:~subversion/trunk)s"),
#             haltOnFailure=True))
# # If checkout of source didn't work, then no point continuing.
# 
# f30.addStep(ShellCommand(
#              command=['bash', '-c', 'ant -f /home/buildslave2/slave2/rat-buildfiles/subversion.xml -lib /home/buildslave2/'],
# ))
# 
# 
# # Above performs RAT tests on entire subversion build directories, output to txt file.
# # Now we will publish that report to ci.apache.org/projects/subversion/rat-output.txt
# # assuming that the report step itself was successful.
# 
# f30.addStep(FileUpload(slavesrc="../rat-output.xml",
#                        masterdest="/tmp/subversion/rat-output.xml",
# 		       haltOnFailure=True,
# ))
# 
# # If we get this far, then the RAT report went fine and it was uploaded to master tmp
# # dir without error. So now we can delete any previous report and move from tmp to
# # published.
# 
# f30.addStep(MasterShellCommand(command="""
#             rm -f /x1/buildmaster/master1/public_html/projects/subversion/rat-output.xml;
#             cp /tmp/subversion/rat-output.xml /x1/buildmaster/master1/public_html/projects/subversion/rat-output.xml"""))
# 
# # Cleanup tmp
# 
# f30.addStep(MasterShellCommand(command="""
#             rm -rf /tmp/subversion""",
#             alwaysRun=True,
# ))
# 
# # Always run the tmp cleanup step, in case of failures part way through uploading etc..
# 
# 
# b30 = {'name': "svn-trunk-rat-report",
#       'slavename': "lares_ubuntu",
#       'builddir': "subversion-trunk",
#       'factory': f30,
#       'category': "svn-status",
#       }
# 
# c['builders'].append(b30)
# b_svn_trunk_rat_report = b30

#builder svn-trunk-nightly {{{1
## Nightly Snapshots ##

f82 = factory.BuildFactory()
f82.addStep(SVN(mode='full', method='clobber',
            repourl=Interpolate(REPO + "%(src::branch:~subversion/trunk/tools/dist)s"),
            haltOnFailure=True))

f82.addStep(ShellCommand(
            command=["./nightly.sh" , "-d" , "../uploads"],
                    haltOnFailure=True,
))

# f82.addStep(SetPropertyFromCommand(command="date +%Y%m%d", property="today"))

f82.addStep(DirectoryUpload(slavesrc="../uploads/target",
                       masterdest="/tmp/subversion/nightlies/",
		       haltOnFailure=True,
))

f82.addStep(ShellCommand(
            command=['bash', '-c', 'rm -rf ../uploads/*']
))

f82.addStep(MasterShellCommand(command="""
            cp -r /tmp/subversion/nightlies/* /x1/buildmaster/master1/public_html/projects/subversion/nightlies/"""))

# Cleanup tmp

f82.addStep(MasterShellCommand(command="""
            rm -rf /tmp/subversion/nightlies""",
            alwaysRun=True,
))

# Always run the tmp cleanup step, in case of failures part way through uploading etc..

b82 = {'name': "svn-trunk-nightly",
      'slavename': "bb-fbsd2_64bit",
      'builddir': "svn-trunk-nightly",
      'factory': f82,
      'category': "svn-status",
      }

c['builders'].append(b82)

## End of Nightly Snapshots ##

#builder svn-backport-conflicts-1.*.x {{{1
# define set of steps for svn-backport-conflicts
s173 = []
b173 = []
for i in MINOR_LINES:
  branch = '1.%d.x' % i
  s173.append([
       SVN(mode='full', method='copy',
           repourl=Interpolate(REPO + "%(src::branch:~subversion/branches/" + branch + ")s"),
           timeout=3600,
           # Don't die if the checkout failed, since MINOR_LINES[-2:] don't exist
           haltOnFailure=True, flunkOnFailure=False),
       ShellCommand(name="Export", command=["svn", "export", "--", REPO_HTTPS+"/subversion/trunk/tools/dist/backport.pl", ".svn/backport.pl"],
                    timeout=60, haltOnFailure=True, description='Export'),
       ShellCommand(name="Upgrade", command=["/home/danielsh/src/svn/subversion-1.8.0/b/subversion/svn/svn", "upgrade"],
                    # hideStepIf=HideIfSuccessful,
                    timeout=3600, haltOnFailure=True, description='WC Upgrade'),
       ShellCommandWithStderrWarning(name="Conflicts",
           command=["env","YES=1","MAY_COMMIT=0","SVN=/home/danielsh/src/svn/subversion-1.8.0/b/subversion/svn/svn","./.svn/backport.pl"],
           timeout=3600, flunkOnFailure=True,
           warnOnWarnings=True, 
           description='Running merges'.split()),
      ])
  b173.append({'name': "svn-backport-conflicts-" + branch,
      'slavename': "hemera_ubuntu",
      'builddir': "svn-backport-conflicts-" + branch,
      'factory': factory.BuildFactory(s173[-1]),
      'category': "svn-status",
      })
  c['builders'].append(b173[-1])
del i
# end of svn-backport-conflicts

#builder svn-warnings {{{1
#
# warnings bot
s174 = [
       # Note that the use of --prefix may interfere with method!=copy'
       SVN(mode='full', method='copy', timeout=3600, repourl=Interpolate(REPO + "%(src::branch:~subversion/trunk)s")),
       ShellCommandWithStderrWarning(name="Autogen", command=["./autogen.sh"],
                                     warnOnWarnings=True,
                                     timeout=300, haltOnFailure=True),
       SetPropertyFromCommand(command="pwd", property="pwd"),
       SetPropertyFromCommand(command="apr-1-config --cc", property="apr-cc"),
       SetPropertyFromCommand(command="realpath ~/tools/serf", property="serf-prefix"),
       # x86_64-linux-gnu-gcc
       ShellCommandWithStderrWarning(name="Configure", command=[
              './configure', '-q',
              '--enable-maintainer-mode',
              'CFLAGS='
                     '-DPACK_AFTER_EVERY_COMMIT -DSVN_UNALIGNED_ACCESS_IS_OK=0 '
                     '-DSUFFIX_LINES_TO_KEEP=0 -DSVN_DEPRECATED= -Wformat=0 '
                     '-Wno-unreachable-code -g',
              WithProperties('--prefix=%(pwd)s/prefix'),
              WithProperties('CC=%(apr-cc)s'),
              WithProperties('--with-serf=%(serf-prefix)s'),
              # Built from the amalgamation with:
              # s=/home/buildslave18/slave18/tools/sqlite; sudo rm -rf $s && sudo mkdir -p $s/include $s/lib && sudo cp sqlite3.h $s/include && sudo gcc -W -Wall -Wextra -Werror -fPIC -shared -o $s/lib/libsqlite3.so sqlite3.c -ldl -lpthread
              # NOTE: this doesn't create a .la file for libtool, so libtool won't add this library to rpath of binaries compiled against it, so we have to set LD_LIBRARY_PATH below.
              '--with-sqlite=/home/buildslave18/slave18/tools/sqlite',
              '--with-berkeley-db',
              '--with-sasl',
              '--with-libmagic',
              '--with-apxs=/usr/bin/apxs2'],
              logfiles={"configlog": "config.log"},
              description=repr('./configure'),
              warnOnWarnings=True, timeout=1800, haltOnFailure=True),
       ShellCommandWithStderrWarning(name="Make", command=['make', '-s'],
              env={
                  # See comment above for why this envvar is needed.
                  'LD_LIBRARY_PATH': '/home/buildslave18/slave18/tools/sqlite/lib',
                  # Workaround for https://code.google.com/p/serf/issues/detail?id=118
                  'EXTRA_LDFLAGS': WithProperties('-Wl,-rpath-link -Wl,%(serf-prefix)s/lib'),
              },
              warnOnWarnings=True, timeout=3600, flunkOnFailure=True,
              description=repr('make')),
       ShellCommand(name="Install", command=['make', '-s', 'install'],
              env={'EXTRA_LDFLAGS': WithProperties('-Wl,-rpath-link -Wl,%(serf-prefix)s/lib')},
              description=map(repr, 'make install'.split()),
              warnOnWarnings=False,
              timeout=3600, flunkOnFailure=True),
       ShellCommandWithStderrWarning(name="Clean", command=['make', '-s', 'clean'],
              description=map(repr, 'make clean'.split()),
              warnOnWarnings=True, timeout=3600, flunkOnFailure=True),
       ShellCommandWithStderrWarning(name="Distclean", command=['make', '-s', 'distclean'],
              description=map(repr, 'make distclean'.split()),
              warnOnWarnings=True, timeout=3600, flunkOnFailure=True),
      ]
b174 = ({'name': "svn-warnings",
      'slavename': "hemera_ubuntu",
      'builddir': "svn-warnings",
      'factory': factory.BuildFactory(s174),
      'category': "svn-warnings",
      })
c['builders'].append(b174)
# end of warnings bot

## reorder bots (matters for waterfall columns)
#if b_svn_trunk_rat_report in c['builders']:
#    c['builders'].remove(b_svn_trunk_rat_report)
#    c['builders'].append(b_svn_trunk_rat_report)

#mail status {{{1

c['status'].append(mail.MailNotifier(fromaddr="buildbot@apache.org",
                                     extraRecipients=["notifications@subversion.apache.org"],
                                     sendToInterestedUsers=False,
                                     mode="change",
                                     categories=["svn-prod", "svn-status",
                                                 "svn-warnings", "svn-compat"]))

c['status'].append(words.IRC(host="chat.freenode.net", nick="subversion-bot",
                              allowForce=True,
                              channels=["#svn-dev"],
                              notify_events={
                                'successToFailure' : 1,
                                'successToWarnings': 1,
                                 'failureToSuccess': 1,
                                'warningsToSuccess': 1,
                                },
                              # useSSL=True,
                              categories=["svn-prod", "svn-status",
                                          "svn-warnings", "svn-compat"]))
