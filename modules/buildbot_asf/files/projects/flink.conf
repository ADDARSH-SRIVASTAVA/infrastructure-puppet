# coding: utf-8

"""
  ______ _ _       _
 |  ____| (_)     | |                                             _
 | |__  | |_ _ __ | | __                                      .-'` `}
 |  __| | | | '_ \| |/ /                              _./)   /       }
 | |    | | | | | |   <                             .'o   \ |       }
 |_|    |_|_|_| |_|_|\_\                            '.___.'`.\    {`
                                                    /`\_/  , `.    }
  ____        _ _     _ _           _               \=' .-'   _`\  {
 |  _ \      (_) |   | | |         | |               `'`;/      `,  }
 | |_) |_   _ _| | __| | |__   ___ | |_                 _\       ;  }
 |  _ <| | | | | |/ _` | '_ \ / _ \| __|       jgs     /__`;-...'--'
 | |_) | |_| | | | (_| | |_) | (_) | |_
 |____/ \__,_|_|_|\__,_|_.__/ \___/ \__|


"""

import re
from buildbot.scheduler import Triggerable

# This is the config file for the Flink project.
# Beware of the variable names. They have to be globally unique because this
# config is merged with all other Apache projects' configs.

# git branches that should be build nightly
flink_branches_nightly = [
    'master',
    'release-0.9',
]

# git branches that can be build on demand (e.g. via IRC channel)
flink_branches_manual = [
    'release-0.8.1',
    'release-0.8.0',
    'release-0.8',
    'release-0.7',
    'release-0.6.2',
    'release-0.6.1',
    'release-0.6',
    'release-0.5.1',
    'release-0.5',
    'release-0.4',
]


# bash script that does the doc building (in analogy to build_apidoc.rb)
# execute from the flink root

# Flink version < 0.9
flink_doc_maven_profile_old = "-Pdocs-and-source"
# Flink version >= 0.9 and master
flink_doc_maven_profile_new = "-Paggregate-scaladoc"


flink_api_docs_gen = """

# figure out the Java version (Oracle JDK and OpenJDK compatible)
JAVA_VERSION=$(java -version 2>&1 | sed 's/.*version "\(.*\)\.\(.*\)\..*"/\1\2/; 1q')

# Java 8 and newer needs this fix
if [ "$JAVA_VERSION" -ge 18 ] ; then
    JAVA8_DOC_FIX='-DadditionalJOption="-Xdoclint:none"'
else
    JAVA8_DOC_FIX=''
fi

# create api dir for scala and java docs
mkdir -p docs/api

# build java docs
mvn javadoc:aggregate {maven_profile} $JAVA8_DOC_FIX -Dmaven.javadoc.failOnError=false -Dquiet=true -Dheader="<a href=\"http://flink.apache.org/\" target=\"_top\"><h1>Back to Flink Website</h1></a>"

# move java docs
mv target/site/apidocs docs/api/java

# build scala docs
cd stratosphere-scala || cd flink-scala 
mvn scala:doc

# move scala docs
mv target/site/scaladocs ../docs/api/scala

"""

# bash script to build the jekyll based documentation

flink_docs_gen = """

# flink < 0.6 doesn't have jekyll documentation
cd docs
if [ -f "_config.yml" ] ; then
   jekyll build --source . --destination ./target
else
   mkdir -p target
   mv api target
fi

"""


def create_flink_builder(branch):
    """ Utility method to generate a builder for each git branch"""

    flink_factory = factory.BuildFactory()

    # clone the git report
    flink_factory.addStep(Git(
        # unreliable (as of 2015)
        #repourl="git://git.apache.org/flink.git",
        # GitHub is more reliable but not always in sync
        #repourl="https://github.com/apache/flink.git",
        # US mirror
        repourl="https://git-wip-us.apache.org/repos/asf/flink.git/",
        branch=branch,
        workdir="build",
        retry=(10, 5), # retry 5 times with a 10 second delay
        retryFetch=True,
        mode='full',
        method='fresh'
    ))

    # build flink
    flink_factory.addStep(Compile(
        command=["mvn" , "clean", "install", "-DskipTests", "-Dmaven.javadoc.skip=true"],
        workdir="build",
        haltOnFailure=True
    ))

    # build java & scala doc
    flink_factory.addStep(ShellCommand(
        name="Java & Scala docs",
        command=flink_api_docs_gen.format(maven_profile=flink_doc_maven_profile_old if re.search("release-0\.[0-8]", branch) else flink_doc_maven_profile_new),
        workdir="build",
        haltOnFailure=True
    ))

    # build flink doc
    flink_factory.addStep(ShellCommand(
        name="Flink docs",
        command=flink_docs_gen,
        workdir="build",
        haltOnFailure=True
    ))

    doc_dir_name = "flink-docs-%s" % branch

    # upload java and scala docs to the master
    # upload Flink docs to the master
    flink_factory.addStep(DirectoryUpload(
        name="Upload docs",
        slavesrc="target",
        masterdest="/tmp/%s/" % doc_dir_name,
        workdir="build/docs",
        haltOnFailure=True))

    web_dir = "/x1/buildmaster/master1/public_html/projects/flink/"

    # move everything from tmp to public_html
    flink_factory.addStep(MasterShellCommand(
        name="Publish docs",
        command=" && ".join([
           "mkdir -p %s" % web_dir,
           "rm -rf %s/%s" % (web_dir, doc_dir_name),
           "mv /tmp/%s/ %s" % (doc_dir_name, web_dir)
        ])
    ))

    # cleanup (just in case)
    flink_factory.addStep(MasterShellCommand(
        name="Clean up",
        command="rm -rf /tmp/%s/" % doc_dir_name,
        alwaysRun=True))

    builder = {
        'name': doc_dir_name,
        'slavenames': ["orcus_ubuntu", "lares_ubuntu"],
        'builddir': doc_dir_name,
        'factory': flink_factory,
        'category': doc_dir_name,
    }

    return builder


# Create builders that are added via the projects.conf
# wrap in function to avoid colliding with the global buildbot namespace

def register_flink_builders():

    # nightly builders
    for i, branch in enumerate(flink_branches_nightly):
        # create builder
        builder = create_flink_builder(branch)

        # add builder to global builders
        c['builders'].append(builder)

        # Set up a nightly scheduler as commit-based schedulers only work with SVN.
        c['schedulers'].append(Nightly(name="flink-nightly-docs-%s" % branch,
                                       builderNames=[builder['name']],
                                       branch=branch,
                                       hour=i % 24, # starts at 00:00 and executes a doc gen every hour
                                       minute=0))
    
    # manual builders (have to be triggered explicitly)
    for i, branch in enumerate(flink_branches_manual):
        # create builder
        builder = create_flink_builder(branch)

        # add builder to global builders
        c['builders'].append(builder)

        # Set up a nightly scheduler as commit-based schedulers only work with SVN.
        c['schedulers'].append(Triggerable(name="flink-docs-%s" % branch,
                                       builderNames=[builder['name']]))

                                  


# actual registration
register_flink_builders()

# add a status mail for all branches
c['status'].append(mail.MailNotifier(fromaddr="buildbot@apache.org",
                                     extraRecipients=["commits@flink.apache.org"],
                                     sendToInterestedUsers=False,
                                     mode="change",
                                     categories=["flink-docs-%s" % branch for branch in flink_branches_nightly]))

# irc bot
c['status'].append(words.IRC(host="irc.freenode.net",
                             nick="flink-buildbot",
                             allowForce=True,
                             channels=["#flink-testing"],
                             notify_events={
                                 'successToFailure': 1,
                                 'failureToSuccess': 1,
                             },
                             categories=["flink-docs-%s" % branch for branch in flink_branches_nightly + flink_branches_manual]))
