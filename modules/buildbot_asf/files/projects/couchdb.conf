# This is the config file for the couchdb project.

# schedulers

c['schedulers'].append(AnyBranchScheduler(name="on-couchdb-commit",
                         branches=["couchdb/trunk"],
                         treeStableTimer=2,
                         builderNames=["couchdb-trunk"]))

c['schedulers'].append(AnyBranchScheduler(name="on-couchdb-coverage-commit",
                         branches=["couchdb/trunk"],
                         treeStableTimer=60,
                         builderNames=["couchdb-coverage"]))

c['schedulers'].append(AnyBranchScheduler(name="on-couchdb-branch-0.11.x-commit",
                         branches=["couchdb/branches/0.11.x"],
                         treeStableTimer=2,
                         builderNames=["couchdb-branch-0.11.x"]))

c['schedulers'].append(SingleBranchScheduler(name="on-couchdb-git-commit",
                    change_filter=filter.ChangeFilter(branch='master' , project="couchdb"),
                    treeStableTimer=60,
                    builderNames=["couchdb-git-trunk"]))
#builders

# git builders

f_cou_1 = factory.BuildFactory()
f_cou_1.addStep(ShellCommand(name="Fix Perms", command=["../fixperms.sh"]))
f_cou_1.addStep(Git(repourl="https://git-wip-us.apache.org/repos/asf/couchdb.git"))
f_cou_1.addStep(Compile(command=["./bootstrap"]))
f_cou_1.addStep(Compile(command=["./configure" , "--prefix=/tmp/couchdb"]))
f_cou_1.addStep(Compile(command=["make"]))
f_cou_1.addStep(Compile(command=["make" , "dev"]))
f_cou_1.addStep(Compile(command=["make" , "check"]))
f_cou_1.addStep(Compile(command=["make" , "distcheck"]))
f_cou_1.addStep(ShellCommand(
             command=['bash', '-c', 'ant -f /home/buildslave3/slave3/rat-buildfiles/couchdb.xml -lib /home/buildslave3/'],
))


# Above performs RAT tests on entire couchdb build directories, output to txt file.
# Now we will publish that report to ci.apache.org/projects/couchdb/rat-output.xml
# assuming that the report step itself was successful.

f_cou_1.addStep(FileUpload(slavesrc="../rat-output.xml",
                       masterdest="/tmp/couchdb/rat-output.xml",
		       haltOnFailure=True,
))

# If we get this far, then the RAT report went fine and it was uploaded to master tmp
# dir without error. So now we can delete any previous report and move from tmp to
# published.

f_cou_1.addStep(MasterShellCommand(command="""
            rm -f /x1/buildmaster/master1/public_html/projects/couchdb/rat-output.xml;
            cp /tmp/couchdb/rat-output.xml /x1/buildmaster/master1/public_html/projects/couchdb/rat-output.xml"""))

# Cleanup tmp

f_cou_1.addStep(MasterShellCommand(command="""
            rm -rf /tmp/couchdb""",
            alwaysRun=True,
))

# Always run the tmp cleanup step, in case of failures part way through uploading etc..


b_cou_1 = {'name': "couchdb-git-trunk",
      'slavename': "bb-vm_ubuntu",
      'builddir': "couchdb-git-trunk",
      'factory': f_cou_1,
      'category': "couchdb-git-trunk",
      }

c['builders'].append(b_cou_1)

# svn builders (to be removed)

f5 = factory.BuildFactory()
f5.addStep(ShellCommand(name="Fix Perms", command=["../fixperms.sh"]))
f5.addStep(SVN(repourl=Interpolate("https://svn.apache.org/repos/asf/%(src::branch:~couchdb/trunk)s")))
f5.addStep(Compile(command=["./bootstrap"]))
f5.addStep(Compile(command=["./configure" , "--prefix=/tmp/couchdb"]))
f5.addStep(Compile(command=["make"]))
f5.addStep(Compile(command=["make" , "dev"]))
f5.addStep(Compile(command=["make" , "check"]))
f5.addStep(Compile(command=["make" , "distcheck"]))
f5.addStep(ShellCommand(
             command=['bash', '-c', 'ant -f /home/buildslave3/slave3/rat-buildfiles/couchdb.xml -lib /home/buildslave3/'],
))


# Above performs RAT tests on entire couchdb build directories, output to txt file.
# Now we will publish that report to ci.apache.org/projects/couchdb/rat-output.xml
# assuming that the report step itself was successful.

f5.addStep(FileUpload(slavesrc="../rat-output.xml",
                       masterdest="/tmp/couchdb/rat-output.xml",
		       haltOnFailure=True,
))

# If we get this far, then the RAT report went fine and it was uploaded to master tmp
# dir without error. So now we can delete any previous report and move from tmp to
# published.

f5.addStep(MasterShellCommand(command="""
            rm -f /x1/buildmaster/master1/public_html/projects/couchdb/rat-output.xml;
            cp /tmp/couchdb/rat-output.xml /x1/buildmaster/master1/public_html/projects/couchdb/rat-output.xml"""))

# Cleanup tmp

f5.addStep(MasterShellCommand(command="""
            rm -rf /tmp/couchdb""",
            alwaysRun=True,
))

# Always run the tmp cleanup step, in case of failures part way through uploading etc..


b5 = {'name': "couchdb-trunk",
      'slavename': "bb-vm_ubuntu",
      'builddir': "couchdb-trunk",
      'factory': f5,
      'category': "couchdb-trunk",
      }

c['builders'].append(b5)

f20 = factory.BuildFactory()
f20.addStep(SVN(repourl=Interpolate("https://svn.apache.org/repos/asf/%(src::branch:~couchdb/trunk)s")))
f20.addStep(Compile(command=["./bootstrap"]))
f20.addStep(Compile(command=["./configure", "ERLC_FLAGS=+debug_info"]))
f20.addStep(Compile(command=["make"]))
f20.addStep(Compile(command=["make" , "dev"]))
f20.addStep(Compile(command=["make" , "cover"]))

f20.addStep(DirectoryUpload(slavesrc="cover",
                            masterdest="/tmp/couchdb/",
                            haltOnFailure=True,
))

# If we got this far, then uploading docs to tmp location on master was successful, 
# so now we can delete the previous published docs and move from tmp to published.

f20.addStep(MasterShellCommand(command="""
            rm -rf /x1/buildmaster/master1/public_html/projects/couchdb/cover/;
            cp -r /tmp/couchdb/ /x1/buildmaster/master1/public_html/projects/couchdb/cover/"""))

f20.addStep(MasterShellCommand(command="""
            rm -rf /tmp/couchdb""",
            alwaysRun=True,
))

# Always run the tmp cleanup step, in case of failures part way through uploading etc..

b20 = {'name': "couchdb-coverage",
       'slavename': "bb-vm_ubuntu",
       'builddir': "couchdb-coverage",
       'factory': f20,
       'category': "couchdb-coverage",
       }

c['builders'].append(b20)

f55 = factory.BuildFactory()
f55.addStep(ShellCommand(name="Fix Perms", command=["../fixperms.sh"]))
f55.addStep(SVN(repourl=Interpolate("https://svn.apache.org/repos/asf/%(src::branch:~couchdb/trunk)s")))
f55.addStep(Compile(command=["./bootstrap"]))
f55.addStep(Compile(command=["./configure" , "--prefix=/tmp/couchdb-branch"]))
f55.addStep(Compile(command=["make"]))
f55.addStep(Compile(command=["make" , "dev"]))
f55.addStep(Compile(command=["make" , "check"]))
f55.addStep(Compile(command=["make" , "distcheck"]))

b55 = {'name': "couchdb-branch-0.11.x",
      'slavename': "bb-vm_ubuntu",
      'builddir': "couchdb-branch-0.11.x",
      'factory': f55,
      'category': "couchdb-branch-0.11.x",
      }

c['builders'].append(b55)

#mail status

c['status'].append(mail.MailNotifier(fromaddr="buildbot@apache.org",
                                     extraRecipients=["commits@couchdb.apache.org"],
                                     sendToInterestedUsers=False,
                                     mode="change",
                                     categories=["couchdb-trunk" , "couchdb-coverage", "couchdb-branch-0.11.x"]))

c['status'].append(words.IRC(host="irc.freenode.net", nick="couchbot",
                             allowForce=True,
                             channels=["#couchdb"],
			     notify_events={
			       'successToFailure': 1,
			       'failureToSuccess': 1,
			       },
                             categories=["couchdb-git-trunk" , "couchdb-trunk" , "couchdb-coverage" , "couchdb-branch-0.11.x"]))

