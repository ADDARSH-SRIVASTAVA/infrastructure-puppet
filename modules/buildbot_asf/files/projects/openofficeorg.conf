# This is the config file for the Apache Openoffice project.

# schedulers

c['schedulers'].append(Nightly(name='openoffice-linux64-nightly',
              builderNames=['openoffice-linux64-nightly'],
              branch='openoffice/trunk',
              hour=4,
              minute=10))

c['schedulers'].append(Nightly(name='openoffice-linux64-rat',
              builderNames=['openoffice-linux64-rat'],
              branch='openoffice/trunk',
#              branch='openoffice/branches/AOO410',
#              dayOfWeek=0,
              hour=11,
              minute=55))

c['schedulers'].append(Nightly(name='openoffice-linux64-rat-aoo410',
              builderNames=['openoffice-linux64-rat-aoo410'],
              branch='openoffice/branches/AOO410',
              hour=21,
              minute=12))

c['schedulers'].append(Nightly(name='openoffice-linux32-nightly',
              builderNames=['openoffice-linux32-nightly'],
              branch='openoffice/trunk',
#              branch='openoffice/branches/AOO410',
              hour=2,
              minute=5))

c['schedulers'].append(Nightly(name='openoffice-linux32-snapshot',
              builderNames=['openoffice-linux32-snapshot'],
              branch='openoffice/tags/SNAPSHOT',
              dayOfWeek=0,
              hour=7,
              minute=9))

c['schedulers'].append(Nightly(name='aoo-win7-nightly',
              builderNames=['aoo-win7'],
              branch='openoffice/trunk',
#              branch='openoffice/branches/AOO410',
              properties={'rsync_opts':'--delete'},
              hour=2,
              minute=30))

c['schedulers'].append(Nightly(name='aoo-win7-snapshot',
              builderNames=['aoo-w7snap'],
              branch='openoffice/tags/SNAPSHOT',
              properties={'rsync_opts':'--delete'},
              dayOfWeek=0,
              hour=8,
              minute=30))

c['schedulers'].append(Nightly(name='openoffice-fbsd-nightly',
              builderNames=['openoffice-fbsd-nightly'],
              branch='openoffice/trunk',
              hour=4,
              minute=20))


# helpers

import re

svninfo_re1 = re.compile( "Last Changed Rev: (\d+)")

def svninfo_extractfn( rc, stdout, stderr):
	rev = "UNKNOWN"
	m = svninfo_re1.search( stdout)
	if m:
		rev = m.group( 1)
	return {"got_revision":rev}


# building AOO on Ubuntu Linux 64bit

f_ooo_1 = factory.BuildFactory()
f_ooo_1.addStep(SVN(mode="full", method="copy", repourl=Interpolate("https://svn.apache.org/repos/asf/%(src::branch:~openoffice/trunk)s")))
f_ooo_1.addStep(SetPropertyFromCommand(command="date +%Y-%m-%d_%H:%M:%S", property="today", name="set timestamp"))

f_ooo_1.addStep(Compile(command=["wget" , "-O" , "external/unowinreg/unowinreg.dll" , "http://www.openoffice.org/tools/unowinreg_prebuild/680/unowinreg.dll"],
            name="get unowinreg", haltOnFailure=True, workdir="build/main", description="getting unowinreg.dll", descriptionDone="got unowinreg.dll",
))

f_ooo_1.addStep(Compile(command=["autoconf"], haltOnFailure=True, workdir="build/main", description="autoconf", descriptionDone="autoconf",
            name="autoconf", 
))

f_ooo_1.addStep(Configure(command=['bash', '-ci', WithProperties('''
	./configure \
		--with-jdk-home="/usr/lib/jvm/java-6-sun" \
		--with-epm-url="http://www.msweet.org/files/project2/epm-3.7-source.tar.gz " \
		--enable-verbose \
		--without-stlport \
		--enable-category-b \
		--enable-wiki-publisher \
		--enable-opengl \
		--enable-dbus \
		--enable-gstreamer \
		--enable-bundled-dictionaries \
		--with-package-format="archive rpm deb" \
		--with-build-version="%(today)s - Rev. %(got_revision)s" \
	''')],
            name="configure", haltOnFailure=True, workdir="build/main", description="configuring", descriptionDone="configured",
))

f_ooo_1.addStep(Compile(command=["./bootstrap"], haltOnFailure=True, workdir="build/main", description="bootstrapping", descriptionDone="bootstrapped",
            name="bootstrap", 
))

f_ooo_1.addStep(ShellCommand(command=['bash' , '-ci' , 'source ../LinuxX86-64Env.Set.sh \n build --all --html'],
            name="build --all", haltOnFailure=False, workdir="build/main/instsetoo_native", timeout=12000,
            description="building", descriptionDone="build finished",
))


# Collection of logs and useful bits

# create area for collecting log files on buildslave
f_ooo_1.addStep(ShellCommand(command=['mkdir' , '-p' , 'log/logarch/log'],
            name="collect log files", haltOnFailure=False, workdir="build",
))

# copy the log index to a location relative to where we will put the logs
f_ooo_1.addStep(ShellCommand(command=['bash' , '-ci' , 'cp -fv log/*.html log/logarch/log'],
            name="copy the log index", haltOnFailure=False, workdir="build",
))

# create the directory tree for copying the logs (looking for logs director under the platform tag)
f_ooo_1.addStep(ShellCommand(command=['bash' , '-ci' , 'find main ext_libraries -name logs | grep unxlngx6.pro | xargs -I file mkdir -p log/logarch/file'],
            name="create log tree", haltOnFailure=False, timeout=2400, workdir="build",
))

# copy all of our logs to the staging area in a proper relative location for the log index
f_ooo_1.addStep(ShellCommand(command=['bash' , '-ci' , 'find main ext_libraries -name logs | grep unxlngx6.pro | xargs -I file find file | xargs -I file cp -rfv file log/logarch/file'],
            name="copy logs", haltOnFailure=False, timeout=2400, workdir="build",
))
 
# upload the logs directory
f_ooo_1.addStep(DirectoryUpload(slavesrc="log/logarch", masterdest="/tmp/openoffice/linux64/log", 
            name="upload logs", haltOnFailure=True,))

f_ooo_1.addStep(MasterShellCommand(command="""
            cp -rv /tmp/openoffice/linux64/log/* /x1/buildmaster/master1/public_html/projects/openoffice/buildlogs/linux64/""", 
            name="move logs to web"
))


# Upload install bits
# remove old install bits when not clobbering source tree
f_ooo_1.addStep(ShellCommand(command=['rm' , '-rfv' , 'log/install'],
            name="remove old install bits", haltOnFailure=False, workdir="build",
))

# create a working directory to collect the install bits
f_ooo_1.addStep(ShellCommand(command=['mkdir' , '-pv' , 'log/install'],
            name="create install bits dir", haltOnFailure=False, workdir="build",
))

# copy all of our install bits to the staging area 
f_ooo_1.addStep(ShellCommand(command=['bash' , '-c' , 'find main/instsetoo_native -name *.tar.gz | xargs -I file mv -fv file log/install'],
            name="collect install bits", haltOnFailure=False, workdir="build",
))

# rename the files with the build number in them
f_ooo_1.addStep(ShellCommand(command=['bash' , '-c' , WithProperties("find log/install -name *.tar.gz | sed -e's/.tar.gz//' | xargs -I file mv -v file.tar.gz file_%(today)s_%(got_revision)s.tar.gz")],
            name="rename install bits with build number", haltOnFailure=False, workdir="build",
))

#upload the install directory
f_ooo_1.addStep(DirectoryUpload(slavesrc="log/install", masterdest="/tmp/openoffice/linux64/install", 
            doStepIf=lambda step: step.build.getStatus().getResults() < 2,
            name="upload the install bits", haltOnFailure=True,
))

# Remove any other snapshots before today and insert latest one. 
# Eventually the intent is to keep more copies, disk space and bandwidth permitting
f_ooo_1.addStep(MasterShellCommand(command="""
            stat /tmp/openoffice/linux64/install/* >/dev/null && rm -fv /x1/buildmaster/master1/public_html/projects/openoffice/install/linux64/*
            cp -v /tmp/openoffice/linux64/install/* /x1/buildmaster/master1/public_html/projects/openoffice/install/linux64/""",
            doStepIf=lambda step: step.build.getStatus().getResults() < 2,
            name="mv install bits to web", 
))

# Cleanup tmp
# Always run the tmp cleanup step, in case of failures part way through uploading etc..
f_ooo_1.addStep(MasterShellCommand(command="""
            rm -rf /tmp/openoffice/linux64
            du -k /tmp/openoffice/""",
            name="cleanup tmp", alwaysRun=True,
))

b_ooo_1 = {'name': "openoffice-linux64-nightly",
      'slavename': "tethys_ubuntu",
      'builddir': "openofficeorg-nightly",
      'factory': f_ooo_1,
      'category': "openoffice-nightly",
      }

c['builders'].append(b_ooo_1)
                 



# run RAT scans on AOO source

f_ooo_1r = factory.BuildFactory()
f_ooo_1r.addStep(SVN(mode="full", method="copy", repourl=Interpolate("https://svn.apache.org/repos/asf/%(src::branch:~openoffice/trunk)s")))
f_ooo_1r.addStep( SetPropertyFromCommand( command=["bash", "-c", "svn info ."], 
            extract_fn=svninfo_extractfn, name="get svn info"
))

# RAT reporting. An xml config file on the slave points the rat jar to main/rat-excludes as part of its run.
f_ooo_1r.addStep(ShellCommand(
            command=['bash', '-c', 'ant -f /home/buildslave19/slave19/rat-buildfiles/openofficeorg.xml -lib /home/buildslave19/'],
            description=["RAT Testing"],
            descriptionDone=["RAT Report Complete"],
            name="run RAT test", haltOnFailure=True, timeout=19200
))

f_ooo_1r.addStep(FileUpload(slavesrc="../rat-output.xml",
                       masterdest="/tmp/openoffice/rat-output.xml",
		       name="RAT report upload", haltOnFailure=True,
))

# If we get this far, then the RAT report went fine and it was uploaded to master tmp
# dir without error. So now we can delete any previous report and move from tmp to
# published.

f_ooo_1r.addStep(MasterShellCommand(command="""
            rm -f /x1/buildmaster/master1/public_html/projects/openoffice/rat-output.xml;
            cp /tmp/openoffice/rat-output.xml /x1/buildmaster/master1/public_html/projects/openoffice/rat-output.xml""", 
            name="RAT output to web", 
))

# End of RAT reporting

b_ooo_1r = {'name': "openoffice-linux64-rat",
      'slavename': "tethys_ubuntu",
      'builddir': "openofficeorg-nightly-rat",
      'factory': f_ooo_1r,
      'category': "openoffice-nightly",
      }

c['builders'].append(b_ooo_1r)
                 
# run RAT scans on AOO 410 branch source

f_ooo_1r410 = factory.BuildFactory()
f_ooo_1r410.addStep(SVN(mode="full", method="copy", repourl=Interpolate("https://svn.apache.org/repos/asf/%(src::branch:~openoffice/branches/AOO410)s")))
f_ooo_1r410.addStep( SetPropertyFromCommand( command=["bash", "-c", "svn info ."],
            extract_fn=svninfo_extractfn, name="get svn info"
))

# RAT reporting. An xml config file on the slave points the rat jar to main/rat-excludes as part of its run.
f_ooo_1r410.addStep(ShellCommand(
            command=['bash', '-c', 'ant -f /home/buildslave19/slave19/rat-buildfiles/openofficeorg.xml -lib /home/buildslave19/ -Dsrc-dir=../openofficeorg-nightly-rat-aoo410/build'],
            description=["RAT Testing"],
            descriptionDone=["RAT Report Complete"],
            name="run RAT test", haltOnFailure=True, timeout=19200
))

f_ooo_1r410.addStep(FileUpload(slavesrc="../rat-output.xml",
                       masterdest="/tmp/openoffice/AOO410/rat-output.xml",
                       name="RAT report upload", haltOnFailure=True,
))

# If we get this far, then the RAT report went fine and it was uploaded to master tmp
# dir without error. So now we can delete any previous report and move from tmp to
# published.

f_ooo_1r410.addStep(MasterShellCommand(command="""
            rm -f /x1/buildmaster/master1/public_html/projects/openoffice/AOO410/rat-output.xml;
            cp /tmp/openoffice/AOO410/rat-output.xml /x1/buildmaster/master1/public_html/projects/openoffice/AOO410/rat-output.xml""",
            name="RAT output to web",
))

# End of RAT reporting

b_ooo_1r410 = {'name': "openoffice-linux64-rat-aoo410",
      'slavename': "tethys_ubuntu",
      'builddir': "openofficeorg-nightly-rat-aoo410",
      'factory': f_ooo_1r410,
      'category': "openoffice-nightly",
      }

c['builders'].append(b_ooo_1r410)

# building AOO source on Win7, either
# - a weekly full build, or
# - a nightly incremental build
# depending on whether the property rsync_clean is set to "--delete" or ""
# First lets create a variable to full path of cygwin bash.
winbash = r'C:\cygwin\bin\bash.exe'

f_ooo_w1 = factory.BuildFactory()

# svn under cygwin - as required by windows build
f_ooo_w1.addStep(Compile(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-win7/ ; svn co http://svn.apache.org/repos/asf/openoffice/trunk build_svn'],
#f_ooo_w1.addStep(Compile(command=[winbash , '-cliex',
#            Interpolate('cd /cygdrive/e/slave14/aoo-win7/build_svn && svn switch http://svn.apache.org/repos/asf/%(src::branch:~openoffice/trunk)s ; svn info')],
            name="svn under cygwin", haltOnFailure=True, workdir="build",
            description=["updating","reference source"], descriptionDone=["updated","reference source"],
))
# sync files from svn - deleting all other files for clean build - i.e. clobber
f_ooo_w1.addStep(Compile(command=[winbash , '-cliex', WithProperties('cd /cygdrive/e/slave14/aoo-win7/ && rsync -av %(rsync_opts:-)s build_svn/ build/')],
            name="rsync svn files", haltOnFailure=True, workdir="build",
            description=["updating","build source"], descriptionDone=["updated","build source"],
))
f_ooo_w1.addStep(SetPropertyFromCommand(command="svn info e:\\slave14\\aoo-win7\\build_svn", extract_fn=svninfo_extractfn, 
            name="svn info", 
))

f_ooo_w1.addStep(ShellCommand(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-win7/build/main && cp -arfv ../../main_xtra/* .'],
            name="copy main_extra", haltOnFailure=False, workdir="build/main",
            description=["getting","configure","prereqs"], descriptionDone=["got","configure","prereqs"],
))

f_ooo_w1.addStep(ShellCommand(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-win7/build/main ; "/cygdrive/c/Program Files/Microsoft Visual Studio 9.0/VC/bin/vcvars32.bat" ; autoconf'],
            name="autoconf", haltOnFailure=False, workdir="build/main", description="autoconf", descriptionDone="autoconf",
))

f_ooo_w1.addStep(ShellCommand(command=[winbash , '-cliex', WithProperties('''
	cd /cygdrive/e/slave14/aoo-win7/build/main
	"/cygdrive/c/Progra~1/Microsoft Visual Studio 9.0/VC/bin/vcvars32.bat"
	./configure \
		--enable-verbose \
		--without-stlport \
		--with-dmake-url="http://dmake.apache-extras.org.codespot.com/files/dmake-4.12.tar.bz2" \
		--with-cl-home="/cygdrive/c/Progra~1/Microsoft Visual Studio 9.0/VC" \
		--with-jdk-home="/cygdrive/c/PROGRA~1/Java/jdk1.6.0_30" \
		--with-psdk-home="/cygdrive/c/PROGRA~1/Microsoft SDKs/Windows/v6.1" \
		--with-directx-home="/cygdrive/c/PROGRA~1/Microsoft DirectX SDK (June 2010)" \
		--with-mspdb-path="/cygdrive/c/Progra~1/Microsoft Visual Studio 9.0/Common7/IDE" \
		--with-frame-home="/cygdrive/c/Progra~1/Microsoft SDKs/Windows/v6.1" \
		--with-midl-path="/cygdrive/c/Progra~1/Microsoft SDKs/Windows/v6.1/Bin" \
		--with-asm-home="/cygdrive/c/Progra~1/Microsoft Visual Studio 9.0" \
		--with-csc-path="/cygdrive/c/Progra~1/Microsoft Visual Studio 9.0/SDK/v3.5" \
		--with-ant-home="/cygdrive/c/ant" \
		--with-mozilla-build="/cygdrive/c/mozilla-build" \
		--without-junit \
		--enable-category-b \
		--enable-bundled-dictionaries \
		--with-lang="de en-US" \
		--with-vendor="Apache OpenOffice buildbot" \
		--with-build-version="Rev.%(got_revision)s" \
	''')],
            name="configure", haltOnFailure=False, workdir="build/main", description="configuring", descriptionDone="configured",
))

f_ooo_w1.addStep(ShellCommand(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-win7/build/main ; "/cygdrive/c/Program Files/Microsoft Visual Studio 9.0/VC/bin/vcvars32.bat" ; ./bootstrap'],
            name="bootstrap", haltOnFailure=False, workdir="build/main", description="bootstrapping", descriptionDone="bootstrapped",
))

f_ooo_w1.addStep(ShellCommand(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-win7/build/main ; "/cygdrive/c/Program Files/Microsoft Visual Studio 9.0/VC/bin/vcvars32.bat" ; source winenv.Set.sh ; cd instsetoo_native ; perl $SOLARENV/bin/build.pl --all --html -P2 -- -P2'],
            name="build.pl --all", haltOnFailure=False, workdir="build/main", timeout=12000,
            description="building", descriptionDone="build finished",
))
 
# Collection of logs and useful bits

# create area for collecting log files on buildslave
f_ooo_w1.addStep(ShellCommand(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-win7/build ; mkdir -p log/logarch/log ; rm -rf log/logarch/log/*'],
            name="collect log files", haltOnFailure=False, workdir="build",
))

# copy the log index to a location relative to where we will put the logs
f_ooo_w1.addStep(ShellCommand(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-win7/build ; cp -f log/*.html log/logarch/log'],
            name="copy log index", haltOnFailure=False, workdir="build",
))

# create the directory tree for copying the logs (looking for logs directory under the platform tag)
f_ooo_w1.addStep(ShellCommand(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-win7/build ; find main ext_libraries -name logs | grep wntmsci12.pro | xargs -I file mkdir -p log/logarch/file'],
            name="create log tree", haltOnFailure=False, timeout=2400, workdir="build",
))

# copy all of our logs to the staging area in a proper relative location for the log index
f_ooo_w1.addStep(ShellCommand(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-win7/build ; find main ext_libraries -name logs | grep wntmsci12.pro | xargs -I file find file | xargs -I file cp -rf file log/logarch/file'],
            name="copy logs", haltOnFailure=False, timeout=2400, workdir="build",
))

#upload the logs directory
f_ooo_w1.addStep(DirectoryUpload(slavesrc="log/logarch", masterdest="/tmp/openoffice/win/log", 
            name="upload logs", haltOnFailure=True,
))

f_ooo_w1.addStep(MasterShellCommand(command="""
            cp -r /tmp/openoffice/win/log/* /x1/buildmaster/master1/public_html/projects/openoffice/buildlogs/win/""", 
            name="move logs to web", 
))


# Upload install bits
# Here we upload the artifacts created by the win build
# create a working directory to collect the install bits
f_ooo_w1.addStep(ShellCommand(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-win7/build ; mkdir -p log/install ; rm -rf log/install/*'],
            name="create install bits dir", haltOnFailure=False, workdir="build",
))

# copy all of our install bits to the staging area 
f_ooo_w1.addStep(ShellCommand(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-win7/build ; find main ext_libraries -name *download | grep wntmsci12.pro | xargs -I file find file -type f | xargs -I file mv -f file log/install'],
            name="collect install bits", haltOnFailure=False, workdir="build",
))

# rename the files with the build number in them
f_ooo_w1.addStep(ShellCommand(command=[winbash , '-cliex', WithProperties("cd /cygdrive/e/slave14/aoo-win7/build ; find log/install -name *.exe | sed -e's/\.exe//' | xargs -I file mv -v file.exe file_%(got_revision)s.exe")],
            name="rename install bits with build number", haltOnFailure=False, workdir="build",
))

#upload the install directory
f_ooo_w1.addStep(DirectoryUpload(slavesrc="log\\install", masterdest="/tmp/openoffice/win/install",
            doStepIf=lambda step: step.build.getStatus().getResults() < 2,
            name="upload the install bits", haltOnFailure=True,
))


# Remove any other snapshots before today and insert latest one. 
# Eventually the intent is to keep more copies, disk space and bandwidth permitting
f_ooo_w1.addStep(MasterShellCommand(command="""
            stat /tmp/openoffice/win/install/* >/dev/null && rm -f /x1/buildmaster/master1/public_html/projects/openoffice/install/win/*
            mv -v /tmp/openoffice/win/install/* /x1/buildmaster/master1/public_html/projects/openoffice/install/win/""",
            doStepIf=lambda step: step.build.getStatus().getResults() < 2, 
            name="mv install bits to web", 
))

# Cleanup tmp
# Always run the tmp cleanup step, in case of failures part way through uploading etc..
f_ooo_w1.addStep(MasterShellCommand(command="""
            rm -rf /tmp/openoffice/win
            du -k /tmp/openoffice""",
            name="cleanup tmp", alwaysRun=True,
))

b_ooo_w1 = {'name': "aoo-win7",
      'slavename': "bb-win7",
      'builddir': "aoo-win7",
      'factory': f_ooo_w1,
      'category': "aoo-win7",
      }

c['builders'].append(b_ooo_w1)


# Windows SNAPSHOT build

f_ooo_w2 = factory.BuildFactory()

# svn under cygwin - as required by windows build
f_ooo_w2.addStep(Compile(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-w7snap/ ; svn co http://svn.apache.org/repos/asf/openoffice/tags/SNAPSHOT build_svn'],
# f_ooo_w2.addStep(Compile(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-w7snap/build_svn && svn up ; svn info'],
            name="svn under cygwin", haltOnFailure=True, workdir="build",
            description=["updating","reference source"], descriptionDone=["updated","reference source"],
))
# sync files from svn - deleting all other files for clean build - i.e. clobber
f_ooo_w2.addStep(Compile(command=[winbash , '-cliex', WithProperties('cd /cygdrive/e/slave14/aoo-w7snap/ && rsync -av %(rsync_opts:-)s build_svn/ build/')],
            name="rsync svn files", haltOnFailure=True, workdir="build",
            description=["updating","build source"], descriptionDone=["updated","build source"],
))
f_ooo_w2.addStep(SetPropertyFromCommand(command="svn info e:\\slave14\\aoo-w7snap\\build_svn", extract_fn=svninfo_extractfn, 
            name="svn info", 
))

f_ooo_w2.addStep(ShellCommand(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-w7snap/build/main && cp -arfv ../../main_xtra/* .'],
            name="copy main_xtra", haltOnFailure=False, workdir="build/main",
            description=["getting","configure","prereqs"], descriptionDone=["got","configure","prereqs"],
))

f_ooo_w2.addStep(ShellCommand(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-w7snap/build/main ; "/cygdrive/c/Program Files/Microsoft Visual Studio 9.0/VC/bin/vcvars32.bat" ; autoconf'],
            name="autoconf", haltOnFailure=False, workdir="build/main", description="autoconf", descriptionDone="autoconf",
))

f_ooo_w2.addStep(ShellCommand(command=[winbash , '-cliex', WithProperties('''
	cd /cygdrive/e/slave14/aoo-w7snap/build/main
	"/cygdrive/c/Progra~1/Microsoft Visual Studio 9.0/VC/bin/vcvars32.bat"
	./configure \
		--enable-verbose \
		--without-stlport \
		--with-dmake-url="http://dmake.apache-extras.org.codespot.com/files/dmake-4.12.tar.bz2" \
		--with-cl-home="/cygdrive/c/Progra~1/Microsoft Visual Studio 9.0/VC" \
		--with-jdk-home="/cygdrive/c/PROGRA~1/Java/jdk1.6.0_30" \
		--with-psdk-home="/cygdrive/c/PROGRA~1/Microsoft SDKs/Windows/v6.1" \
		--with-directx-home="/cygdrive/c/PROGRA~1/Microsoft DirectX SDK (June 2010)" \
		--with-mspdb-path="/cygdrive/c/Progra~1/Microsoft Visual Studio 9.0/Common7/IDE" \
		--with-frame-home="/cygdrive/c/Progra~1/Microsoft SDKs/Windows/v6.1" \
		--with-midl-path="/cygdrive/c/Progra~1/Microsoft SDKs/Windows/v6.1/Bin" \
		--with-asm-home="/cygdrive/c/Progra~1/Microsoft Visual Studio 9.0" \
		--with-csc-path="/cygdrive/c/Progra~1/Microsoft Visual Studio 9.0/SDK/v3.5" \
		--with-ant-home="/cygdrive/c/ant" \
		--with-mozilla-build="/cygdrive/c/mozilla-build" \
		--without-junit \
		--enable-category-b \
		--enable-bundled-dictionaries \
                --with-lang="ast bg ca ca-XV cs da de el en-GB en-US es fi fr gd gl he hu it ja km ko lt nb nl pl pt pt-BR ru sk sl sr sv ta th tr zh-CN zh-TW" \
		--with-vendor="Apache OpenOffice buildbot" \
		--with-build-version="Rev.%(got_revision)s" \
	''')],
            name="configure", haltOnFailure=False, workdir="build/main", description="configuring", descriptionDone="configured",
))

f_ooo_w2.addStep(ShellCommand(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-w7snap/build/main ; "/cygdrive/c/Program Files/Microsoft Visual Studio 9.0/VC/bin/vcvars32.bat" ; ./bootstrap'],
            name="bootstrap", haltOnFailure=False, workdir="build/main", timeout=2400, description="bootstrapping", descriptionDone="bootstrapped",
))

f_ooo_w2.addStep(ShellCommand(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-w7snap/build/main ; "/cygdrive/c/Program Files/Microsoft Visual Studio 9.0/VC/bin/vcvars32.bat" ; source winenv.Set.sh ; cd instsetoo_native ; perl $SOLARENV/bin/build.pl --all --html -P2 -- -P2'],
            name="build.pl --all", haltOnFailure=False, workdir="build/main", timeout=12000,
            description="building", descriptionDone="build finished",
))
 
# Collection of logs and useful bits

# create area for collecting log files on buildslave
f_ooo_w2.addStep(ShellCommand(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-w7snap/build ; mkdir -p log/logarch/log ; rm -rf log/logarch/log/*'],
            name="collect log files", haltOnFailure=False, workdir="build",
))

# copy the log index to a location relative to where we will put the logs
f_ooo_w2.addStep(ShellCommand(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-w7snap/build ; cp -f log/*.html log/logarch/log'],
            name="copy the log index", haltOnFailure=False, workdir="build",
))

# create the directory tree for copying the logs (looking for logs director under the platform tag)
f_ooo_w2.addStep(ShellCommand(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-w7snap/build ; find main ext_libraries -name logs | grep wntmsci12.pro | xargs -I file mkdir -p log/logarch/file'],
            name="create log tree", haltOnFailure=False, timeout=2400, workdir="build",
))

# copy all of our logs to the staging area in a proper relative location for the log index
f_ooo_w2.addStep(ShellCommand(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-w7snap/build ; find main ext_libraries -name logs | grep wntmsci12.pro | xargs -I file find file | xargs -I file cp -rf file log/logarch/file'],
            name="copy logs", haltOnFailure=False, timeout=2400, workdir="build",
))
 
#upload the logs directory
f_ooo_w2.addStep(DirectoryUpload(slavesrc="log/logarch", masterdest="/tmp/openoffice/winsnap/log", 
            name="upload logs", haltOnFailure=True,
))

f_ooo_w2.addStep(MasterShellCommand(command="""
            cp -r /tmp/openoffice/winsnap/log/* /x1/buildmaster/master1/public_html/projects/openoffice/buildlogs/winsnap/""", 
            name="move logs to web", 
))


# Upload install bits
# Here we upload the artifacts created by the win build
# create a working directory to collect the install bits
f_ooo_w2.addStep(ShellCommand(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-w7snap/build ; mkdir -p log/install ; rm -rf log/install/*'],
            name="create install bits dir", haltOnFailure=False, workdir="build",
))

# copy all of our install bits to the staging area 
f_ooo_w2.addStep(ShellCommand(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-w7snap/build ; find main/instset* -name "*install*exe" -type f | grep wntmsci12.pro | xargs -I file mv -fv file log/install'],
            name="collect install bits", haltOnFailure=False, workdir="build",
))

# split the install bits so the size of each directory remains under the buildbot DirectoryUpload limit (of 4GB?)
f_ooo_w2.addStep(ShellCommand(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-w7snap/build ; rm -rf log/install2; mkdir log/install2; find log/install -type f | grep "[n-z]\.exe" | xargs -I file mv -v file log/install2/ ; du log/install*'],
            name="split the install bits", haltOnFailure=False, workdir="build",
))

# rename the files with the build number in them
f_ooo_w2.addStep(ShellCommand(command=[winbash , '-cliex', WithProperties("cd /cygdrive/e/slave14/aoo-w7snap/build ; find log/install* -name *.exe | sed -e's/\.exe//' | xargs -I file mv -v file.exe file_%(got_revision)s.exe ; ls -l log/install")],
            name="rename install bits with build number", haltOnFailure=False, workdir="build",
))

#upload the install directories
f_ooo_w2.addStep(DirectoryUpload(slavesrc="log\\install", masterdest="/tmp/openoffice/winsnap/install",
            doStepIf=lambda step: step.build.getStatus().getResults() < 2,
            name="upload the install bits", haltOnFailure=True,
))
f_ooo_w2.addStep(DirectoryUpload(slavesrc="log\\install2", masterdest="/tmp/openoffice/winsnap/install2",
            doStepIf=lambda step: step.build.getStatus().getResults() < 2,
            name="upload the install2 bits", haltOnFailure=True,
))
# move the split files back
f_ooo_w2.addStep(ShellCommand(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-w7snap/build ; mv -v log/install2/* log/install/ ; rmdir log/install2'],
            name="move the split install bits back", haltOnFailure=False, workdir="build",
))


# Remove any other snapshots before today and insert latest one. 
# Eventually the intent is to keep more copies, disk space and bandwidth permitting
f_ooo_w2.addStep(MasterShellCommand(command="""
            stat /tmp/openoffice/winsnap/install*/* >/dev/null && rm -f /x1/buildmaster/master1/public_html/projects/openoffice/install/winsnap/*
            mv -v /tmp/openoffice/winsnap/install*/* /x1/buildmaster/master1/public_html/projects/openoffice/install/winsnap/""",
            doStepIf=lambda step: step.build.getStatus().getResults() < 2,
            name="mv install bits to web", 
))

# Cleanup tmp
# Always run the tmp cleanup step, in case of failures part way through uploading etc..
f_ooo_w2.addStep(MasterShellCommand(command="""
            rm -rf /tmp/openoffice/winsnap
            du -k /tmp/openoffice/""",
            name="cleanup tmp", alwaysRun=True,
))

b_ooo_w2 = {'name': "aoo-w7snap",
      'slavename': "bb-win7",
      'builddir': "aoo-w7snap",
      'factory': f_ooo_w2,
      'category': "aoo-win7",
      }

c['builders'].append(b_ooo_w2)


# Windows Localization build

f_ooo_w4 = factory.BuildFactory()

# svn under cygwin - as required by windows build
# f_ooo_w4.addStep(Compile(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-w7l10n/ ; svn co http://svn.apache.org/repos/asf/openoffice/branches/l10n build_svn'],
f_ooo_w4.addStep(Compile(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-w7l10n/build_svn && svn up ; svn info'],
            name="svn under cygwin", haltOnFailure=True, workdir="build",
            description=["updating","reference source"], descriptionDone=["updated","reference source"],
))
# sync files from svn - deleting all other files for clean build - i.e. clobber
f_ooo_w4.addStep(Compile(command=[winbash , '-cliex', WithProperties('cd /cygdrive/e/slave14/aoo-w7l10n/ && rsync -av %(rsync_opts:-)s build_svn/ build/')],
            name="rsync svn files", haltOnFailure=True, workdir="build",
            description=["updating","build source"], descriptionDone=["updated","build source"],
))
f_ooo_w4.addStep(SetPropertyFromCommand(command="svn info e:\\slave14\\aoo-w7l10n\\build_svn", extract_fn=svninfo_extractfn, 
            name="extract svn info", 
))

f_ooo_w4.addStep(ShellCommand(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-w7l10n/build/main && cp -arfv ../../main_xtra/* .'],
            name="copy main_xtra", haltOnFailure=False, workdir="build/main",
            description=["getting","configure","prereqs"], descriptionDone=["got","configure","prereqs"],
))

f_ooo_w4.addStep(ShellCommand(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-w7l10n/build/main ; "/cygdrive/c/Program Files/Microsoft Visual Studio 9.0/VC/bin/vcvars32.bat" ; autoconf'],
            name="autoconf", haltOnFailure=False, workdir="build/main", description="autoconf", descriptionDone="autoconf",
))

f_ooo_w4.addStep(ShellCommand(command=[winbash , '-cliex', WithProperties('''
	cd /cygdrive/e/slave14/aoo-w7l10n/build/main
	"/cygdrive/c/Progra~1/Microsoft Visual Studio 9.0/VC/bin/vcvars32.bat"
	./configure \
		--enable-verbose \
		--with-dmake-url="http://dmake.apache-extras.org.codespot.com/files/dmake-4.12.tar.bz2" \
		--with-cl-home="/cygdrive/c/Progra~1/Microsoft Visual Studio 9.0/VC" \
		--with-jdk-home="/cygdrive/c/PROGRA~1/Java/jdk1.6.0_30" \
		--with-psdk-home="/cygdrive/c/PROGRA~1/Microsoft SDKs/Windows/v6.1" \
		--with-directx-home="/cygdrive/c/PROGRA~1/Microsoft DirectX SDK (June 2010)" \
		--with-mspdb-path="/cygdrive/c/Progra~1/Microsoft Visual Studio 9.0/Common7/IDE" \
		--with-frame-home="/cygdrive/c/Progra~1/Microsoft SDKs/Windows/v6.1" \
		--with-midl-path="/cygdrive/c/Progra~1/Microsoft SDKs/Windows/v6.1/Bin" \
		--with-asm-home="/cygdrive/c/Progra~1/Microsoft Visual Studio 9.0" \
		--with-csc-path="/cygdrive/c/Progra~1/Microsoft Visual Studio 9.0/SDK/v3.5" \
		--with-ant-home="/cygdrive/c/ant" \
		--with-mozilla-build="/cygdrive/c/mozilla-build" \
		--without-junit \
		--enable-category-b \
		--enable-activex \
        --enable-atl \
		--with-vendor="Apache OpenOffice buildbot" \
		--with-build-version="Rev.%(got_revision)s" \
	''')],
            name="configure", haltOnFailure=False, workdir="build/main", description="configuring", descriptionDone="configured",
))

f_ooo_w4.addStep(ShellCommand(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-w7l10n/build/main ; "/cygdrive/c/Program Files/Microsoft Visual Studio 9.0/VC/bin/vcvars32.bat" ; ./bootstrap'],
            name="bootstrap", haltOnFailure=False, workdir="build/main", timeout=2400, description="bootstrapping", descriptionDone="bootstrapped",
))

f_ooo_w4.addStep(ShellCommand(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-w7l10n/build/main ; "/cygdrive/c/Program Files/Microsoft Visual Studio 9.0/VC/bin/vcvars32.bat" ; source winenv.Set.sh ; cd instsetoo_native ; perl $SOLARENV/bin/build.pl --all --html -P2 -- -P2'],
            name="build.pl --all", haltOnFailure=False, workdir="build/main", timeout=12000,
            description="building", descriptionDone="build finished",
))
 
# Collection of logs and useful bits

# create area for collecting log files on buildslave
f_ooo_w4.addStep(ShellCommand(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-w7l10n/build ; mkdir -p log/logarch/log ; rm -rf log/logarch/log/*'],
            name="collect log files", haltOnFailure=False, workdir="build",
))

# copy the log index to a location relative to where we will put the logs
f_ooo_w4.addStep(ShellCommand(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-w7l10n/build ; cp -f log/*.html log/logarch/log'],
            name="copy the log index", haltOnFailure=False, workdir="build",
))

# create the directory tree for copying the logs (looking for logs director under the platform tag)
f_ooo_w4.addStep(ShellCommand(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-w7l10n/build ; find main ext_libraries -name logs | grep wntmsci12.pro | xargs -I file mkdir -p log/logarch/file'],
            name="create log tree", haltOnFailure=False, timeout=2400, workdir="build",
))

# copy all of our logs to the staging area in a proper relative location for the log index
f_ooo_w4.addStep(ShellCommand(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-w7l10n/build ; find main ext_libraries -name logs | grep wntmsci12.pro | xargs -I file find file | xargs -I file cp -rf file log/logarch/file'],
            name="copy logs", haltOnFailure=False, timeout=2400, workdir="build",
))
 
#upload the logs directory
f_ooo_w4.addStep(DirectoryUpload(slavesrc="log/logarch", masterdest="/tmp/openoffice/w7l10n/log", 
            name="upload logs", haltOnFailure=True,
))

f_ooo_w4.addStep(MasterShellCommand(command="""
            cp -r /tmp/openoffice/w7l10n/log/* /x1/buildmaster/master1/public_html/projects/openoffice/buildlogs/w7l10n/""", 
            name="move logs to web", 
))


# Upload install bits
# Here we upload the artifacts created by the win build
# create a working directory to collect the install bits
f_ooo_w4.addStep(ShellCommand(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-w7l10n/build ; mkdir -p log/install ; rm -rf log/install/*'],
            name="create install bits dir", haltOnFailure=False, workdir="build",
))

# copy all of our install bits to the staging area 
f_ooo_w4.addStep(ShellCommand(command=[winbash , '-cliex', 'cd /cygdrive/e/slave14/aoo-w7l10n/build ; find main ext_libraries -name *download | grep wntmsci12.pro | xargs -I file find file -type f | xargs -I file mv -f file log/install'],
            name="collect install bits", haltOnFailure=False, workdir="build",
))

# rename the files with the build number in them
f_ooo_w4.addStep(ShellCommand(command=[winbash , '-cliex', WithProperties("cd /cygdrive/e/slave14/aoo-w7l10n/build ; find log/install -name *.exe | sed -e's/\.exe//' | xargs -I file mv -v file.exe file_%(got_revision)s.exe")],
            name="rename install bits with build number", haltOnFailure=False, workdir="build",
))

#upload the install directory
f_ooo_w4.addStep(DirectoryUpload(slavesrc="log\\install", masterdest="/tmp/openoffice/w7l10n/install",
            doStepIf=lambda step: step.build.getStatus().getResults() < 2,
            name="upload the install bits", haltOnFailure=True,
))


# Remove any other snapshots before today and insert latest one. 
# Eventually the intent is to keep more copies, disk space and bandwidth permitting
f_ooo_w4.addStep(MasterShellCommand(command="""
            stat /tmp/openoffice/w7l10n/install/* >/dev/null && rm -f /x1/buildmaster/master1/public_html/projects/openoffice/install/w7l10n/*
            mv -v /tmp/openoffice/w7l10n/install/* /x1/buildmaster/master1/public_html/projects/openoffice/install/w7l10n/""",
            doStepIf=lambda step: step.build.getStatus().getResults() < 2,
            name="mv install bits to web", 
))

# Cleanup tmp
# Always run the tmp cleanup step, in case of failures part way through uploading etc..
f_ooo_w4.addStep(MasterShellCommand(command="""
            rm -rf /tmp/openoffice/w7l10n
            du -k /tmp/openoffice/""",
            name="cleanup tmp", alwaysRun=True,
))

b_ooo_w4 = {'name': "aoo-w7l10n",
      'slavename': "bb-win7",
      'builddir': "aoo-w7l10n",
      'factory': f_ooo_w4,
      'category': "aoo-win7",
      }

# c['builders'].append(b_ooo_w4)


# building AOO on Ubuntu Linux 32bit

f_ooo_3 = factory.BuildFactory()
f_ooo_3.addStep(SVN(mode="incremental", timeout=1800, repourl=Interpolate("https://svn.apache.org/repos/asf/%(src::branch:~openoffice/trunk)s")))
f_ooo_3.addStep(SetPropertyFromCommand(command="date +%Y-%m-%d_%H:%M:%S", property="today", name="set timestamp"))

f_ooo_3.addStep(Compile(command=["wget" , "-O" , "external/unowinreg/unowinreg.dll" , "http://www.openoffice.org/tools/unowinreg_prebuild/680/unowinreg.dll"],
            name="get unowinreg", haltOnFailure=True, workdir="build/main", description="getting unowinreg.dll", descriptionDone="got unowinreg.dll",
))

f_ooo_3.addStep(Compile(command=["autoconf"], haltOnFailure=True, workdir="build/main", description="autoconf", descriptionDone="autoconf",
            name="autoconf", 
))

f_ooo_3.addStep(Configure(command=['bash', '-ci', WithProperties('''
	./configure \
		--with-jdk-home="/usr/lib/jvm/java-6-openjdk-i386" \
		--with-epm-url="http://www.msweet.org/files/project2/epm-3.7-source.tar.gz " \
		--with-dmake-url="http://dmake.apache-extras.org.codespot.com/files/dmake-4.12.tar.bz2" \
		--enable-verbose \
		--without-stlport \
		--enable-category-b \
		--enable-opengl \
		--enable-dbus \
		--enable-gstreamer \
		--with-package-format="archive rpm deb" \
		--with-build-version="%(today)s-Rev.%(got_revision)s" \
	''')],
            name="configure", haltOnFailure=False, workdir="build/main", description="configuring", descriptionDone="configured",
))


f_ooo_3.addStep(Compile(command=['bash' , '-ci' , './bootstrap'], 
            name="bootstrap", haltOnFailure=True, workdir="build/main", description="bootstrapping", descriptionDone="bootstrapped",
))

f_ooo_3.addStep(ShellCommand(command=['bash' , '-ci' , 'source ../LinuxX86Env.Set.sh \n build --all --html -P4 -- -P4'],
            name="build --all", haltOnFailure=False, workdir="build/main/instsetoo_native", timeout=12000,
            description="building", descriptionDone="build finished",
))

# Collection of logs and useful bits

# create area for collecting log files on buildslave
f_ooo_3.addStep(ShellCommand(command=['mkdir' , '-p' , 'log/logarch/log'],
            name="collect log files", haltOnFailure=False, workdir="build",
))

# copy the log index to a location relative to where we will put the logs
f_ooo_3.addStep(ShellCommand(command=['bash' , '-c' , 'cp -fv log/*.html log/logarch/log'],
            name="copy the log index", haltOnFailure=False, workdir="build",
))

# create the directory tree for copying the logs (looking for logs director under the platform tag)
f_ooo_3.addStep(ShellCommand(command=['bash' , '-c' , 'find main ext_libraries -name logs | grep unxlngi6.pro | xargs -I file mkdir -p log/logarch/file'],
            name="create log tree", haltOnFailure=False, timeout=2400, workdir="build",
))

# copy all of our logs to the staging area in a proper relative location for the log index
f_ooo_3.addStep(ShellCommand(command=['bash' , '-c' , 'find main ext_libraries -name logs | grep unxlngi6.pro | xargs -I file find file | xargs -I file cp -rfv file log/logarch/file'],
            name="copy logs", haltOnFailure=False, timeout=2400, workdir="build",
))
 
# upload the logs directory
f_ooo_3.addStep(DirectoryUpload(slavesrc="log/logarch", masterdest="/tmp/openoffice/linux32/log", 
            name="upload logs", haltOnFailure=True,
))

f_ooo_3.addStep(MasterShellCommand(command="""
            cp -rv /tmp/openoffice/linux32/log/* /x1/buildmaster/master1/public_html/projects/openoffice/buildlogs/linux32/""", 
            name="move logs to web", 
))

# Upload install bits
# remove old install bits when not clobbering source tree
f_ooo_3.addStep(ShellCommand(command=['rm' , '-rfv' , 'log/install'],
            name="remove old install bits", haltOnFailure=False, workdir="build",
))

# create a working directory to collect the install bits
f_ooo_3.addStep(ShellCommand(command=['mkdir' , '-p' , 'log/install'],
            name="create install bits dir", haltOnFailure=False, workdir="build",
))

# copy all of our install bits to the staging area 
f_ooo_3.addStep(ShellCommand(command=['bash' , '-c' , 'find main/instsetoo_native -name *.tar.gz | xargs -I file mv -fv file log/install'],
            name="collect install bits", haltOnFailure=False, workdir="build",
))

# rename the files with the build number in them
f_ooo_3.addStep(ShellCommand(command=['bash' , '-c' , WithProperties("find log/install -name *.tar.gz | sed -e's/.tar.gz//' | xargs -I file mv -v file.tar.gz file_%(today)s_%(got_revision)s.tar.gz")],
            name="rename install bits with build number", haltOnFailure=False, workdir="build",
))

#upload the install directory
f_ooo_3.addStep(DirectoryUpload(slavesrc="log/install", masterdest="/tmp/openoffice/linux32/install", 
            doStepIf=lambda step: step.build.getStatus().getResults() < 2,
            name="upload the install bits", haltOnFailure=True,
))

f_ooo_3.addStep(MasterShellCommand(command="""
            stat /tmp/openoffice/linux32/install/* >/dev/null && rm -fv /x1/buildmaster/master1/public_html/projects/openoffice/install/linux32/*
            mv -v /tmp/openoffice/linux32/install/* /x1/buildmaster/master1/public_html/projects/openoffice/install/linux32/""",
            doStepIf=lambda step: step.build.getStatus().getResults() < 2,
            name="mv install bits to web", 
))


# Cleanup tmp
# Always run the tmp cleanup step, in case of failures part way through uploading etc..
f_ooo_3.addStep(MasterShellCommand(command="""
            rm -rf /tmp/openoffice/linux32
            du -k /tmp/openoffice/""",
            name="cleanup tmp", alwaysRun=True,
))


b_ooo_3 = {'name': "openoffice-linux32-nightly",
      'slavename': "bb-vm2_ubuntu_32bit",
      'builddir': "openoffice-linux32-nightly",
      'factory': f_ooo_3,
      'category': "openoffice-linux32-nightly",
      }

c['builders'].append(b_ooo_3)

# building AOO's SNAPSHOT tag on Ubuntu Linux 32bit

f_ooo_4 = factory.BuildFactory()
f_ooo_4.addStep(SVN(mode="full", method="copy", repourl=Interpolate("https://svn.apache.org/repos/asf/%(src::branch:~openoffice/tags/SNAPSHOT)s")))
f_ooo_4.addStep(SetPropertyFromCommand(command="date +%Y-%m-%d_%H:%M:%S", property="today", name="set timestamp"))

f_ooo_4.addStep(Compile(command=["wget" , "-O" , "external/unowinreg/unowinreg.dll" , "http://www.openoffice.org/tools/unowinreg_prebuild/680/unowinreg.dll"],
            name="get unowinreg", haltOnFailure=True, workdir="build/main", description="getting unowinreg.dll", descriptionDone="got unowinreg.dll",
))

f_ooo_4.addStep(Compile(command=["autoconf"], haltOnFailure=True, workdir="build/main", description="autoconf", descriptionDone="autoconf",
            name="autoconf", 
))

f_ooo_4.addStep(Configure(command=['bash', '-ci', WithProperties('''
	./configure \
		--with-jdk-home="/usr/lib/jvm/java-6-openjdk" \
		--with-epm-url="http://www.msweet.org/files/project2/epm-3.7-source.tar.gz " \
		--with-dmake-url="http://dmake.apache-extras.org.codespot.com/files/dmake-4.12.tar.bz2" \
		--enable-verbose \
		--without-stlport \
		--enable-category-b \
		--enable-opengl \
		--enable-dbus \
		--enable-gstreamer \
 		--with-package-format="deb rpm" \
 		--enable-bundled-dictionaries \
 		--with-lang="ast bg ca ca-XV cs da de el en-GB en-US es fi fr gd gl he hu it ja km ko lt nb nl pl pt pt-BR ru sk sl sr sv ta th tr vi zh-CN zh-TW eu hi id kk" \
		--with-vendor="Apache OpenOffice buildbot" \
		--with-build-version="%(today)s-Rev.%(got_revision)s" \
	''')],
            name="configure", haltOnFailure=False, workdir="build/main", description="configuring", descriptionDone="configured",
))

f_ooo_4.addStep(Compile(command=['bash' , '-ci' , './bootstrap'], 
            name="bootstrap", haltOnFailure=True, workdir="build/main", description="bootstrapping", descriptionDone="bootstrapped",
))

f_ooo_4.addStep(ShellCommand(command=['bash' , '-ci' , 'source ../LinuxX86Env.Set.sh \n build --all --html'],
            name="build --all", haltOnFailure=False, workdir="build/main/instsetoo_native", timeout=12000,
            description="building", descriptionDone="build finished",
))

# Collection of logs and useful bits

# create area for collecting log files on buildslave
f_ooo_4.addStep(ShellCommand(command=['mkdir' , '-p' , 'log/logarch/log'],
            name="collect log files", haltOnFailure=False, workdir="build",
))

# copy the log index to a location relative to where we will put the logs
f_ooo_4.addStep(ShellCommand(command=['bash' , '-c' , 'cp -fv log/*.html log/logarch/log'],
            name="copy the log index", haltOnFailure=False, workdir="build",
))

# create the directory tree for copying the logs (looking for logs director under the platform tag)
f_ooo_4.addStep(ShellCommand(command=['bash' , '-c' , 'find main ext_libraries -name logs | grep unxlngi6.pro | xargs -I file mkdir -p log/logarch/file'],
            name="create log tree", haltOnFailure=False, timeout=2400, workdir="build",
))

# copy all of our logs to the staging area in a proper relative location for the log index
f_ooo_4.addStep(ShellCommand(command=['bash' , '-c' , 'find main ext_libraries -name logs | grep unxlngi6.pro | xargs -I file find file | xargs -I file cp -rfv file log/logarch/file'],
            name="copy logs", haltOnFailure=False, timeout=2400, workdir="build",
))

# upload the logs directory
f_ooo_4.addStep(DirectoryUpload(slavesrc="log/logarch", masterdest="/tmp/openoffice/linsnap/log", 
            name="upload logs", haltOnFailure=True,
))

f_ooo_4.addStep(MasterShellCommand(command="""
            cp -rv /tmp/openoffice/linsnap/log/* /x1/buildmaster/master1/public_html/projects/openoffice/buildlogs/linsnap/""", 
            name="move logs to web", 
))


# Upload install bits
# remove old install bits when not clobbering source tree
f_ooo_4.addStep(ShellCommand(command=['rm' , '-rfv' , 'log/install'],
            name="remove old install bits", haltOnFailure=False, workdir="build",
))

# create a working directory to collect the install bits
f_ooo_4.addStep(ShellCommand(command=['mkdir' , '-p' , 'log/install'],
            name="create install bits dir", haltOnFailure=False, workdir="build",
))

# copy all of our install bits to the staging area 
f_ooo_4.addStep(ShellCommand(command=['bash' , '-c' , 'find main/instsetoo_native -name *.tar.gz | xargs -I file mv -fv file log/install'],
            name="collect install bits", haltOnFailure=False, workdir="build",
))

# split the install bits so the size of each directory remains under the buildbot DirectoryUpload limit (of 4GB?)
f_ooo_4.addStep(ShellCommand(command=['bash', '-c', 'rm -rf log/install2; mkdir log/install2; find log/install -type f | grep "install.deb_[h-z].*\.tar.gz" | xargs -I file mv -v file log/install2/ ; du log/install*'],
            name="split off the install2 bits", haltOnFailure=False, workdir="build",
))
f_ooo_4.addStep(ShellCommand(command=['bash', '-c', 'rm -rf log/install3; mkdir log/install3; find log/install -type f | grep "install.rpm_[h-z].*\.tar.gz" | xargs -I file mv -v file log/install3/ ; du log/install*'],
            name="split off the install3 bits", haltOnFailure=False, workdir="build",
))

# rename the files with the build number in them
f_ooo_4.addStep(ShellCommand(command=['bash' , '-c' , WithProperties("find log/install* -name *.tar.gz | sed -e's/.tar.gz//' | xargs -I file mv -v file.tar.gz file_%(today)s_%(got_revision)s.tar.gz")],
            name="rename install bits with build number", haltOnFailure=False, workdir="build",
))

#upload the install directories
f_ooo_4.addStep(DirectoryUpload(slavesrc="log/install", masterdest="/tmp/openoffice/linsnap/install", 
            doStepIf=lambda step: step.build.getStatus().getResults() < 2,
            name="upload the install bits", haltOnFailure=True,
))
f_ooo_4.addStep(DirectoryUpload(slavesrc="log/install2", masterdest="/tmp/openoffice/linsnap/install", 
            doStepIf=lambda step: step.build.getStatus().getResults() < 2,
            name="upload the install2 bits", haltOnFailure=True,
))
f_ooo_4.addStep(DirectoryUpload(slavesrc="log/install3", masterdest="/tmp/openoffice/linsnap/install", 
            doStepIf=lambda step: step.build.getStatus().getResults() < 2,
            name="upload the install3 bits", haltOnFailure=True,
))
# move the split-off install bits back
f_ooo_4.addStep(ShellCommand(command=['bash', '-c', 'mv -v log/install2/* log/install3/* log/install/'],
            name="move the split install bits back", haltOnFailure=False, workdir="build",
))

f_ooo_4.addStep(MasterShellCommand(command="""
            stat /tmp/openoffice/linsnap/install/* >/dev/null && rm -fv /x1/buildmaster/master1/public_html/projects/openoffice/install/linsnap/*
            mv -v /tmp/openoffice/linsnap/install/* /x1/buildmaster/master1/public_html/projects/openoffice/install/linsnap/""",
            doStepIf=lambda step: step.build.getStatus().getResults() < 2,
            name="mv install bits to web", 
))

# Cleanup tmp
# Always run the tmp cleanup step, in case of failures part way through uploading etc..
f_ooo_4.addStep(MasterShellCommand(command="""
            rm -rf /tmp/openoffice/linsnap
            du -k /tmp/openoffice/""",
            name="cleanup tmp", alwaysRun=True,
))


b_ooo_4 = {'name': "openoffice-linux32-snapshot",
      'slavename': "bb-vm3_ubuntu_32bit",
      'builddir': "openoffice-linux32-snapshot",
      'factory': f_ooo_4,
      'category': "openoffice-linux32",
      }

c['builders'].append(b_ooo_4)

# building AOO's "gbuild" branch on Ubuntu Linux 32bit

f_ooo_5 = factory.BuildFactory()
f_ooo_5.addStep(SVN(mode="full", method="copy", repourl=Interpolate("https://svn.apache.org/repos/asf/%(src::branch:~openoffice/branches/gbuild)s")))
f_ooo_5.addStep(SetPropertyFromCommand(command="date +%Y-%m-%d_%H:%M:%S", property="today", name="set timestamp"))

f_ooo_5.addStep(Compile(command=["wget" , "-O" , "external/unowinreg/unowinreg.dll" , "http://www.openoffice.org/tools/unowinreg_prebuild/680/unowinreg.dll"],
            name="get unowinreg", haltOnFailure=True, workdir="build/main", description="getting unowinreg.dll", descriptionDone="got unowinreg.dll",
))

f_ooo_5.addStep(Compile(command=["autoconf"], haltOnFailure=True, workdir="build/main", description="autoconf", descriptionDone="autoconf",
            name="autoconf", 
))

f_ooo_5.addStep(Configure(command=['bash', '-ci', WithProperties('''
	./configure \
		--with-jdk-home="/usr/lib/jvm/java-6-openjdk" \
		--with-epm-url="http://www.msweet.org/files/project2/epm-3.7-source.tar.gz " \
		--with-dmake-url="http://dmake.apache-extras.org.codespot.com/files/dmake-4.12.tar.bz2" \
		--enable-verbose \
		--enable-category-b \
		--enable-opengl \
		--enable-dbus \
		--enable-gstreamer \
		--with-package-format="archive" \
		--with-vendor="Apache OpenOffice buildbot" \
		--with-build-version="%(today)s-Rev.%(got_revision)s" \
	''')],
            name="configure", haltOnFailure=False, workdir="build/main", description="configuring", descriptionDone="configured",
))


f_ooo_5.addStep(Compile(command=['bash' , '-ci' , './bootstrap'], 
            name="bootstrap", haltOnFailure=True, workdir="build/main", description="bootstrapping", descriptionDone="bootstrapped",
))

f_ooo_5.addStep(ShellCommand(command=['bash' , '-ci' , 'source ../LinuxX86Env.Set.sh \n build --all --html -P4 -- -P4'],
            name="build --all", haltOnFailure=False, workdir="build/main/instsetoo_native", timeout=12000,
            description="building", descriptionDone="build finished",
))

# Collection of logs and useful bits

# create area for collecting log files on buildslave
f_ooo_5.addStep(ShellCommand(command=['mkdir' , '-p' , 'log/logarch/log'],
            name="collect log files", haltOnFailure=False, workdir="build",
))

# copy the log index to a location relative to where we will put the logs
f_ooo_5.addStep(ShellCommand(command=['bash' , '-c' , 'cp -fv log/*.html log/logarch/log'],
            name="copy the log index", haltOnFailure=False, workdir="build",
))

# create the directory tree for copying the logs (looking for logs director under the platform tag)
f_ooo_5.addStep(ShellCommand(command=['bash' , '-c' , 'find main ext_libraries -name logs | grep unxlngi6.pro | xargs -I file mkdir -p log/logarch/file'],
            name="create log tree", haltOnFailure=False, timeout=2400, workdir="build",
))

# copy all of our logs to the staging area in a proper relative location for the log index
f_ooo_5.addStep(ShellCommand(command=['bash' , '-c' , 'find main ext_libraries -name logs | grep unxlngi6.pro | xargs -I file find file | xargs -I file cp -rfv file log/logarch/file'],
            name="copy logs", haltOnFailure=False, timeout=2400, workdir="build",
))
 
# upload the logs directory
f_ooo_5.addStep(DirectoryUpload(slavesrc="log/logarch", masterdest="/tmp/openoffice/gbuild/log", 
            name="upload logs", haltOnFailure=True,
))

f_ooo_5.addStep(MasterShellCommand(command="""
            cp -rv /tmp/openoffice/gbuild/log/* /x1/buildmaster/master1/public_html/projects/openoffice/buildlogs/gbuild/""", 
            name="move logs to web", 
))


# Upload install bits
# remove old install bits when not clobbering source tree
f_ooo_5.addStep(ShellCommand(command=['rm' , '-rfv' , 'log/install'],
            name="remove old install bits", haltOnFailure=False, workdir="build",
))

# create a working directory to collect the install bits
f_ooo_5.addStep(ShellCommand(command=['mkdir' , '-p' , 'log/install'],
            name="create install bits dir", haltOnFailure=False, workdir="build",
))

# copy all of our install bits to the staging area 
f_ooo_5.addStep(ShellCommand(command=['bash' , '-c' , 'find main/instsetoo_native -name *.tar.gz | xargs -I file mv -fv file log/install'],
            name="collect install bits", haltOnFailure=False, workdir="build",
))

# rename the files with the build number in them
f_ooo_5.addStep(ShellCommand(command=['bash' , '-c' , WithProperties("find log/install -name *.tar.gz | sed -e's/.tar.gz//' | xargs -I file mv -v file.tar.gz file_%(today)s_%(got_revision)s.tar.gz")],
            name="rename install bits with build number", haltOnFailure=False, workdir="build",
))

#upload the install directory
f_ooo_5.addStep(DirectoryUpload(slavesrc="log/install", masterdest="/tmp/openoffice/gbuild/install", 
            doStepIf=lambda step: step.build.getStatus().getResults() < 2,
            name="upload the install bits", haltOnFailure=True,
))

f_ooo_5.addStep(MasterShellCommand(command="""
            stat /tmp/openoffice/gbuild/install/* >/dev/null && rm -fv /x1/buildmaster/master1/public_html/projects/openoffice/install/gbuild/*
            mv -v /tmp/openoffice/gbuild/install/* /x1/buildmaster/master1/public_html/projects/openoffice/install/gbuild/""",
            doStepIf=lambda step: step.build.getStatus().getResults() < 2,
            name="mv install bits to web", 
))


# Cleanup tmp
# Always run the tmp cleanup step, in case of failures part way through uploading etc..
f_ooo_5.addStep(MasterShellCommand(command="""
            rm -rf /tmp/openoffice/gbuild""",
            name="cleanup tmp", alwaysRun=True,
))


b_ooo_5 = {'name': "openoffice-linux32-gbuild",
      'slavename': "bb-vm2_ubuntu_32bit",
      'builddir': "openoffice-linux32-gbuild",
      'factory': f_ooo_5,
      'category': "openoffice-linux32",
      }

# c['builders'].append(b_ooo_5)



# building AOO's "l10n" branch on Ubuntu Linux 32bit

f_ooo_7 = factory.BuildFactory()
f_ooo_7.addStep(SVN(mode="full", method="copy", repourl=Interpolate("https://svn.apache.org/repos/asf/%(src::branch:~openoffice/branches/l10n)s")))
f_ooo_7.addStep(SetPropertyFromCommand(command="date +%Y-%m-%d_%H:%M:%S", property="today", name="set timestamp"))

f_ooo_7.addStep(Compile(command=["wget" , "-O" , "external/unowinreg/unowinreg.dll" , "http://www.openoffice.org/tools/unowinreg_prebuild/680/unowinreg.dll"],
            name="get unowinreg", haltOnFailure=True, workdir="build/main", description="getting unowinreg.dll", descriptionDone="got unowinreg.dll",
))

f_ooo_7.addStep(Compile(command=["autoconf"], haltOnFailure=True, workdir="build/main", description="autoconf", descriptionDone="autoconf",
            name="autoconf", 
))

f_ooo_7.addStep(Configure(command=['bash', '-ci', WithProperties('''
	./configure \
		--with-jdk-home="/usr/lib/jvm/java-6-openjdk" \
		--with-epm-url="http://www.msweet.org/files/project2/epm-3.7-source.tar.gz " \
		--with-dmake-url="http://dmake.apache-extras.org.codespot.com/files/dmake-4.12.tar.bz2" \
		--enable-verbose \
		--enable-category-b \
		--enable-opengl \
		--enable-dbus \
		--enable-gstreamer \
		--enable-bundled-dictionaries \
		--with-lang="ast bg ca ca-XV cs da de el en-GB en-US es fi fr gd gl he hu it ja km ko lt nb nl pl pt pt-BR ru sk sl sr sv ta th tr vi zh-CN zh-TW" \
		--with-package-format="archive" \
		--with-vendor="Apache OpenOffice buildbot" \
		--with-build-version="%(today)s-Rev.%(got_revision)s" \
	''')],
            name="configure", haltOnFailure=False, workdir="build/main", description="configuring", descriptionDone="configured",
))


f_ooo_7.addStep(Compile(command=['bash' , '-ci' , './bootstrap'], 
            name="bootstrap", haltOnFailure=True, workdir="build/main", description="bootstrapping", descriptionDone="bootstrapped",
))

f_ooo_7.addStep(ShellCommand(command=['bash' , '-ci' , 'source ../LinuxX86Env.Set.sh \n build --all --html -P4 -- -P4'],
            name="build --all", haltOnFailure=False, workdir="build/main/instsetoo_native", timeout=12000,
            description="building", descriptionDone="build finished",
))

# Collection of logs and useful bits

# create area for collecting log files on buildslave
f_ooo_7.addStep(ShellCommand(command=['mkdir' , '-p' , 'log/logarch/log'],
            name="collect log files", haltOnFailure=False, workdir="build",
))

# copy the log index to a location relative to where we will put the logs
f_ooo_7.addStep(ShellCommand(command=['bash' , '-c' , 'cp -fv log/*.html log/logarch/log'],
            name="copy the log index", haltOnFailure=False, workdir="build",
))

# create the directory tree for copying the logs (looking for logs director under the platform tag)
f_ooo_7.addStep(ShellCommand(command=['bash' , '-c' , 'find main ext_libraries -name logs | grep unxlngi6.pro | xargs -I file mkdir -p log/logarch/file'],
            name="create log tree", haltOnFailure=False, timeout=2400, workdir="build",
))

# copy all of our logs to the staging area in a proper relative location for the log index
f_ooo_7.addStep(ShellCommand(command=['bash' , '-c' , 'find main ext_libraries -name logs | grep unxlngi6.pro | xargs -I file find file | xargs -I file cp -rfv file log/logarch/file'],
            name="copy logs", haltOnFailure=False, timeout=2400, workdir="build",
))
 
# upload the logs directory
f_ooo_7.addStep(DirectoryUpload(slavesrc="log/logarch", masterdest="/tmp/openoffice/l10n/log", 
            name="upload logs", haltOnFailure=True,
))

f_ooo_7.addStep(MasterShellCommand(command="""
            cp -rv /tmp/openoffice/l10n/log/* /x1/buildmaster/master1/public_html/projects/openoffice/buildlogs/l10n/""", 
            name="move logs to web", 
))


# Upload install bits
# remove old install bits when not clobbering source tree
f_ooo_7.addStep(ShellCommand(command=['rm' , '-rfv' , 'log/install'],
            name="remove old install bits", haltOnFailure=False, workdir="build",
))

# create a working directory to collect the install bits
f_ooo_7.addStep(ShellCommand(command=['mkdir' , '-p' , 'log/install'],
            name="create install bits dir", haltOnFailure=False, workdir="build",
))

# copy all of our install bits to the staging area 
f_ooo_7.addStep(ShellCommand(command=['bash' , '-c' , 'find main/instsetoo_native -name *.tar.gz | xargs -I file mv -fv file log/install'],
            name="collect install bits", haltOnFailure=False, workdir="build",
))

# rename the files with the build number in them
f_ooo_7.addStep(ShellCommand(command=['bash' , '-c' , WithProperties("find log/install -name *.tar.gz | sed -e's/.tar.gz//' | xargs -I file mv -v file.tar.gz file_%(today)s_%(got_revision)s.tar.gz")],
            name="rename install bits with build number", haltOnFailure=False, workdir="build",
))

#upload the install directory
f_ooo_7.addStep(DirectoryUpload(slavesrc="log/install", masterdest="/tmp/openoffice/l10n/install", 
			doStepIf=lambda step: step.build.getStatus().getResults() < 2,
			name="upload the install bits", haltOnFailure=True,
))

f_ooo_7.addStep(MasterShellCommand(command="""
            stat /tmp/openoffice/l10n/install/* >/dev/null && rm -fv /x1/buildmaster/master1/public_html/projects/openoffice/install/l10n/*
            mv -v /tmp/openoffice/l10n/install/* /x1/buildmaster/master1/public_html/projects/openoffice/install/l10n/""",
			doStepIf=lambda step: step.build.getStatus().getResults() < 2,
            name="mv install bits to web", 
))


# Cleanup tmp
# Always run the tmp cleanup step, in case of failures part way through uploading etc..
f_ooo_7.addStep(MasterShellCommand(command="""
            rm -rf /tmp/openoffice/l10n""",
            name="cleanup tmp", alwaysRun=True,
))


b_ooo_7 = {'name': "openoffice-linux32-l10n",
      'slavename': "bb-vm2_ubuntu_32bit",
      'builddir': "openoffice-linux32-l10n",
      'factory': f_ooo_7,
      'category': "openoffice-linux32",
      }

#c['builders'].append(b_ooo_7)

# building AOO source on FreeBSD 64bit

f_ooo_bsd1 = factory.BuildFactory()
f_ooo_bsd1.addStep(SVN(mode="full", method="copy", repourl=Interpolate("https://svn.apache.org/repos/asf/%(src::branch:~openoffice/trunk)s")))
f_ooo_bsd1.addStep(SetPropertyFromCommand(command="date +%Y-%m-%d_%H:%M:%S", property="today", name="set timestamp"))

f_ooo_bsd1.addStep(Compile(command=["autoconf"], haltOnFailure=True, workdir="build/main", description="autoconf", descriptionDone="autoconf",
            name="autoconf", 
))

# temporarily removing these config options
#		--enable-opengl \
#		--enable-dbus \
#		--enable-gstreamer \
#		--disable-mozilla \
#		--with-system-hunspell \

f_ooo_bsd1.addStep( ShellCommand( command=['sh', '-cvi', WithProperties( (
        'CPP=clang-cpp35'
        ' && CC=clang35'
        ' && CXX=clang++35'
        ' && export CPP CC CXX'
        ' && ./configure'
        ' --with-jdk-home=/usr/local/openjdk6'
        ' --with-gperf=/usr/local/bin/gperf'
        ' --with-gnu-patch=/usr/local/bin/gpatch'
        ' --x-includes=/usr/local/include'
        ' --x-libraries=/usr/local/lib'
        ' --disable-gconf'
        ' --disable-gnome-vfs'
        ' --without-junit'
        ' --with-epm-url=http://www.msweet.org/files/project2/epm-3.7-source.tar.gz'
        ' --with-dmake-url=http://dmake.apache-extras.org.codespot.com/files/dmake-4.12.tar.bz2'
        ' --enable-verbose'
        ' --without-stlport'
        ' --enable-category-b'
        ' --disable-odk'
        ' --with-system-zlib'
        ' --with-system-stdlibs'
        ' --disable-gstreamer'
        ' --with-system-libxml'
        ' --with-system-openssl'
        ' --with-package-format=archive'
        ' --with-build-version="%(today)s-Rev.%(got_revision)s"'))],
            name="configure", haltOnFailure=False, workdir="build/main", description="configuring", descriptionDone="configured",
))


f_ooo_bsd1.addStep(ShellCommand(command=['sh' , '-cvi' , './bootstrap'], 
            name="bootstrap", haltOnFailure=True, workdir="build/main", description="bootstrapping", descriptionDone="bootstrapped",
))

f_ooo_bsd1.addStep(ShellCommand(command=['sh' , '-cvi' , '. ../FreeBSDAMDEnv.Set.sh && LIBINTL_PREFIX=/usr/local && export LIBINTL_PREFIX && perl $SOLARENV/bin/build.pl --all --html'],
            name="build --all", haltOnFailure=False, workdir="build/main/instsetoo_native", timeout=12000,
            description="building", descriptionDone="build finished",
))

# Collection of logs and useful bits

# create area for collecting log files on buildslave
f_ooo_bsd1.addStep(ShellCommand(command=['mkdir' , '-p' , 'log/logarch/log'],
            name="collect log files", haltOnFailure=False, workdir="build",
))

# copy the log index to a location relative to where we will put the logs
f_ooo_bsd1.addStep(ShellCommand(command=['/usr/local/bin/bash' , '-c' , 'cp -fv log/*.html log/logarch/log'],
            name="copy the log index", haltOnFailure=False, workdir="build",
))

# create the directory tree for copying the logs (looking for logs director under the platform tag)
f_ooo_bsd1.addStep(ShellCommand(command=['/usr/local/bin/bash' , '-c' , 'find main ext_libraries -name logs | grep unxfbsdx.pro | xargs -I file mkdir -p log/logarch/file'],
            name="create log tree", haltOnFailure=False, timeout=2400, workdir="build",
))

# copy all of our logs to the staging area in a proper relative location for the log index
f_ooo_bsd1.addStep(ShellCommand(command=['/usr/local/bin/bash' , '-c' , 'find main ext_libraries -name logs | grep unxfbsdx.pro | xargs -I file find file | xargs -I file cp -rfv file log/logarch/file'],
            name="copy logs", haltOnFailure=False, timeout=2400, workdir="build",
))
 
# upload the logs directory
f_ooo_bsd1.addStep(DirectoryUpload(slavesrc="log/logarch", masterdest="/tmp/openoffice/fbsdn/log", 
            name="upload logs", haltOnFailure=True,
))

f_ooo_bsd1.addStep(MasterShellCommand(command="""
            cp -rv /tmp/openoffice/fbsdn/log/* /x1/buildmaster/master1/public_html/projects/openoffice/buildlogs/fbsdn/""", 
            name="move logs to web", 
))

# Upload install bits
# remove old install bits when not clobbering source tree
f_ooo_bsd1.addStep(ShellCommand(command=['rm' , '-rfv' , 'log/install'],
            name="remove old install bits", haltOnFailure=False, workdir="build",
))

# create a working directory to collect the install bits
f_ooo_bsd1.addStep(ShellCommand(command=['mkdir' , '-p' , 'log/install'],
            name="create install bits dir", haltOnFailure=False, workdir="build",
))

# copy all of our install bits to the staging area 
f_ooo_bsd1.addStep(ShellCommand(command=['/usr/local/bin/bash' , '-c' , 'find main/instsetoo_native -name *.tar.gz | xargs -I file mv -fv file log/install'],
            name="collect install bits", haltOnFailure=False, workdir="build",
))

# rename the files with the build number in them
f_ooo_bsd1.addStep(ShellCommand(command=['/usr/local/bin/bash' , '-c' , WithProperties("find log/install -name *.tar.gz | sed -e's/.tar.gz//' | xargs -I file mv -v file.tar.gz file_%(today)s_%(got_revision)s.tar.gz")],
            name="rename install bits with build number", haltOnFailure=False, workdir="build",
))

#upload the install directory
f_ooo_bsd1.addStep(DirectoryUpload(slavesrc="log/install", masterdest="/tmp/openoffice/fbsdn/install", 
            doStepIf=lambda step: step.build.getStatus().getResults() < 2,
            name="upload the install bits", haltOnFailure=True,
))

f_ooo_bsd1.addStep(MasterShellCommand(command="""
            stat /tmp/openoffice/fbsdn/install/* >/dev/null && rm -fv /x1/buildmaster/master1/public_html/projects/openoffice/install/fbsdn/*
            mv -v /tmp/openoffice/fbsdn/install/* /x1/buildmaster/master1/public_html/projects/openoffice/install/fbsdn/""",
            doStepIf=lambda step: step.build.getStatus().getResults() < 2,
            name="mv install bits to web", 
))


# Cleanup tmp
# Always run the tmp cleanup step, in case of failures part way through uploading etc..
f_ooo_bsd1.addStep(MasterShellCommand(command="""
            rm -rf /tmp/openoffice/fbsdn""",
            name="cleanup tmp", alwaysRun=True,
))


b_ooo_bsd1 = {'name': "openoffice-fbsd-nightly",
      'slavename': "bb-fbsd2_64bit",
      'builddir': "openoffice-fbsd-nightly",
      'factory': f_ooo_bsd1,
      'category': "openoffice-fbsd",
      }

c['builders'].append(b_ooo_bsd1)




#mail status

# custom mail message (don't apply this to the site-staging mailer)

from buildbot.status.builder import Results

def aooMessageFormatter(mode, name, build, results, master_status):
    result = Results[results]

    text = list()
    text.append("Hi! , The %s builder has just completed a run" % name)
    text.append("\nSTATUS: %s" % result.title())
    ss = build.getSourceStamp()
    if ss:
	got_rev = build.getProperty("got_revision")
        text.append("\n Build revision %s on branch %s" % (got_rev, ss.branch))
    text.append("\n Snapshot results at: http://ci.apache.org/projects/openoffice/")
    text.append("\n Build using the ASF buildslave: %s" % build.getSlavename())
    text.append("\n Build results at: %s" % master_status.getURLForThing(build))
    text.append("\n Build reason was: %s" % build.getReason())
    text.append("\n\n Yours Sincerely - The ASF Buildbot (%s)" % master_status.getBuildbotURL())
    text.append("--------------------------------------------------------------------------")
    text.append("\n Join the builds@apache.org mailing list for help with Buildbot")
    text.append("\n\n")
    return {
        'body' : "\n".join(text),
        'type' : 'plain'
    }

# message formatter disabled for debugging reasons
#                         messageFormatter=aooMessageFormatter,

c['status'].append(mail.MailNotifier(
                         fromaddr="buildbot@apache.org",
                         extraRecipients=["commits@openoffice.apache.org"],
                         sendToInterestedUsers=False,
                         mode="all",
                         categories=["openoffice-nightly" , 
                        "aoo-win7" , 
                        "openoffice-linux32-nightly" , 
                        "openoffice-linux32" , 
                        "openoffice-fbsd"]))


# irc

c['status'].append(words.IRC(host="irc.freenode.net", nick="ooo-bot",
                 allowForce=True,
                 channels=["#asftest"],
                 notify_events={
                     'successToFailure': 1,
                     'failureToSuccess': 1,
                 },
                 categories=["openoffice-nightly" , 
                        "aoo-win7" , 
                        "openoffice-linux32-nightly" , 
                        "openoffice-linux32" , 
                        "openoffice-fbsd"]))

