# This is the config file for the libcloud project.
from buildbot.changes.filter import ChangeFilter

# Schedulers
def contains_docs_changes(change):
    for name in change.files:
        if 'docs/' in name:
            return True
    return False

c['schedulers'].append(SingleBranchScheduler(name="on-libcloud-trunk-commit",
                       treeStableTimer=5,
                       change_filter=ChangeFilter(project='libcloud',
                                                  branch='trunk'),
                       builderNames=["libcloud-trunk-tox"]))

c['schedulers'].append(SingleBranchScheduler(name="on-libcloud-trunk-commit-docs",
                       treeStableTimer=5,
                       change_filter=ChangeFilter(project='libcloud',
                                                  branch='trunk'),
                       fileIsImportant=contains_docs_changes,
                       builderNames=["libcloud-docs"]))

# Builders
# Python run through tox (all versions except Python 3.3)
f_libcloud_3 = factory.BuildFactory()
f_libcloud_3.addStep(Git(repourl="https://git-wip-us.apache.org/repos/asf/libcloud.git",
                         branch="trunk"))

f_libcloud_3.addStep(ShellCommand(
            command=['cp', 'libcloud/test/secrets.py-dist', 'libcloud/test/secrets.py'],
            description=["Grab Secrets"],
            descriptionDone=["Secrets Grabbed"],
            haltOnFailure=True,
))

f_libcloud_3.addStep(PyFlakes(
            command=["pyflakes", "libcloud"],
            description=["Run Pyflakes"],
            flunkOnWarnings=False, flunkOnFailure=False
))

f_libcloud_3.addStep(Compile(command=["tox" , "-e" , "lint,py26,py27,pypy,py32"]))

f_libcloud_3.addStep(Compile(command=["python", "setup.py" , "apidocs"]))

#f_libcloud_3.addStep(Compile(command=["python", "setup.py" , "coverage"]))

# Don't bother uploading docs if the install step didn't work.
f_libcloud_3.addStep(DirectoryUpload(slavesrc="apidocs",
                                     masterdest="/tmp/libcloud/apidocs",
                                     haltOnFailure=True))

# If we got this far, then uploading docs to tmp location on master was successful,
# so now we can delete the previous published docs and move from tmp to published.
f_libcloud_3.addStep(MasterShellCommand(command="""
            rm -rf /x1/buildmaster/master1/public_html/projects/libcloud/apidocs/;
            cp -r /tmp/libcloud/apidocs /x1/buildmaster/master1/public_html/projects/libcloud/apidocs"""))

f_libcloud_3.addStep(DirectoryUpload(slavesrc="coverage_html_report",
                            masterdest="/tmp/libcloud/coverage",
                            haltOnFailure=True,
))

# If we got this far, then uploading coverage to tmp location on master was successful,
# so now we can delete the previous published coverage report and move from tmp to published.
f_libcloud_3.addStep(MasterShellCommand(command="""
            rm -rf /x1/buildmaster/master1/public_html/projects/libcloud/coverage/;
            cp -r /tmp/libcloud/coverage /x1/buildmaster/master1/public_html/projects/libcloud/coverage"""))


f_libcloud_3.addStep(ShellCommand(
            command=['bash', '-c', 'ant -f /home/buildslave3/slave3/rat-buildfiles/libcloud.xml -lib /home/buildslave3/'],
            description=["RAT Testing"],
            descriptionDone=["RAT Report Complete"],
            haltOnFailure=True))

f_libcloud_3.addStep(FileUpload(slavesrc="/home/buildslave3/slave3/rat-buildfiles/libcloud.xml",
                                       masterdest="/tmp/libcloud/rat-output.xml",
                                       haltOnFailure=True,))

# If we get this far, then the RAT report went fine and it was uploaded to master tmp
# dir without error. So now we can delete any previous report and move from tmp to
# published.
f_libcloud_3.addStep(MasterShellCommand(command="""
            rm -f /x1/buildmaster/master1/public_html/projects/libcloud/rat-output.xml;
            cp /tmp/libcloud/rat-output.xml /x1/buildmaster/master1/public_html/projects/libcloud/rat-output.xml"""))

# Cleanup tmp
f_libcloud_3.addStep(MasterShellCommand(command="""
            rm -rf /tmp/libcloud""",
            alwaysRun=True,
))

b_libcloud_3 = {'name': "libcloud-trunk-tox",
      'slavename': "bb-vm_ubuntu",
      'builddir': "libcloud-trunk-tox-git",
      'factory': f_libcloud_3,
      'category': "libcloud-trunk-tox",
      }

c['builders'].append(b_libcloud_3)

# Sphinx documentation builder
f_libcloud_4 = factory.BuildFactory()
f_libcloud_4.addStep(Git(repourl="https://git-wip-us.apache.org/repos/asf/libcloud.git",
                         branch="trunk"))

# Generate and upload Sphinx documentation
f_libcloud_4.addStep(Compile(command=["tox" , "-e" , "docs"]))

f_libcloud_4.addStep(DirectoryUpload(slavesrc="docs/_build/html",
                                     masterdest="/tmp/libcloud/docs",
                                     haltOnFailure=True))

f_libcloud_4.addStep(MasterShellCommand(command="""
            rm -rf /x1/buildmaster/master1/public_html/projects/libcloud/docs/;
            cp -r /tmp/libcloud/docs /x1/buildmaster/master1/public_html/projects/libcloud/docs"""))

# Trigger RTD build
f_libcloud_4.addStep(ShellCommand(
            command='./contrib/trigger_rtd_build.py 8284',
            description=['Trigger readthedocs build'],
            descriptionDone=['readthedocs build triggered'],
            haltOnFailure=False))

b_libcloud_4 = {'name': "libcloud-docs",
    'slavename': "bb-vm_ubuntu",
    'builddir': "libcloud-docs",
    'factory': f_libcloud_4,
    'category': "libcloud-trunk-tox",
}

c['builders'].append(b_libcloud_4)

# Status
c['status'].append(mail.MailNotifier(fromaddr="buildbot@apache.org",
                                     extraRecipients=["commits@libcloud.apache.org"],
                                     sendToInterestedUsers=False,
                                     mode="change",
                                     categories=["libcloud-trunk-tox"]))

c['status'].append(words.IRC(host="irc.freenode.net", nick="libcloud-bot",
                             allowForce=True,
                             channels=["#libcloud"],
                             notify_events={
                                'successToFailure': 1,
                                'failureToSuccess': 1,
                             },
                             categories=["libcloud-trunk-tox"]))
